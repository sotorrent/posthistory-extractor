Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
23853687;10381975;1048425;2;6f424ad2-6257-4169-aedc-177eb7b80ada;2012-04-30 10:15:37.0;"The simplest way of explaining it is to look at how `FOR XML PATH` works for actual XML. Imagine a simple table `Employee`:&#xD;&#xA;&#xD;&#xA;    EmployeeID		Name&#xD;&#xA;    1				John Smith&#xD;&#xA;    2				Jane Doe&#xD;&#xA;&#xD;&#xA;You could use &#xD;&#xA;&#xD;&#xA;	SELECT	EmployeeID, Name&#xD;&#xA;	FROM	emp.Employee&#xD;&#xA;	FOR XML PATH ('Employee')&#xD;&#xA;&#xD;&#xA;This would create XML as follows&#xD;&#xA;&#xD;&#xA;	<Employee>&#xD;&#xA;		<EmployeeID>1</EmployeeID>&#xD;&#xA;		<Name>John Smith</Name>&#xD;&#xA;	</Employee>&#xD;&#xA;	<Employee>&#xD;&#xA;		<EmployeeID>2</EmployeeID>&#xD;&#xA;		<Name>Jane Doe</Name>&#xD;&#xA;	</Employee>&#xD;&#xA;		&#xD;&#xA;		&#xD;&#xA;Removing the 'Employee' from `PATH` removes the outer xml tags so this query:&#xD;&#xA;&#xD;&#xA;	SELECT	Name AS [Data()]&#xD;&#xA;	FROM	Employee&#xD;&#xA;	FOR XML PATH ('Employee')&#xD;&#xA;	&#xD;&#xA;Would create&#xD;&#xA;&#xD;&#xA;		<Name>John Smith</Name>&#xD;&#xA;		<Name>Jane Doe</Name>&#xD;&#xA;		&#xD;&#xA;What you are then doing is not ideal, the column name 'data()' forces an sql error because it is trying to create an xml tag <Data()> which is not a legal tag, so the following error is generated:&#xD;&#xA;&#xD;&#xA;`Column name 'Data()' contains an invalid XML identifier as required by FOR XML; '('(0x0028) is the first character at fault.`&#xD;&#xA;&#xD;&#xA;The correlated subquery hides this error and just generates the XML with no tags:&#xD;&#xA;&#xD;&#xA;	SELECT	Name AS [Data()]&#xD;&#xA;	FROM	Employee&#xD;&#xA;	FOR XML PATH ('Employee')&#xD;&#xA;	&#xD;&#xA;creates&#xD;&#xA;&#xD;&#xA;	John Smith Jane Doe&#xD;&#xA;&#xD;&#xA;You are then replacing spaces with commas, fairly self explanatory... &#xD;&#xA;&#xD;&#xA;If I were you I would adapt the query slightly:&#xD;&#xA;&#xD;&#xA;    SELECT	E1.deptno, &#xD;&#xA;    		STUFF((	SELECT	', ' + E2.ename &#xD;&#xA;    				FROM	emp AS e2 &#xD;&#xA;                    WHERE	e1.deptno = e2.DEPTNO &#xD;&#xA;                    FOR XML PATH('')&#xD;&#xA;                ), 1, 2, '') &#xD;&#xA;    FROM	EMP AS e1 &#xD;&#xA;    GROUP BY DEPTNO; &#xD;&#xA;&#xD;&#xA;Having no column alias will mean no xml tags are created, and adding the comma within the select query means any names with spaces in will not cause errors,`STUFF` will remove the first comma and space";;
23853971;10381975;1048425;5;3e71d94b-3d86-437a-b3cd-d705f81dea89;2012-04-30 10:24:15.0;"The simplest way of explaining it is to look at how `FOR XML PATH` works for actual XML. Imagine a simple table `Employee`:&#xD;&#xA;&#xD;&#xA;    EmployeeID		Name&#xD;&#xA;    1				John Smith&#xD;&#xA;    2				Jane Doe&#xD;&#xA;&#xD;&#xA;You could use &#xD;&#xA;&#xD;&#xA;	SELECT	EmployeeID, Name&#xD;&#xA;	FROM	emp.Employee&#xD;&#xA;	FOR XML PATH ('Employee')&#xD;&#xA;&#xD;&#xA;This would create XML as follows&#xD;&#xA;&#xD;&#xA;	<Employee>&#xD;&#xA;		<EmployeeID>1</EmployeeID>&#xD;&#xA;		<Name>John Smith</Name>&#xD;&#xA;	</Employee>&#xD;&#xA;	<Employee>&#xD;&#xA;		<EmployeeID>2</EmployeeID>&#xD;&#xA;		<Name>Jane Doe</Name>&#xD;&#xA;	</Employee>&#xD;&#xA;		&#xD;&#xA;		&#xD;&#xA;Removing the 'Employee' from `PATH` removes the outer xml tags so this query:&#xD;&#xA;&#xD;&#xA;	SELECT	Name&#xD;&#xA;	FROM	Employee&#xD;&#xA;	FOR XML PATH ('')&#xD;&#xA;	&#xD;&#xA;Would create&#xD;&#xA;&#xD;&#xA;		<Name>John Smith</Name>&#xD;&#xA;		<Name>Jane Doe</Name>&#xD;&#xA;		&#xD;&#xA;What you are then doing is not ideal, the column name 'data()' forces an sql error because it is trying to create an xml tag <Data()> which is not a legal tag, so the following error is generated:&#xD;&#xA;&#xD;&#xA;`Column name 'Data()' contains an invalid XML identifier as required by FOR XML; '('(0x0028) is the first character at fault.`&#xD;&#xA;&#xD;&#xA;The correlated subquery hides this error and just generates the XML with no tags:&#xD;&#xA;&#xD;&#xA;	SELECT	Name AS [Data()]&#xD;&#xA;	FROM	Employee&#xD;&#xA;	FOR XML PATH ('Employee')&#xD;&#xA;	&#xD;&#xA;creates&#xD;&#xA;&#xD;&#xA;	John Smith Jane Doe&#xD;&#xA;&#xD;&#xA;You are then replacing spaces with commas, fairly self explanatory... &#xD;&#xA;&#xD;&#xA;If I were you I would adapt the query slightly:&#xD;&#xA;&#xD;&#xA;    SELECT	E1.deptno, &#xD;&#xA;    		STUFF((	SELECT	', ' + E2.ename &#xD;&#xA;    				FROM	emp AS e2 &#xD;&#xA;                    WHERE	e1.deptno = e2.DEPTNO &#xD;&#xA;                    FOR XML PATH('')&#xD;&#xA;                ), 1, 2, '') &#xD;&#xA;    FROM	EMP AS e1 &#xD;&#xA;    GROUP BY DEPTNO; &#xD;&#xA;&#xD;&#xA;Having no column alias will mean no xml tags are created, and adding the comma within the select query means any names with spaces in will not cause errors,`STUFF` will remove the first comma and space";;deleted 20 characters in body
39779854;10381975;1048425;5;b8edaaf3-dbbd-49d8-b9d8-990e1f20ac52;2013-04-27 07:23:06.0;"The simplest way of explaining it is to look at how `FOR XML PATH` works for actual XML. Imagine a simple table `Employee`:&#xD;&#xA;&#xD;&#xA;    EmployeeID		Name&#xD;&#xA;    1				John Smith&#xD;&#xA;    2				Jane Doe&#xD;&#xA;&#xD;&#xA;You could use &#xD;&#xA;&#xD;&#xA;	SELECT	EmployeeID, Name&#xD;&#xA;	FROM	emp.Employee&#xD;&#xA;	FOR XML PATH ('Employee')&#xD;&#xA;&#xD;&#xA;This would create XML as follows&#xD;&#xA;&#xD;&#xA;	<Employee>&#xD;&#xA;		<EmployeeID>1</EmployeeID>&#xD;&#xA;		<Name>John Smith</Name>&#xD;&#xA;	</Employee>&#xD;&#xA;	<Employee>&#xD;&#xA;		<EmployeeID>2</EmployeeID>&#xD;&#xA;		<Name>Jane Doe</Name>&#xD;&#xA;	</Employee>&#xD;&#xA;		&#xD;&#xA;		&#xD;&#xA;Removing the 'Employee' from `PATH` removes the outer xml tags so this query:&#xD;&#xA;&#xD;&#xA;	SELECT	Name&#xD;&#xA;	FROM	Employee&#xD;&#xA;	FOR XML PATH ('')&#xD;&#xA;	&#xD;&#xA;Would create&#xD;&#xA;&#xD;&#xA;		<Name>John Smith</Name>&#xD;&#xA;		<Name>Jane Doe</Name>&#xD;&#xA;		&#xD;&#xA;What you are then doing is not ideal, the column name 'data()' forces an sql error because it is trying to create an xml tag <Data()> which is not a legal tag, so the following error is generated:&#xD;&#xA;&#xD;&#xA;`Column name 'Data()' contains an invalid XML identifier as required by FOR XML; '('(0x0028) is the first character at fault.`&#xD;&#xA;&#xD;&#xA;The correlated subquery hides this error and just generates the XML with no tags:&#xD;&#xA;&#xD;&#xA;	SELECT	Name AS [Data()]&#xD;&#xA;	FROM	Employee&#xD;&#xA;	FOR XML PATH ('Employee')&#xD;&#xA;	&#xD;&#xA;creates&#xD;&#xA;&#xD;&#xA;	John Smith Jane Doe&#xD;&#xA;&#xD;&#xA;You are then replacing spaces with commas, fairly self explanatory... &#xD;&#xA;&#xD;&#xA;If I were you I would adapt the query slightly:&#xD;&#xA;&#xD;&#xA;    SELECT	E1.deptno, &#xD;&#xA;    		STUFF((	SELECT	', ' + E2.ename &#xD;&#xA;    				FROM	emp AS e2 &#xD;&#xA;                    WHERE	e1.deptno = e2.DEPTNO &#xD;&#xA;                    FOR XML PATH('')&#xD;&#xA;                ), 1, 2, '') &#xD;&#xA;    FROM	EMP AS e1 &#xD;&#xA;    GROUP BY DEPTNO; &#xD;&#xA;&#xD;&#xA;Having no column alias will mean no xml tags are created, and adding the comma within the select query means any names with spaces in will not cause errors,`STUFF` will remove the first comma and space.&#xD;&#xA;&#xD;&#xA;**ADDENDUM**&#xD;&#xA;&#xD;&#xA;To elaborate on what KM has said in a comment, as this seems to be getting a few more views, the correct way to escape XML characters would be to use `.value` as follows:&#xD;&#xA;&#xD;&#xA;	SELECT  E1.deptno, &#xD;&#xA;			STUFF(( SELECT  ', ' + E2.ename &#xD;&#xA;					FROM    emp AS e2 &#xD;&#xA;					WHERE   e1.deptno = e2.DEPTNO &#xD;&#xA;					FOR XML PATH(''), TYPE&#xD;&#xA;				).value('.', 'NVARCHAR(MAX)), 1, 2, '') &#xD;&#xA;	FROM    EMP AS e1 &#xD;&#xA;	GROUP BY DEPTNO; ";;added 430 characters in body
40807482;10381975;1048425;5;67e8679d-d962-47c3-a626-4740c9a482b4;2013-05-17 22:22:12.0;"The simplest way of explaining it is to look at how `FOR XML PATH` works for actual XML. Imagine a simple table `Employee`:&#xD;&#xA;&#xD;&#xA;    EmployeeID		Name&#xD;&#xA;    1				John Smith&#xD;&#xA;    2				Jane Doe&#xD;&#xA;&#xD;&#xA;You could use &#xD;&#xA;&#xD;&#xA;	SELECT	EmployeeID, Name&#xD;&#xA;	FROM	emp.Employee&#xD;&#xA;	FOR XML PATH ('Employee')&#xD;&#xA;&#xD;&#xA;This would create XML as follows&#xD;&#xA;&#xD;&#xA;	<Employee>&#xD;&#xA;		<EmployeeID>1</EmployeeID>&#xD;&#xA;		<Name>John Smith</Name>&#xD;&#xA;	</Employee>&#xD;&#xA;	<Employee>&#xD;&#xA;		<EmployeeID>2</EmployeeID>&#xD;&#xA;		<Name>Jane Doe</Name>&#xD;&#xA;	</Employee>&#xD;&#xA;		&#xD;&#xA;		&#xD;&#xA;Removing the 'Employee' from `PATH` removes the outer xml tags so this query:&#xD;&#xA;&#xD;&#xA;	SELECT	Name&#xD;&#xA;	FROM	Employee&#xD;&#xA;	FOR XML PATH ('')&#xD;&#xA;	&#xD;&#xA;Would create&#xD;&#xA;&#xD;&#xA;		<Name>John Smith</Name>&#xD;&#xA;		<Name>Jane Doe</Name>&#xD;&#xA;		&#xD;&#xA;What you are then doing is not ideal, the column name 'data()' forces an sql error because it is trying to create an xml tag <Data()> which is not a legal tag, so the following error is generated:&#xD;&#xA;&#xD;&#xA;`Column name 'Data()' contains an invalid XML identifier as required by FOR XML; '('(0x0028) is the first character at fault.`&#xD;&#xA;&#xD;&#xA;The correlated subquery hides this error and just generates the XML with no tags:&#xD;&#xA;&#xD;&#xA;	SELECT	Name AS [Data()]&#xD;&#xA;	FROM	Employee&#xD;&#xA;	FOR XML PATH ('Employee')&#xD;&#xA;	&#xD;&#xA;creates&#xD;&#xA;&#xD;&#xA;	John Smith Jane Doe&#xD;&#xA;&#xD;&#xA;You are then replacing spaces with commas, fairly self explanatory... &#xD;&#xA;&#xD;&#xA;If I were you I would adapt the query slightly:&#xD;&#xA;&#xD;&#xA;    SELECT	E1.deptno, &#xD;&#xA;    		STUFF((	SELECT	', ' + E2.ename &#xD;&#xA;    				FROM	emp AS e2 &#xD;&#xA;                    WHERE	e1.deptno = e2.DEPTNO &#xD;&#xA;                    FOR XML PATH('')&#xD;&#xA;                ), 1, 2, '') &#xD;&#xA;    FROM	EMP AS e1 &#xD;&#xA;    GROUP BY DEPTNO; &#xD;&#xA;&#xD;&#xA;Having no column alias will mean no xml tags are created, and adding the comma within the select query means any names with spaces in will not cause errors,`STUFF` will remove the first comma and space.&#xD;&#xA;&#xD;&#xA;**ADDENDUM**&#xD;&#xA;&#xD;&#xA;To elaborate on what KM has said in a comment, as this seems to be getting a few more views, the correct way to escape XML characters would be to use `.value` as follows:&#xD;&#xA;&#xD;&#xA;	SELECT  E1.deptno, &#xD;&#xA;			STUFF(( SELECT  ', ' + E2.ename &#xD;&#xA;					FROM    emp AS e2 &#xD;&#xA;					WHERE   e1.deptno = e2.DEPTNO &#xD;&#xA;					FOR XML PATH(''), TYPE&#xD;&#xA;				).value('.', 'NVARCHAR(MAX)'), 1, 2, '') &#xD;&#xA;	FROM    EMP AS e1 &#xD;&#xA;	GROUP BY DEPTNO; ";;added 1 characters in body
44617966;10381975;1048425;5;364e66d2-92a4-4ef9-9eeb-28aad0d61a55;2013-07-31 17:12:52.0;"The simplest way of explaining it is to look at how `FOR XML PATH` works for actual XML. Imagine a simple table `Employee`:&#xD;&#xA;&#xD;&#xA;    EmployeeID		Name&#xD;&#xA;    1				John Smith&#xD;&#xA;    2				Jane Doe&#xD;&#xA;&#xD;&#xA;You could use &#xD;&#xA;&#xD;&#xA;	SELECT	EmployeeID, Name&#xD;&#xA;	FROM	emp.Employee&#xD;&#xA;	FOR XML PATH ('Employee')&#xD;&#xA;&#xD;&#xA;This would create XML as follows&#xD;&#xA;&#xD;&#xA;	<Employee>&#xD;&#xA;		<EmployeeID>1</EmployeeID>&#xD;&#xA;		<Name>John Smith</Name>&#xD;&#xA;	</Employee>&#xD;&#xA;	<Employee>&#xD;&#xA;		<EmployeeID>2</EmployeeID>&#xD;&#xA;		<Name>Jane Doe</Name>&#xD;&#xA;	</Employee>&#xD;&#xA;		&#xD;&#xA;		&#xD;&#xA;Removing the 'Employee' from `PATH` removes the outer xml tags so this query:&#xD;&#xA;&#xD;&#xA;	SELECT	Name&#xD;&#xA;	FROM	Employee&#xD;&#xA;	FOR XML PATH ('')&#xD;&#xA;	&#xD;&#xA;Would create&#xD;&#xA;&#xD;&#xA;		<Name>John Smith</Name>&#xD;&#xA;		<Name>Jane Doe</Name>&#xD;&#xA;		&#xD;&#xA;What you are then doing is not ideal, the column name 'data()' forces an sql error because it is trying to create an xml tag <Data()> which is not a legal tag, so the following error is generated:&#xD;&#xA;&#xD;&#xA;`Column name 'Data()' contains an invalid XML identifier as required by FOR XML; '('(0x0028) is the first character at fault.`&#xD;&#xA;&#xD;&#xA;The correlated subquery hides this error and just generates the XML with no tags:&#xD;&#xA;&#xD;&#xA;	SELECT	Name AS [Data()]&#xD;&#xA;	FROM	Employee&#xD;&#xA;	FOR XML PATH ('')&#xD;&#xA;	&#xD;&#xA;creates&#xD;&#xA;&#xD;&#xA;	John Smith Jane Doe&#xD;&#xA;&#xD;&#xA;You are then replacing spaces with commas, fairly self explanatory... &#xD;&#xA;&#xD;&#xA;If I were you I would adapt the query slightly:&#xD;&#xA;&#xD;&#xA;    SELECT	E1.deptno, &#xD;&#xA;    		STUFF((	SELECT	', ' + E2.ename &#xD;&#xA;    				FROM	emp AS e2 &#xD;&#xA;                    WHERE	e1.deptno = e2.DEPTNO &#xD;&#xA;                    FOR XML PATH('')&#xD;&#xA;                ), 1, 2, '') &#xD;&#xA;    FROM	EMP AS e1 &#xD;&#xA;    GROUP BY DEPTNO; &#xD;&#xA;&#xD;&#xA;Having no column alias will mean no xml tags are created, and adding the comma within the select query means any names with spaces in will not cause errors,`STUFF` will remove the first comma and space.&#xD;&#xA;&#xD;&#xA;**ADDENDUM**&#xD;&#xA;&#xD;&#xA;To elaborate on what KM has said in a comment, as this seems to be getting a few more views, the correct way to escape XML characters would be to use `.value` as follows:&#xD;&#xA;&#xD;&#xA;	SELECT  E1.deptno, &#xD;&#xA;			STUFF(( SELECT  ', ' + E2.ename &#xD;&#xA;					FROM    emp AS e2 &#xD;&#xA;					WHERE   e1.deptno = e2.DEPTNO &#xD;&#xA;					FOR XML PATH(''), TYPE&#xD;&#xA;				).value('.', 'NVARCHAR(MAX)'), 1, 2, '') &#xD;&#xA;	FROM    EMP AS e1 &#xD;&#xA;	GROUP BY DEPTNO; ";;deleted 8 characters in body
107160128;10381975;4519059;5;b78be80c-503f-41d5-b1ef-d5fbcc0811b0;2015-12-26 07:25:41.0;"The simplest way of explaining it is to look at how `FOR XML PATH` works for actual XML. Imagine a simple table `Employee`:&#xD;&#xA;&#xD;&#xA;    EmployeeID		Name&#xD;&#xA;    1				John Smith&#xD;&#xA;    2				Jane Doe&#xD;&#xA;&#xD;&#xA;You could use &#xD;&#xA;&#xD;&#xA;	SELECT	EmployeeID, Name&#xD;&#xA;	FROM	emp.Employee&#xD;&#xA;	FOR XML PATH ('Employee')&#xD;&#xA;&#xD;&#xA;This would create XML as follows&#xD;&#xA;&#xD;&#xA;	<Employee>&#xD;&#xA;		<EmployeeID>1</EmployeeID>&#xD;&#xA;		<Name>John Smith</Name>&#xD;&#xA;	</Employee>&#xD;&#xA;	<Employee>&#xD;&#xA;		<EmployeeID>2</EmployeeID>&#xD;&#xA;		<Name>Jane Doe</Name>&#xD;&#xA;	</Employee>&#xD;&#xA;		&#xD;&#xA;		&#xD;&#xA;Removing the 'Employee' from `PATH` removes the outer xml tags so this query:&#xD;&#xA;&#xD;&#xA;	SELECT	Name&#xD;&#xA;	FROM	Employee&#xD;&#xA;	FOR XML PATH ('')&#xD;&#xA;	&#xD;&#xA;Would create&#xD;&#xA;&#xD;&#xA;		<Name>John Smith</Name>&#xD;&#xA;		<Name>Jane Doe</Name>&#xD;&#xA;		&#xD;&#xA;What you are then doing is not ideal, the column name 'data()' forces an sql error because it is trying to create an xml tag <Data()> which is not a legal tag, so the following error is generated:&#xD;&#xA;&#xD;&#xA;> Column name 'Data()' contains an invalid XML identifier as required by FOR XML; '('(0x0028) is the first character at fault.&#xD;&#xA;&#xD;&#xA;The correlated subquery hides this error and just generates the XML with no tags:&#xD;&#xA;&#xD;&#xA;	SELECT	Name AS [Data()]&#xD;&#xA;	FROM	Employee&#xD;&#xA;	FOR XML PATH ('')&#xD;&#xA;	&#xD;&#xA;creates&#xD;&#xA;&#xD;&#xA;	John Smith Jane Doe&#xD;&#xA;&#xD;&#xA;You are then replacing spaces with commas, fairly self explanatory... &#xD;&#xA;&#xD;&#xA;If I were you I would adapt the query slightly:&#xD;&#xA;&#xD;&#xA;    SELECT	E1.deptno, &#xD;&#xA;    		STUFF((	SELECT	', ' + E2.ename &#xD;&#xA;    				FROM	emp AS e2 &#xD;&#xA;                    WHERE	e1.deptno = e2.DEPTNO &#xD;&#xA;                    FOR XML PATH('')&#xD;&#xA;                ), 1, 2, '') &#xD;&#xA;    FROM	EMP AS e1 &#xD;&#xA;    GROUP BY DEPTNO; &#xD;&#xA;&#xD;&#xA;Having no column alias will mean no xml tags are created, and adding the comma within the select query means any names with spaces in will not cause errors,`STUFF` will remove the first comma and space.&#xD;&#xA;&#xD;&#xA;**ADDENDUM**&#xD;&#xA;&#xD;&#xA;To elaborate on what KM has said in a comment, as this seems to be getting a few more views, the correct way to escape XML characters would be to use `.value` as follows:&#xD;&#xA;&#xD;&#xA;	SELECT  E1.deptno, &#xD;&#xA;			STUFF(( SELECT  ', ' + E2.ename &#xD;&#xA;					FROM    emp AS e2 &#xD;&#xA;					WHERE   e1.deptno = e2.DEPTNO &#xD;&#xA;					FOR XML PATH(''), TYPE&#xD;&#xA;				).value('.', 'NVARCHAR(MAX)'), 1, 2, '') &#xD;&#xA;	FROM    EMP AS e1 &#xD;&#xA;	GROUP BY DEPTNO; ";;edited body
