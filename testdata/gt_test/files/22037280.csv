Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
58996741;22037280;1501794;2;d5b2c473-1214-4ed2-ac86-8f73510482c2;2014-02-26 09:38:07.0;"You may try to change your program like this:

    static Double round(Double d, int precise) 
    {
    BigDecimal bigDecimal = BigDecimal.valueOf(d);
    bigDecimal = bigDecimal.setScale(precise, RoundingMode.HALF_UP);
    return bigDecimal.doubleValue();
    }

[Ideone][1]

    Success	 time: 0.07 memory: 381184 signal:0
    Rounded: 2.66
    Rounded: 1.66
    
    Success	 time: 0.07 memory: 381248 signal:0
    Rounded: 2.66
    Rounded: 1.66

**Reason why you are getting the expected result with BigDecimal.valueOf and not with new BigDecimal** is BigDecimal.valueOf(double) will use the canonical String representation of the double value passed in to instantiate the BigDecimal object. In other words: The value of the BigDecimal object will be what you see when you do System.out.println(d).

If you use new BigDecimal(d) however, then the BigDecimal will try to represent the double value as accurately as possible. This will usually result in a lot more digits being stored than you want. 

  [1]: http://ideone.com/sVHWjL
";;
58997388;22037280;1501794;5;a62339c3-9cab-4097-ab5f-155189438334;2014-02-26 09:44:41.0;"You may try to change your program like this:

    static Double round(Double d, int precise) 
    {
    BigDecimal bigDecimal = BigDecimal.valueOf(d);
    bigDecimal = bigDecimal.setScale(precise, RoundingMode.HALF_UP);
    return bigDecimal.doubleValue();
    }

[Ideone][1]

    Success	 time: 0.07 memory: 381184 signal:0
    Rounded: 2.66
    Rounded: 1.66
    
    Success	 time: 0.07 memory: 381248 signal:0
    Rounded: 2.66
    Rounded: 1.66

**Reason why you are getting the expected result with `BigDecimal.valueOf` and not with `new BigDecimal`** is `BigDecimal.valueOf(double)` will use the [canonical String representation][2] of the double value passed in to instantiate the BigDecimal object. In other words: The value of the BigDecimal object will be what you see when you do System.out.println(d).

If you use `new BigDecimal(d)` however, then the BigDecimal will try to represent the double value as accurately as possible. This will usually result in a lot more digits being stored than you want. Hence resulting in some **confusion** which you are watching in your program.


  [1]: http://ideone.com/sVHWjL
  [2]: http://docs.oracle.com/javase/7/docs/api/java/lang/Double.html#toString%28double%29";;added 97 characters in body
59004094;22037280;1501794;5;ecedbb0b-735e-4a34-b010-902d9f7495ff;2014-02-26 10:59:04.0;"You may try to change your program like this:

    static Double round(Double d, int precise) 
    {
    BigDecimal bigDecimal = BigDecimal.valueOf(d);
    bigDecimal = bigDecimal.setScale(precise, RoundingMode.HALF_UP);
    return bigDecimal.doubleValue();
    }

[Ideone][1]

    Success	 time: 0.07 memory: 381184 signal:0
    Rounded: 2.66
    Rounded: 1.66
    
    Success	 time: 0.07 memory: 381248 signal:0
    Rounded: 2.66
    Rounded: 1.66

**Reason why you are getting the expected result with `BigDecimal.valueOf` and not with `new BigDecimal`** is `BigDecimal.valueOf(double)` will use the [canonical String representation][2] of the double value passed in to instantiate the BigDecimal object. In other words: The value of the BigDecimal object will be what you see when you do System.out.println(d).

If you use `new BigDecimal(d)` however, then the BigDecimal will try to represent the double value as accurately as possible. This will usually result in a lot more digits being stored than you want. Hence resulting in some **confusion** which you are watching in your program.

From the Java Doc:

> **[BigDecimal.valueOf(double val)][3]** - Translates a double into a BigDecimal, using the double's canonical string representation
> provided by the Double.toString(double) method.
> 
> **[new BigDecimal(double val)][4]** - 
> 
> Translates a double into a BigDecimal which is the exact decimal
> representation of the double's binary floating-point value. The scale
> of the returned BigDecimal is the smallest value such that (10scale ×
> val) is an integer. Notes:
> 
>  - The results of this constructor can be somewhat unpredictable. One    might assume that writing new BigDecimal(0.1) in Java creates a   
> BigDecimal which is exactly equal to 0.1 (an unscaled value of 1,   
> with a scale of 1), but it is actually equal to
>    0.1000000000000000055511151231257827021181583404541015625. This is because 0.1 cannot be represented exactly as a double (or, for that   
> matter, as a binary fraction of any finite length). Thus, the value   
> that is being passed in to the constructor is not exactly equal to
>    0.1, appearances notwithstanding.
>  - The String constructor, on the other hand, is perfectly predictable:    writing new BigDecimal(""0.1"") creates a BigDecimal
> which is exactly    equal to 0.1, as one would expect. Therefore, it
> is generally    recommended that the String constructor be used in
> preference to this    one.
>  - When a double must be used as a source for a BigDecimal, note that    this constructor provides an exact conversion; it does not give the   
> same result as converting the double to a String using the   
> Double.toString(double) method and then using the BigDecimal(String)  
> constructor. To get that result, use the static valueOf(double)   
> method.

  [1]: http://ideone.com/sVHWjL
  [2]: http://docs.oracle.com/javase/7/docs/api/java/lang/Double.html#toString%28double%29
  [3]: http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html#valueOf%28double%29
  [4]: http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html#valueOf%28double%29";;added 1958 characters in body
59078493;22037280;1501794;5;d3ebcdf8-5872-40b2-8d10-7fb806f2f3ed;2014-02-27 05:25:31.0;"You may try to change your program like this:

    static Double round(Double d, int precise) 
    {
    BigDecimal bigDecimal = BigDecimal.valueOf(d);
    bigDecimal = bigDecimal.setScale(precise, RoundingMode.HALF_UP);
    return bigDecimal.doubleValue();
    }

**[Sample Ideone][1]**

    Success	 time: 0.07 memory: 381184 signal:0
    Rounded: 2.66
    Rounded: 1.66
    
    Success	 time: 0.07 memory: 381248 signal:0
    Rounded: 2.66
    Rounded: 1.66

**Reason why you are getting the expected result with `BigDecimal.valueOf` and not with `new BigDecimal`** is `BigDecimal.valueOf(double)` will use the [canonical String representation][2] of the double value passed in to instantiate the BigDecimal object. In other words: The value of the BigDecimal object will be what you see when you do System.out.println(d).

If you use `new BigDecimal(d)` however, then the BigDecimal will try to represent the double value as accurately as possible. This will usually result in a lot more digits being stored than you want. Hence resulting in some **confusion** which you are watching in your program.

From the Java Doc:

> **[BigDecimal.valueOf(double val)][3]** - Translates a double into a BigDecimal, using the double's canonical string representation
> provided by the Double.toString(double) method.
> 
> **[new BigDecimal(double val)][4]** - 
> 
> Translates a double into a BigDecimal which is the exact decimal
> representation of the double's binary floating-point value. The scale
> of the returned BigDecimal is the smallest value such that (10scale ×
> val) is an integer. Notes:
> 
>  - The results of this constructor can be somewhat unpredictable. One    might assume that writing new BigDecimal(0.1) in Java creates a   
> BigDecimal which is exactly equal to 0.1 (an unscaled value of 1,   
> with a scale of 1), but it is actually equal to
>    0.1000000000000000055511151231257827021181583404541015625. This is because 0.1 cannot be represented exactly as a double (or, for that   
> matter, as a binary fraction of any finite length). Thus, the value   
> that is being passed in to the constructor is not exactly equal to
>    0.1, appearances notwithstanding.
>  - The String constructor, on the other hand, is perfectly predictable:    writing new BigDecimal(""0.1"") creates a BigDecimal
> which is exactly    equal to 0.1, as one would expect. Therefore, it
> is generally    recommended that the String constructor be used in
> preference to this    one.
>  - When a double must be used as a source for a BigDecimal, note that    this constructor provides an exact conversion; it does not give the   
> same result as converting the double to a String using the   
> Double.toString(double) method and then using the BigDecimal(String)  
> constructor. To get that result, use the static valueOf(double)   
> method.

  [1]: http://ideone.com/sVHWjL
  [2]: http://docs.oracle.com/javase/7/docs/api/java/lang/Double.html#toString%28double%29
  [3]: http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html#valueOf%28double%29
  [4]: http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html#valueOf%28double%29";;added 11 characters in body
60329723;22037280;387076;5;ad86a374-16da-4483-940e-3b59903e9036;2014-03-13 21:04:54.0;"You may try to change your program like this:

    static Double round(Double d, int precise) 
    {
    BigDecimal bigDecimal = BigDecimal.valueOf(d);
    bigDecimal = bigDecimal.setScale(precise, RoundingMode.HALF_UP);
    return bigDecimal.doubleValue();
    }

**[Sample Ideone][1]**

    Success	 time: 0.07 memory: 381184 signal:0
    Rounded: 2.66
    Rounded: 1.66
    
    Success	 time: 0.07 memory: 381248 signal:0
    Rounded: 2.66
    Rounded: 1.66

**Reason why you are getting the expected result with `BigDecimal.valueOf` and not with `new BigDecimal`**, in the words of [Joachim Sauer](http://stackoverflow.com/questions/7186204/bigdecimal-to-use-new-or-valueof/7186298#7186298):

> `BigDecimal.valueOf(double)` will use the [canonical String representation][2] of the double value passed in to instantiate the BigDecimal object. In other words: The value of the `BigDecimal` object will be what you see when you do `System.out.println(d)`.

> If you use `new BigDecimal(d)` however, then the BigDecimal will try to represent the double value as accurately as possible. This will usually result in a lot more digits being stored than you want.

Hence resulting in some **confusion** which you are watching in your program.

From the Java Doc:

> **[BigDecimal.valueOf(double val)][3]** - Translates a double into a BigDecimal, using the double's canonical string representation
> provided by the Double.toString(double) method.
> 
> **[new BigDecimal(double val)][4]** - 
> 
> Translates a double into a BigDecimal which is the exact decimal
> representation of the double's binary floating-point value. The scale
> of the returned BigDecimal is the smallest value such that (10scale ×
> val) is an integer. Notes:
> 
>  - The results of this constructor can be somewhat unpredictable. One    might assume that writing new BigDecimal(0.1) in Java creates a   
> BigDecimal which is exactly equal to 0.1 (an unscaled value of 1,   
> with a scale of 1), but it is actually equal to
>    0.1000000000000000055511151231257827021181583404541015625. This is because 0.1 cannot be represented exactly as a double (or, for that   
> matter, as a binary fraction of any finite length). Thus, the value   
> that is being passed in to the constructor is not exactly equal to
>    0.1, appearances notwithstanding.
>  - The String constructor, on the other hand, is perfectly predictable:    writing new BigDecimal(""0.1"") creates a BigDecimal
> which is exactly    equal to 0.1, as one would expect. Therefore, it
> is generally    recommended that the String constructor be used in
> preference to this    one.
>  - When a double must be used as a source for a BigDecimal, note that    this constructor provides an exact conversion; it does not give the   
> same result as converting the double to a String using the   
> Double.toString(double) method and then using the BigDecimal(String)  
> constructor. To get that result, use the static valueOf(double)   
> method.

  [1]: http://ideone.com/sVHWjL
  [2]: http://docs.oracle.com/javase/7/docs/api/java/lang/Double.html#toString%28double%29
  [3]: http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html#valueOf%28double%29
  [4]: http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html#valueOf%28double%29";;added missing attribution for copied content
69262919;22037280;;5;63af6071-ddb5-4fa6-b6e0-2ff64c35f445;2014-07-14 04:55:27.0;"You may try to change your program like this:-

    static Double round(Double d, int precise) 
    {
    BigDecimal bigDecimal = BigDecimal.valueOf(d);
    bigDecimal = bigDecimal.setScale(precise, RoundingMode.HALF_UP);
    return bigDecimal.doubleValue();
    }

**[Sample Ideone][1]**

    Success	 time: 0.07 memory: 381184 signal:0
    Rounded: 2.66
    Rounded: 1.66
    
    Success	 time: 0.07 memory: 381248 signal:0
    Rounded: 2.66
    Rounded: 1.66

**Reason why you are getting the expected result with `BigDecimal.valueOf` and not with `new BigDecimal`**, in the words of [Joachim Sauer](http://stackoverflow.com/questions/7186204/bigdecimal-to-use-new-or-valueof/7186298#7186298):

> `BigDecimal.valueOf(double)` will use the [canonical String representation][2] of the double value passed in to instantiate the BigDecimal object. In other words: The value of the `BigDecimal` object will be what you see when you do `System.out.println(d)`.

> If you use `new BigDecimal(d)` however, then the BigDecimal will try to represent the double value as accurately as possible. This will usually result in a lot more digits being stored than you want.

Hence resulting in some **confusion** which you are watching in your program.

From the Java Doc:

> **[BigDecimal.valueOf(double val)][3]** - Translates a double into a BigDecimal, using the double's canonical string representation
> provided by the Double.toString(double) method.
> 
> **[new BigDecimal(double val)][4]** - 
> 
> Translates a double into a BigDecimal which is the exact decimal
> representation of the double's binary floating-point value. The scale
> of the returned BigDecimal is the smallest value such that (10scale ×
> val) is an integer. Notes:
> 
>  - The results of this constructor can be somewhat unpredictable. One    might assume that writing new BigDecimal(0.1) in Java creates a   
> BigDecimal which is exactly equal to 0.1 (an unscaled value of 1,   
> with a scale of 1), but it is actually equal to
>    0.1000000000000000055511151231257827021181583404541015625. This is because 0.1 cannot be represented exactly as a double (or, for that   
> matter, as a binary fraction of any finite length). Thus, the value   
> that is being passed in to the constructor is not exactly equal to
>    0.1, appearances notwithstanding.
>  - The String constructor, on the other hand, is perfectly predictable:    writing new BigDecimal(""0.1"") creates a BigDecimal
> which is exactly    equal to 0.1, as one would expect. Therefore, it
> is generally    recommended that the String constructor be used in
> preference to this    one.
>  - When a double must be used as a source for a BigDecimal, note that    this constructor provides an exact conversion; it does not give the   
> same result as converting the double to a String using the   
> Double.toString(double) method and then using the BigDecimal(String)  
> constructor. To get that result, use the static valueOf(double)   
> method.

  [1]: http://ideone.com/sVHWjL
  [2]: http://docs.oracle.com/javase/7/docs/api/java/lang/Double.html#toString%28double%29
  [3]: http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html#valueOf%28double%29
  [4]: http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html#valueOf%28double%29";user3414693;added 1 character in body
147248795;22037280;-1;5;5adcf652-2c93-429e-8643-f01ca232b6b0;2017-05-23 12:16:59.0;"You may try to change your program like this:-

    static Double round(Double d, int precise) 
    {
    BigDecimal bigDecimal = BigDecimal.valueOf(d);
    bigDecimal = bigDecimal.setScale(precise, RoundingMode.HALF_UP);
    return bigDecimal.doubleValue();
    }

**[Sample Ideone][1]**

    Success	 time: 0.07 memory: 381184 signal:0
    Rounded: 2.66
    Rounded: 1.66
    
    Success	 time: 0.07 memory: 381248 signal:0
    Rounded: 2.66
    Rounded: 1.66

**Reason why you are getting the expected result with `BigDecimal.valueOf` and not with `new BigDecimal`**, in the words of [Joachim Sauer](https://stackoverflow.com/questions/7186204/bigdecimal-to-use-new-or-valueof/7186298#7186298):

> `BigDecimal.valueOf(double)` will use the [canonical String representation][2] of the double value passed in to instantiate the BigDecimal object. In other words: The value of the `BigDecimal` object will be what you see when you do `System.out.println(d)`.

> If you use `new BigDecimal(d)` however, then the BigDecimal will try to represent the double value as accurately as possible. This will usually result in a lot more digits being stored than you want.

Hence resulting in some **confusion** which you are watching in your program.

From the Java Doc:

> **[BigDecimal.valueOf(double val)][3]** - Translates a double into a BigDecimal, using the double's canonical string representation
> provided by the Double.toString(double) method.
> 
> **[new BigDecimal(double val)][4]** - 
> 
> Translates a double into a BigDecimal which is the exact decimal
> representation of the double's binary floating-point value. The scale
> of the returned BigDecimal is the smallest value such that (10scale ×
> val) is an integer. Notes:
> 
>  - The results of this constructor can be somewhat unpredictable. One    might assume that writing new BigDecimal(0.1) in Java creates a   
> BigDecimal which is exactly equal to 0.1 (an unscaled value of 1,   
> with a scale of 1), but it is actually equal to
>    0.1000000000000000055511151231257827021181583404541015625. This is because 0.1 cannot be represented exactly as a double (or, for that   
> matter, as a binary fraction of any finite length). Thus, the value   
> that is being passed in to the constructor is not exactly equal to
>    0.1, appearances notwithstanding.
>  - The String constructor, on the other hand, is perfectly predictable:    writing new BigDecimal(""0.1"") creates a BigDecimal
> which is exactly    equal to 0.1, as one would expect. Therefore, it
> is generally    recommended that the String constructor be used in
> preference to this    one.
>  - When a double must be used as a source for a BigDecimal, note that    this constructor provides an exact conversion; it does not give the   
> same result as converting the double to a String using the   
> Double.toString(double) method and then using the BigDecimal(String)  
> constructor. To get that result, use the static valueOf(double)   
> method.

  [1]: http://ideone.com/sVHWjL
  [2]: http://docs.oracle.com/javase/7/docs/api/java/lang/Double.html#toString%28double%29
  [3]: http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html#valueOf%28double%29
  [4]: http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html#valueOf%28double%29";;replaced http://stackoverflow.com/ with https://stackoverflow.com/
