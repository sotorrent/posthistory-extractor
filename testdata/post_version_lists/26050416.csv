Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
74301992;26050416;2541573;2;277188d6-eba6-4231-8ac0-2f94f4507354;2014-09-26 00:53:12.0;"Assume that you're in the following situation:&#xD;&#xA;&#xD;&#xA;![enter image description here][1]&#xD;&#xA;&#xD;&#xA;Now, if you run&#xD;&#xA;&#xD;&#xA;    git commit --amend&#xD;&#xA;&#xD;&#xA;write a commit message, save and quit your editor,&#xD;&#xA;&#xD;&#xA;- your staging area (which, if you haven't staged any new changes since the last commit, will be identical to the last commit) will be used to create a new commit (`31b8e`, here), whose has the same parent(s) as the commit you're amending;&#xD;&#xA;- the master reference will be moved to point to that new commit;&#xD;&#xA;- `HEAD`, which already points to `master` will move along with it.&#xD;&#xA;&#xD;&#xA;Note that the amend commit (`f42c5`) is now unreachable from any reference in your repo (hence its ""transparent"" representation on my graph); it still lives in your repository's object database, but will eventually be deleted for good, when Git runs its periodic housekeeping (garbage collection).&#xD;&#xA;&#xD;&#xA;![enter image description here][2]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/itPXs.png&#xD;&#xA;  [2]: http://i.stack.imgur.com/DR9cO.png";;
74302176;26050416;2541573;5;4ee0f9f3-1248-43b2-a6c4-3af4ad828ae7;2014-09-26 00:58:49.0;"Assume that you're in the following situation:&#xD;&#xA;&#xD;&#xA;![enter image description here][1]&#xD;&#xA;&#xD;&#xA;Now, if you run&#xD;&#xA;&#xD;&#xA;    git commit --amend&#xD;&#xA;&#xD;&#xA;write a commit message, save and quit your editor, the following will happen:&#xD;&#xA;&#xD;&#xA;1. your staging area---which, if you haven't staged any new changes since the last commit, will be identical to the last commit---will be used to create a new commit (`31b8e`, here); its parent(s) will be the same as those of the commit you're amending (`f42c5`);&#xD;&#xA;2. the master reference will be moved to point to that new commit;&#xD;&#xA;3. `HEAD`, which already points to `master` will move along with the `master` branch reference.&#xD;&#xA;&#xD;&#xA;Note that the amend commit (`f42c5`) is now unreachable from any reference in your repo (hence its ""transparent"" representation on my graph); it still lives in your repository's object database, but will eventually be deleted for good, when Git runs its periodic housekeeping (garbage collection).&#xD;&#xA;&#xD;&#xA;![enter image description here][2]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/itPXs.png&#xD;&#xA;  [2]: http://i.stack.imgur.com/DR9cO.png";;added 30 characters in body
74302339;26050416;2541573;5;2f43a376-71b2-4ccc-ab93-c181721cf357;2014-09-26 01:04:44.0;"Assume that you're in the following situation:&#xD;&#xA;&#xD;&#xA;![enter image description here][1]&#xD;&#xA;&#xD;&#xA;Now, if you run&#xD;&#xA;&#xD;&#xA;    git commit --amend&#xD;&#xA;&#xD;&#xA;write a commit message, save and quit your editor, the following will happen:&#xD;&#xA;&#xD;&#xA;1. Your staging area---which, if you haven't staged any new changes since the last commit, will be identical to the last commit---will be used to create a new commit (`31b8e`, here); its parent(s) will be the same as that(those) of the commit you're amending (`f42c5`, here).&#xD;&#xA;2. The master reference will be moved to point to that new commit.&#xD;&#xA;3. `HEAD`, which already points to `master` will move along with the `master` branch reference.&#xD;&#xA;&#xD;&#xA;![enter image description here][3]&#xD;&#xA;&#xD;&#xA;Note that the amend commit (`f42c5`) is now unreachable from any reference in your repo (hence its ""transparent"" representation on my graph); it still lives in your repository's object database, but will eventually be deleted for good, when Git runs its periodic housekeeping (garbage collection).&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;----------&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;**Addendum** (based on [Jason Baker's comment](http://stackoverflow.com/questions/26050327/how-does-git-commit-amend-work-exactly/26050416#comment40810131_26050416)): Note that, as long as the amended commit, `f42c5`, still exists in your repo and you have a way of finding out its commit ID (for example, by fishing it out of the `master` branch's reflog), you can still check it out. Running&#xD;&#xA;&#xD;&#xA;    git checkout f42c5&#xD;&#xA;&#xD;&#xA;or (assuming you haven't made any new commit on `master`, reset `master`, or otherwise moved the `master` branch reference)&#xD;&#xA;&#xD;&#xA;    git checkout master@{1}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;would put you in the following situation:&#xD;&#xA;&#xD;&#xA;![enter image description here][2]&#xD;&#xA;&#xD;&#xA;But now, commit `31b8e` would become unreachable.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;----------&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/itPXs.png&#xD;&#xA;  [2]: http://i.stack.imgur.com/MHeRH.png&#xD;&#xA;  [3]: http://i.stack.imgur.com/DR9cO.png";;added 30 characters in body
74302465;26050416;2541573;5;289af747-dcfa-4cd3-b3cd-02f4e39249e7;2014-09-26 01:09:45.0;"Assume that you're in the following situation:&#xD;&#xA;&#xD;&#xA;![enter image description here][1]&#xD;&#xA;&#xD;&#xA;Now, if you run&#xD;&#xA;&#xD;&#xA;    git commit --amend&#xD;&#xA;&#xD;&#xA;write a commit message, save and quit your editor, the following will happen:&#xD;&#xA;&#xD;&#xA;1. Your staging area---which, if you haven't staged any new changes since the last commit, will be identical to the last commit---will be used to create a new commit (`31b8e`, here); its parent(s) will be the same as that(those) of the commit you're amending (`f42c5`, here).&#xD;&#xA;2. The master reference will be moved to point to that new commit.&#xD;&#xA;3. `HEAD`, which already points to `master` will move along with the `master` branch reference.&#xD;&#xA;&#xD;&#xA;![enter image description here][3]&#xD;&#xA;&#xD;&#xA;Note that the amended commit (`f42c5`) is now unreachable from any reference in your repo (hence its ""transparent"" style on my graph). It still lives in your repository's object database, but will eventually be deleted for good, when Git runs its periodic housekeeping (garbage collection).&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;----------&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;**Addendum** (based on [Jason Baker's comment](http://stackoverflow.com/questions/26050327/how-does-git-commit-amend-work-exactly/26050416#comment40810131_26050416)): Note that, as long as the amended commit, `f42c5`, still exists in your repo and you have a way of finding out its commit ID (for example, by fishing it out of the `master` branch's reflog), you can still check it out. Running&#xD;&#xA;&#xD;&#xA;    git reset --hard master f42c5&#xD;&#xA;    git checkout master&#xD;&#xA;&#xD;&#xA;or (assuming you haven't made any new commit on `master`, reset `master`, or otherwise moved the `master` branch reference)&#xD;&#xA;&#xD;&#xA;    git reset --hard master master@{1}&#xD;&#xA;    git checkout master&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;would put you in the following situation:&#xD;&#xA;&#xD;&#xA;![enter image description here][2]&#xD;&#xA;&#xD;&#xA;But now, commit `31b8e` would become unreachable.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;----------&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/itPXs.png&#xD;&#xA;  [2]: http://i.stack.imgur.com/MHeRH.png&#xD;&#xA;  [3]: http://i.stack.imgur.com/DR9cO.png";;added 30 characters in body
74302683;26050416;2541573;5;5cfc1132-1830-4857-91fa-8ffdfa3ab0d0;2014-09-26 01:18:36.0;"Assume that you're in the following situation:&#xD;&#xA;&#xD;&#xA;![enter image description here][1]&#xD;&#xA;&#xD;&#xA;Now, if you run&#xD;&#xA;&#xD;&#xA;    git commit --amend&#xD;&#xA;&#xD;&#xA;write a commit message, save and quit your editor, the following happens:&#xD;&#xA;&#xD;&#xA;1. Your staging area---which, if you haven't staged any new changes since the last commit, will be identical to the last commit---is used to create a new commit (`31b8e`, here); its parent(s) will be the same as that(those) of the commit you're amending (`f42c5`, here).&#xD;&#xA;2. The `master` branch reference id moved to point to that new commit (`31b8e`).&#xD;&#xA;3. The `HEAD` reference, which already points to `master`, is moved along with it.&#xD;&#xA;&#xD;&#xA;![enter image description here][3]&#xD;&#xA;&#xD;&#xA;Note that the amended commit (`f42c5`) is now unreachable from any reference in your repo (hence its ""transparent"" style on my graph). It still lives in your repository's object database, but will eventually be deleted for good, when Git runs its periodic housekeeping, or if you trigger it explicitly by running `git gc` (garbage collection).&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;----------&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;**Addendum** (based on [Jason Baker's comment](http://stackoverflow.com/questions/26050327/how-does-git-commit-amend-work-exactly/26050416#comment40810131_26050416)): Note that, as long as the amended commit, `f42c5`, still exists in your repo and you have a way of finding out its commit ID (for example, by fishing it out of the `master` branch's reflog), you can still check it out. Running&#xD;&#xA;&#xD;&#xA;    git reset --hard master f42c5&#xD;&#xA;    git checkout master&#xD;&#xA;&#xD;&#xA;or (assuming you haven't, in the meantime, made any new commit on `master`, reset `master`, or otherwise moved the `master` branch reference)&#xD;&#xA;&#xD;&#xA;    git reset --hard master master@{1}&#xD;&#xA;    git checkout master&#xD;&#xA;&#xD;&#xA;would put you in the following situation:&#xD;&#xA;&#xD;&#xA;![enter image description here][2]&#xD;&#xA;&#xD;&#xA;But now, commit `31b8e` would become unreachable.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;----------&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/itPXs.png&#xD;&#xA;  [2]: http://i.stack.imgur.com/MHeRH.png&#xD;&#xA;  [3]: http://i.stack.imgur.com/DR9cO.png";;added 59 characters in body
74302853;26050416;2541573;5;0bb57958-604e-43cd-91b3-3c877560027f;2014-09-26 01:25:33.0;"Assume that you're in the following situation:&#xD;&#xA;&#xD;&#xA;![enter image description here][1]&#xD;&#xA;&#xD;&#xA;Now, if you run&#xD;&#xA;&#xD;&#xA;    git commit --amend&#xD;&#xA;&#xD;&#xA;write a commit message, save and quit your editor, the following happens:&#xD;&#xA;&#xD;&#xA;1. Your staging area---which, if you haven't staged any new changes since the last commit, will be identical to the last commit---is used to create a new commit (`31b8e`, here); its parent(s) will be the same as that(those) of the commit you're amending (`f42c5`, here).&#xD;&#xA;2. The `master` branch reference id moved to point to that new commit (`31b8e`).&#xD;&#xA;3. The `HEAD` reference, which already points to `master`, is moved along with it.&#xD;&#xA;&#xD;&#xA;![enter image description here][3]&#xD;&#xA;&#xD;&#xA;Note that the amended commit (`f42c5`) is now unreachable from any reference in your repo (hence its ""transparent"" style on my graph). It still lives in your repository's object database, but will eventually be deleted for good, when Git runs its periodic housekeeping, or if you trigger it explicitly by running `git gc` (garbage collection).&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;----------&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;**Addendum** (based on [Jason Baker's comment](http://stackoverflow.com/questions/26050327/how-does-git-commit-amend-work-exactly/26050416#comment40810131_26050416)): Note that, as long as the amended commit, `f42c5`, still exists in your repo and you have a way of finding out its commit ID (for example, by fishing it out of the `master` branch's reflog), you can still check it out. Running&#xD;&#xA;&#xD;&#xA;    git checkout master # just to make that your current branch is indeed master&#xD;&#xA;    git reset master f42c5&#xD;&#xA;&#xD;&#xA;or (assuming you haven't, in the meantime, made any new commit on `master`, reset `master`, or otherwise moved the `master` branch reference)&#xD;&#xA;&#xD;&#xA;    git checkout master # just to make that your current branch is indeed master&#xD;&#xA;    git reset master master@{1}&#xD;&#xA;&#xD;&#xA;would put you in the following situation:&#xD;&#xA;&#xD;&#xA;![enter image description here][2]&#xD;&#xA;&#xD;&#xA;But now, commit `31b8e` would become unreachable.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;----------&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/itPXs.png&#xD;&#xA;  [2]: http://i.stack.imgur.com/MHeRH.png&#xD;&#xA;  [3]: http://i.stack.imgur.com/DR9cO.png";;deleted 64 characters in body
74332617;26050416;2541573;5;19fa7ed0-469e-494a-bc61-be79c2c23f83;2014-09-26 11:23:54.0;"Assume that you're in the following situation:&#xD;&#xA;&#xD;&#xA;![enter image description here][1]&#xD;&#xA;&#xD;&#xA;Now, if you run&#xD;&#xA;&#xD;&#xA;    git commit --amend&#xD;&#xA;&#xD;&#xA;write a commit message, save and quit your editor, the following happens:&#xD;&#xA;&#xD;&#xA;1. Your staging area---which, if you haven't staged any new changes since the last commit, will be identical to the last commit---is used to create a new commit (`31b8e`, here); its parent(s) will be the same as that(those) of the commit you're amending (`f42c5`, here).&#xD;&#xA;2. The `master` branch reference id moved to point to that new commit (`31b8e`).&#xD;&#xA;3. The `HEAD` reference, which already points to `master`, is moved along with it.&#xD;&#xA;&#xD;&#xA;![enter image description here][3]&#xD;&#xA;&#xD;&#xA;Note that the amended commit (`f42c5`) is now unreachable from any reference in your repo (hence its ""transparent"" style on my graph). It still lives in your repository's object database, but will eventually be deleted for good, when Git runs its periodic housekeeping, or if you trigger it explicitly by running `git gc` (garbage collection).&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;----------&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;**Addendum** (based on [Jason Baker's comment](http://stackoverflow.com/questions/26050327/how-does-git-commit-amend-work-exactly/26050416#comment40810131_26050416)): Note that, as long as the amended commit, `f42c5`, still exists in your repo and you have a way of finding out its commit ID (for example, by fishing it out of the `master` branch's reflog), you can still check it out. Running&#xD;&#xA;&#xD;&#xA;    git checkout master # just to make that your current branch is indeed master&#xD;&#xA;    git reset --hard f42c5&#xD;&#xA;&#xD;&#xA;or (assuming you haven't, in the meantime, made any new commit on `master`, reset `master`, or otherwise moved the `master` branch reference)&#xD;&#xA;&#xD;&#xA;    git checkout master # just to make that your current branch is indeed master&#xD;&#xA;    git reset --hard master@{1}&#xD;&#xA;&#xD;&#xA;would put you in the following situation:&#xD;&#xA;&#xD;&#xA;![enter image description here][2]&#xD;&#xA;&#xD;&#xA;But now, commit `31b8e` would become unreachable.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;----------&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/itPXs.png&#xD;&#xA;  [2]: http://i.stack.imgur.com/MHeRH.png&#xD;&#xA;  [3]: http://i.stack.imgur.com/DR9cO.png";;correct commands (my brain cells work better after a good night's sleep)
74503474;26050416;2541573;5;9e923131-bea5-49d6-8dbe-a6a27412c3f2;2014-09-29 13:57:43.0;"Assume that you're in a clean working state and that your repo looks as follows:&#xD;&#xA;&#xD;&#xA;![enter image description here][1]&#xD;&#xA;&#xD;&#xA;If you then run&#xD;&#xA;&#xD;&#xA;    git commit --amend&#xD;&#xA;&#xD;&#xA;write a commit message, save and quit your editor, the following happens:&#xD;&#xA;&#xD;&#xA;1. Your staging area—which, if you haven't staged any new changes, will be identical commit `f42c5`—is used to create a new commit: `31b8e`. Its parent(s) will be the same as that(those) of the commit you're amending: `f42c5`.&#xD;&#xA;2. The `master` branch reference is moved to point to that new commit (`31b8e`).&#xD;&#xA;3. The `HEAD` reference, which already points to `master`, is moved along with it.&#xD;&#xA;&#xD;&#xA;![enter image description here][3]&#xD;&#xA;&#xD;&#xA;Note that the amended commit (`f42c5`) is now unreachable from any reference in your repo (hence its ""transparent"" style on my graph). It still lives in your repository's object database, but will eventually be deleted for good, when Git runs its periodic housekeeping, or if you trigger it explicitly by running `git gc` (garbage collection).&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;----------&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;**Addendum** (based on [Jason Baker's comment](http://stackoverflow.com/questions/26050327/how-does-git-commit-amend-work-exactly/26050416#comment40810131_26050416)): Note that, as long as the amended commit, `f42c5`, still exists in your repo and you have a way of finding out its commit ID (for example, by fishing it out of the `master` branch's reflog), you can still check it out. Running&#xD;&#xA;&#xD;&#xA;    git checkout master # just to make that your current branch is indeed master&#xD;&#xA;    git reset --hard f42c5&#xD;&#xA;&#xD;&#xA;or (assuming you haven't, in the meantime, made any new commit on `master`, reset `master`, or otherwise moved the `master` branch reference)&#xD;&#xA;&#xD;&#xA;    git checkout master # just to make that your current branch is indeed master&#xD;&#xA;    git reset --hard master@{1}&#xD;&#xA;&#xD;&#xA;would put you in the following situation:&#xD;&#xA;&#xD;&#xA;![enter image description here][2]&#xD;&#xA;&#xD;&#xA;But now, commit `31b8e` would become unreachable.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;----------&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/itPXs.png&#xD;&#xA;  [2]: http://i.stack.imgur.com/MHeRH.png&#xD;&#xA;  [3]: http://i.stack.imgur.com/DR9cO.png";;clarification
83988392;26050416;2541573;5;37e15086-8cc1-4daa-9f9b-f48298c81354;2015-02-17 19:08:23.0;"Assume that you're in a clean working state and that your repo looks as follows:&#xD;&#xA;&#xD;&#xA;![enter image description here][1]&#xD;&#xA;&#xD;&#xA;If you then run&#xD;&#xA;&#xD;&#xA;    git commit --amend&#xD;&#xA;&#xD;&#xA;write a commit message, save and quit your editor, the following happens:&#xD;&#xA;&#xD;&#xA;1. Your staging area—which, if you haven't staged any new changes, will be identical commit `f42c5`—is used to create a new commit: `31b8e`. Its parent(s) will be the same as that(those) of the commit you're amending: `f42c5`.&#xD;&#xA;2. The `master` branch reference is moved to point to that new commit (`31b8e`).&#xD;&#xA;3. The `HEAD` reference, which already points to `master`, is moved along with it.&#xD;&#xA;&#xD;&#xA;![enter image description here][3]&#xD;&#xA;&#xD;&#xA;Note that the amended commit (`f42c5`) is now unreachable from any reference in your repo (hence its ""transparent"" style on my graph). It still lives in your repository's object database, but will eventually be deleted for good, when Git runs its periodic housekeeping, or if you trigger it explicitly by running `git gc` (garbage collection).&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;----------&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;**Addendum** (based on [Jason Baker's comment](http://stackoverflow.com/questions/26050327/how-does-git-commit-amend-work-exactly/26050416#comment40810131_26050416)): Note that, as long as the amended commit, `f42c5`, still exists in your repo and you have a way of finding out its commit ID (for example, by fishing it out of the `master` branch's reflog), you can still check it out. Running&#xD;&#xA;&#xD;&#xA;    git checkout master # just to be sure that master is the current branch&#xD;&#xA;    git reset --hard f42c5&#xD;&#xA;&#xD;&#xA;or (assuming you haven't, in the meantime, made any new commit on `master`, reset `master`, or otherwise moved the `master` branch reference)&#xD;&#xA;&#xD;&#xA;    git checkout master # just to be sure that master is the current branch&#xD;&#xA;    git reset --hard master@{1}&#xD;&#xA;&#xD;&#xA;would put you in the following situation:&#xD;&#xA;&#xD;&#xA;![enter image description here][2]&#xD;&#xA;&#xD;&#xA;But now, commit `31b8e` would become unreachable.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;----------&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/itPXs.png&#xD;&#xA;  [2]: http://i.stack.imgur.com/MHeRH.png&#xD;&#xA;  [3]: http://i.stack.imgur.com/DR9cO.png";;grammar fix
147244310;26050416;-1;5;9b9dd660-b3b3-4114-bfbf-e6e32785d118;2017-05-23 12:16:50.0;"Assume that you're in a clean working state and that your repo looks as follows:&#xD;&#xA;&#xD;&#xA;![enter image description here][1]&#xD;&#xA;&#xD;&#xA;If you then run&#xD;&#xA;&#xD;&#xA;    git commit --amend&#xD;&#xA;&#xD;&#xA;write a commit message, save and quit your editor, the following happens:&#xD;&#xA;&#xD;&#xA;1. Your staging area—which, if you haven't staged any new changes, will be identical commit `f42c5`—is used to create a new commit: `31b8e`. Its parent(s) will be the same as that(those) of the commit you're amending: `f42c5`.&#xD;&#xA;2. The `master` branch reference is moved to point to that new commit (`31b8e`).&#xD;&#xA;3. The `HEAD` reference, which already points to `master`, is moved along with it.&#xD;&#xA;&#xD;&#xA;![enter image description here][3]&#xD;&#xA;&#xD;&#xA;Note that the amended commit (`f42c5`) is now unreachable from any reference in your repo (hence its ""transparent"" style on my graph). It still lives in your repository's object database, but will eventually be deleted for good, when Git runs its periodic housekeeping, or if you trigger it explicitly by running `git gc` (garbage collection).&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;----------&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;**Addendum** (based on [Jason Baker's comment](https://stackoverflow.com/questions/26050327/how-does-git-commit-amend-work-exactly/26050416#comment40810131_26050416)): Note that, as long as the amended commit, `f42c5`, still exists in your repo and you have a way of finding out its commit ID (for example, by fishing it out of the `master` branch's reflog), you can still check it out. Running&#xD;&#xA;&#xD;&#xA;    git checkout master # just to be sure that master is the current branch&#xD;&#xA;    git reset --hard f42c5&#xD;&#xA;&#xD;&#xA;or (assuming you haven't, in the meantime, made any new commit on `master`, reset `master`, or otherwise moved the `master` branch reference)&#xD;&#xA;&#xD;&#xA;    git checkout master # just to be sure that master is the current branch&#xD;&#xA;    git reset --hard master@{1}&#xD;&#xA;&#xD;&#xA;would put you in the following situation:&#xD;&#xA;&#xD;&#xA;![enter image description here][2]&#xD;&#xA;&#xD;&#xA;But now, commit `31b8e` would become unreachable.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;----------&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/itPXs.png&#xD;&#xA;  [2]: http://i.stack.imgur.com/MHeRH.png&#xD;&#xA;  [3]: http://i.stack.imgur.com/DR9cO.png";;replaced http://stackoverflow.com/ with https://stackoverflow.com/
