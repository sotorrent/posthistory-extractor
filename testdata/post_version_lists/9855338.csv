Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
22532718;9855338;1284661;2;e861bc56-f6a9-4b62-bc57-8a4df76470d3;2012-03-24 20:32:15;"From the discussion [here][1], and especially [this][2] answer, this is the function I currently use:&#xD;&#xA;&#xD;&#xA;    public static String bytesToHex(byte[] bytes) {&#xD;&#xA;        final char[] hexArray = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};&#xD;&#xA;        char[] hexChars = new char[bytes.length * 2];&#xD;&#xA;        int v;&#xD;&#xA;        for ( int j = 0; j < bytes.length; j++ ) {&#xD;&#xA;            v = bytes[j] & 0xFF;&#xD;&#xA;            hexChars[j * 2] = hexArray[v >>> 4];&#xD;&#xA;            hexChars[j * 2 + 1] = hexArray[v & 0x0F];&#xD;&#xA;        }&#xD;&#xA;        return new String(hexChars);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;My own tiny benchmarks (a million bytes a thousand times, 256 bytes 10 million times) showed it to be much faster than any other alternative, about half the time on long arrays.  Compared to the answer I took it from, switching to bitwise ops --- as suggested in the discussion --- cut about 20% off of the time for long arrays.&#xD;&#xA;&#xD;&#xA;  [1]: http://stackoverflow.com/q/332079/1284661&#xD;&#xA;  [2]: http://stackoverflow.com/a/2197650/1284661&#xD;&#xA;";;
41363900;9855338;1284661;5;9e1fd18c-681b-4c72-9018-a635bb765fe2;2013-05-29 15:04:46;"From the discussion [here][1], and especially [this][2] answer, this is the function I currently use:&#xD;&#xA;&#xD;&#xA;    public static String bytesToHex(byte[] bytes) {&#xD;&#xA;        final char[] hexArray = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};&#xD;&#xA;        char[] hexChars = new char[bytes.length * 2];&#xD;&#xA;        int v;&#xD;&#xA;        for ( int j = 0; j < bytes.length; j++ ) {&#xD;&#xA;            v = bytes[j] & 0xFF;&#xD;&#xA;            hexChars[j * 2] = hexArray[v >>> 4];&#xD;&#xA;            hexChars[j * 2 + 1] = hexArray[v & 0x0F];&#xD;&#xA;        }&#xD;&#xA;        return new String(hexChars);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;My own tiny benchmarks (a million bytes a thousand times, 256 bytes 10 million times) showed it to be much faster than any other alternative, about half the time on long arrays.  Compared to the answer I took it from, switching to bitwise ops --- as suggested in the discussion --- cut about 20% off of the time for long arrays. (Edit: When I say it's faster than the alternatives, I mean the alternative code offered in the discussions. Performance is equivalent to Commons Codec, which uses very similar code.)&#xD;&#xA;&#xD;&#xA;  [1]: http://stackoverflow.com/q/332079/1284661&#xD;&#xA;  [2]: http://stackoverflow.com/a/2197650/1284661&#xD;&#xA;";;added 144 characters in body
42180953;9855338;1284661;5;13ac1878-9994-469b-8827-92c3bf27f5fa;2013-06-14 15:58:46;"From the discussion [here][1], and especially [this][2] answer, this is the function I currently use:&#xD;&#xA;&#xD;&#xA;    final protected static char[] hexArray = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};&#xD;&#xA;    public static String bytesToHex(byte[] bytes) {&#xD;&#xA;        char[] hexChars = new char[bytes.length * 2];&#xD;&#xA;        int v;&#xD;&#xA;        for ( int j = 0; j < bytes.length; j++ ) {&#xD;&#xA;            v = bytes[j] & 0xFF;&#xD;&#xA;            hexChars[j * 2] = hexArray[v >>> 4];&#xD;&#xA;            hexChars[j * 2 + 1] = hexArray[v & 0x0F];&#xD;&#xA;        }&#xD;&#xA;        return new String(hexChars);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;My own tiny benchmarks (a million bytes a thousand times, 256 bytes 10 million times) showed it to be much faster than any other alternative, about half the time on long arrays.  Compared to the answer I took it from, switching to bitwise ops --- as suggested in the discussion --- cut about 20% off of the time for long arrays. (Edit: When I say it's faster than the alternatives, I mean the alternative code offered in the discussions. Performance is equivalent to Commons Codec, which uses very similar code.)&#xD;&#xA;&#xD;&#xA;  [1]: http://stackoverflow.com/q/332079/1284661&#xD;&#xA;  [2]: http://stackoverflow.com/a/2197650/1284661&#xD;&#xA;";;added 13 characters in body
43476476;9855338;257299;5;7b3a0dee-5578-4815-ac71-35407ac47540;2013-07-10 18:09:13;"From the discussion [here][1], and especially [this][2] answer, this is the function I currently use:&#xD;&#xA;&#xD;&#xA;    final protected static char[] hexArray = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};&#xD;&#xA;    public static String bytesToHex(byte[] bytes) {&#xD;&#xA;        char[] hexChars = new char[bytes.length * 2];&#xD;&#xA;        int v;&#xD;&#xA;        for ( int j = 0; j < bytes.length; j++ ) {&#xD;&#xA;            v = bytes[j] & 0xFF;  // (safely) convert byte to int&#xD;&#xA;            hexChars[j * 2] = hexArray[v >>> 4];&#xD;&#xA;            hexChars[j * 2 + 1] = hexArray[v & 0x0F];&#xD;&#xA;        }&#xD;&#xA;        return new String(hexChars);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;My own tiny benchmarks (a million bytes a thousand times, 256 bytes 10 million times) showed it to be much faster than any other alternative, about half the time on long arrays.  Compared to the answer I took it from, switching to bitwise ops --- as suggested in the discussion --- cut about 20% off of the time for long arrays. (Edit: When I say it's faster than the alternatives, I mean the alternative code offered in the discussions. Performance is equivalent to Commons Codec, which uses very similar code.)&#xD;&#xA;&#xD;&#xA;  [1]: http://stackoverflow.com/q/332079/1284661&#xD;&#xA;  [2]: http://stackoverflow.com/a/2197650/1284661&#xD;&#xA;";;add comment in code about byte -> int
43476477;9855338;0;24;7b3a0dee-5578-4815-ac71-35407ac47540;2013-07-10 18:09:13;;;Proposed by 257299 approved by 1592845, 805031, 306084 edit id of 797863
43642601;9855338;1284661;8;ca9e786d-6f70-4e5a-a7e2-08c57a124822;2013-07-13 06:26:58;"From the discussion [here][1], and especially [this][2] answer, this is the function I currently use:&#xD;&#xA;&#xD;&#xA;    final protected static char[] hexArray = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};&#xD;&#xA;    public static String bytesToHex(byte[] bytes) {&#xD;&#xA;        char[] hexChars = new char[bytes.length * 2];&#xD;&#xA;        int v;&#xD;&#xA;        for ( int j = 0; j < bytes.length; j++ ) {&#xD;&#xA;            v = bytes[j] & 0xFF;&#xD;&#xA;            hexChars[j * 2] = hexArray[v >>> 4];&#xD;&#xA;            hexChars[j * 2 + 1] = hexArray[v & 0x0F];&#xD;&#xA;        }&#xD;&#xA;        return new String(hexChars);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;My own tiny benchmarks (a million bytes a thousand times, 256 bytes 10 million times) showed it to be much faster than any other alternative, about half the time on long arrays.  Compared to the answer I took it from, switching to bitwise ops --- as suggested in the discussion --- cut about 20% off of the time for long arrays. (Edit: When I say it's faster than the alternatives, I mean the alternative code offered in the discussions. Performance is equivalent to Commons Codec, which uses very similar code.)&#xD;&#xA;&#xD;&#xA;  [1]: http://stackoverflow.com/q/332079/1284661&#xD;&#xA;  [2]: http://stackoverflow.com/a/2197650/1284661&#xD;&#xA;";;Rollback to [13ac1878-9994-469b-8827-92c3bf27f5fa]
47310840;9855338;1284661;5;41a78a7d-3f6d-4614-88e3-44bbba6a05fc;2013-09-15 10:09:30;"From the discussion [here][1], and especially [this][2] answer, this is the function I currently use:&#xD;&#xA;&#xD;&#xA;    final protected static char[] hexArray = ""0123456789ABCDEF"".toCharArray();&#xD;&#xA;    public static String bytesToHex(byte[] bytes) {&#xD;&#xA;        char[] hexChars = new char[bytes.length * 2];&#xD;&#xA;        int v;&#xD;&#xA;        for ( int j = 0; j < bytes.length; j++ ) {&#xD;&#xA;            v = bytes[j] & 0xFF;&#xD;&#xA;            hexChars[j * 2] = hexArray[v >>> 4];&#xD;&#xA;            hexChars[j * 2 + 1] = hexArray[v & 0x0F];&#xD;&#xA;        }&#xD;&#xA;        return new String(hexChars);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;My own tiny benchmarks (a million bytes a thousand times, 256 bytes 10 million times) showed it to be much faster than any other alternative, about half the time on long arrays.  Compared to the answer I took it from, switching to bitwise ops --- as suggested in the discussion --- cut about 20% off of the time for long arrays. (Edit: When I say it's faster than the alternatives, I mean the alternative code offered in the discussions. Performance is equivalent to Commons Codec, which uses very similar code.)&#xD;&#xA;&#xD;&#xA;  [1]: http://stackoverflow.com/q/332079/1284661&#xD;&#xA;  [2]: http://stackoverflow.com/a/2197650/1284661&#xD;&#xA;";;One time `.toCharArray() ` is justified by readability
54798193;9855338;1284661;5;7eddfae3-ca9d-41ad-bc8d-9454eeb2610b;2014-01-02 23:55:47;"From the discussion [here][1], and especially [this][2] answer, this is the function I currently use:&#xD;&#xA;&#xD;&#xA;    final protected static char[] hexArray = ""0123456789ABCDEF"".toCharArray();&#xD;&#xA;    public static String bytesToHex(byte[] bytes) {&#xD;&#xA;        char[] hexChars = new char[bytes.length * 2];&#xD;&#xA;        for ( int j = 0; j < bytes.length; j++ ) {&#xD;&#xA;            int v = bytes[j] & 0xFF;&#xD;&#xA;            hexChars[j * 2] = hexArray[v >>> 4];&#xD;&#xA;            hexChars[j * 2 + 1] = hexArray[v & 0x0F];&#xD;&#xA;        }&#xD;&#xA;        return new String(hexChars);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;My own tiny benchmarks (a million bytes a thousand times, 256 bytes 10 million times) showed it to be much faster than any other alternative, about half the time on long arrays.  Compared to the answer I took it from, switching to bitwise ops --- as suggested in the discussion --- cut about 20% off of the time for long arrays. (Edit: When I say it's faster than the alternatives, I mean the alternative code offered in the discussions. Performance is equivalent to Commons Codec, which uses very similar code.)&#xD;&#xA;&#xD;&#xA;  [1]: http://stackoverflow.com/q/332079/1284661&#xD;&#xA;  [2]: http://stackoverflow.com/a/2197650/1284661&#xD;&#xA;";;deleted 12 characters in body
70346654;9855338;194894;5;941d6145-d1ec-4ac4-943d-5b34ce2ba117;2014-07-29 11:51:03;"From the discussion [here][1], and especially [this][2] answer, this is the function I currently use:&#xD;&#xA;&#xD;&#xA;    private final static char[] hexArray = ""0123456789ABCDEF"".toCharArray();&#xD;&#xA;    public static String bytesToHex(byte[] bytes) {&#xD;&#xA;        char[] hexChars = new char[bytes.length * 2];&#xD;&#xA;        for ( int j = 0; j < bytes.length; j++ ) {&#xD;&#xA;            int v = bytes[j] & 0xFF;&#xD;&#xA;            hexChars[j * 2] = hexArray[v >>> 4];&#xD;&#xA;            hexChars[j * 2 + 1] = hexArray[v & 0x0F];&#xD;&#xA;        }&#xD;&#xA;        return new String(hexChars);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;My own tiny benchmarks (a million bytes a thousand times, 256 bytes 10 million times) showed it to be much faster than any other alternative, about half the time on long arrays.  Compared to the answer I took it from, switching to bitwise ops --- as suggested in the discussion --- cut about 20% off of the time for long arrays. (Edit: When I say it's faster than the alternatives, I mean the alternative code offered in the discussions. Performance is equivalent to Commons Codec, which uses very similar code.)&#xD;&#xA;&#xD;&#xA;  [1]: http://stackoverflow.com/q/332079/1284661&#xD;&#xA;  [2]: http://stackoverflow.com/a/2197650/1284661&#xD;&#xA;";;deleted 2 characters in body
70479744;9855338;1284661;8;6b46b44f-c8c1-4759-95e5-4b1bf56d70d9;2014-07-31 03:06:00;"From the discussion [here][1], and especially [this][2] answer, this is the function I currently use:&#xD;&#xA;&#xD;&#xA;    final protected static char[] hexArray = ""0123456789ABCDEF"".toCharArray();&#xD;&#xA;    public static String bytesToHex(byte[] bytes) {&#xD;&#xA;        char[] hexChars = new char[bytes.length * 2];&#xD;&#xA;        for ( int j = 0; j < bytes.length; j++ ) {&#xD;&#xA;            int v = bytes[j] & 0xFF;&#xD;&#xA;            hexChars[j * 2] = hexArray[v >>> 4];&#xD;&#xA;            hexChars[j * 2 + 1] = hexArray[v & 0x0F];&#xD;&#xA;        }&#xD;&#xA;        return new String(hexChars);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;My own tiny benchmarks (a million bytes a thousand times, 256 bytes 10 million times) showed it to be much faster than any other alternative, about half the time on long arrays.  Compared to the answer I took it from, switching to bitwise ops --- as suggested in the discussion --- cut about 20% off of the time for long arrays. (Edit: When I say it's faster than the alternatives, I mean the alternative code offered in the discussions. Performance is equivalent to Commons Codec, which uses very similar code.)&#xD;&#xA;&#xD;&#xA;  [1]: http://stackoverflow.com/q/332079/1284661&#xD;&#xA;  [2]: http://stackoverflow.com/a/2197650/1284661&#xD;&#xA;";;Rollback to [7eddfae3-ca9d-41ad-bc8d-9454eeb2610b]
73787870;9855338;480894;5;b56d4bb8-4c97-4945-ad51-87323b0664a5;2014-09-18 15:02:29;"From the discussion [here][1], and especially [this][2] answer, this is the function I currently use:&#xD;&#xA;&#xD;&#xA;    final protected static char[] hexArray = ""0123456789ABCDEF"".toCharArray();&#xD;&#xA;    public static String bytesToHex(byte[] bytes) {&#xD;&#xA;        char[] hexChars = new char[bytes.length * 2];&#xD;&#xA;        for ( int j = 0; j < bytes.length; j++ ) {&#xD;&#xA;            int v = bytes[j] & 0xFF;&#xD;&#xA;            hexChars[j * 2] = hexArray[v >>> 4];&#xD;&#xA;            hexChars[j * 2 + 1] = hexArray[v & 0x0F];&#xD;&#xA;        }&#xD;&#xA;        return new String(hexChars);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;My own tiny benchmarks (a million bytes a thousand times, 256 bytes 10 million times) showed it to be much faster than any other alternative, about half the time on long arrays.  Compared to the answer I took it from, switching to bitwise ops --- as suggested in the discussion --- cut about 20% off of the time for long arrays. (Edit: When I say it's faster than the alternatives, I mean the alternative code offered in the discussions. Performance is equivalent to Commons Codec, which uses very similar code.)&#xD;&#xA;&#xD;&#xA;See also [javax.xml.bind.DatatypeConverter](http://docs.oracle.com/javase/6/docs/api/javax/xml/bind/DatatypeConverter.html) which offers this functionality(Cf. first comment below).&#xD;&#xA;  [1]: http://stackoverflow.com/q/332079/1284661&#xD;&#xA;  [2]: http://stackoverflow.com/a/2197650/1284661&#xD;&#xA;";;Added important link.
73787871;9855338;0;24;b56d4bb8-4c97-4945-ad51-87323b0664a5;2014-09-18 15:02:29;;;Proposed by 480894 approved by 379855, 2125973, 26496 edit id of 1528181
73826976;9855338;1284661;8;aca456e3-7798-41d8-a7e7-e2b4c9823269;2014-09-19 04:43:04;"From the discussion [here][1], and especially [this][2] answer, this is the function I currently use:&#xD;&#xA;&#xD;&#xA;    final protected static char[] hexArray = ""0123456789ABCDEF"".toCharArray();&#xD;&#xA;    public static String bytesToHex(byte[] bytes) {&#xD;&#xA;        char[] hexChars = new char[bytes.length * 2];&#xD;&#xA;        for ( int j = 0; j < bytes.length; j++ ) {&#xD;&#xA;            int v = bytes[j] & 0xFF;&#xD;&#xA;            hexChars[j * 2] = hexArray[v >>> 4];&#xD;&#xA;            hexChars[j * 2 + 1] = hexArray[v & 0x0F];&#xD;&#xA;        }&#xD;&#xA;        return new String(hexChars);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;My own tiny benchmarks (a million bytes a thousand times, 256 bytes 10 million times) showed it to be much faster than any other alternative, about half the time on long arrays.  Compared to the answer I took it from, switching to bitwise ops --- as suggested in the discussion --- cut about 20% off of the time for long arrays. (Edit: When I say it's faster than the alternatives, I mean the alternative code offered in the discussions. Performance is equivalent to Commons Codec, which uses very similar code.)&#xD;&#xA;&#xD;&#xA;  [1]: http://stackoverflow.com/q/332079/1284661&#xD;&#xA;  [2]: http://stackoverflow.com/a/2197650/1284661&#xD;&#xA;";;Rollback to [6b46b44f-c8c1-4759-95e5-4b1bf56d70d9]
