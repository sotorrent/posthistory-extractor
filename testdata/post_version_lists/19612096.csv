Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
50166130;19612096;2923817;2;202b5dfa-1ff2-4a20-a7a1-28cc5e44977e;2013-10-26 21:30:09.0;"So the business model, which I didn't create, have an optional relationship (as in ER model). It's been a while since I've worked DB so I might be forgetting something. Currently the FK (Foreign Key) of the 1st table point to the PK (Primary Key) of the 2nd table, which is an ID ; I don't recall the term but it's the ""fake"" one, not the ""real"" one used by the RDBMS (Relational Database Management System). For simplicity, let's imagine there's only 2 tables.

Currently I'm having nulls in that column/attribute when there's no need for the optional relation. When there is an item in that column, I want the full advantages, checking if there's a matching item, in the 2nd table, triggers (although there are currently none), etc. I was satisfied up to not long ago when I realized I didn't want a duplicate on the important parts of the 1st table, so I wanted to create an unique key but it seems a key cannot be created which include a column that might contain null. So far there's 2 solutions proposed to me although I understand neither.

The 1st was that I'd put defaults, 0 for digit-based types and an empty string ('') for character-based types. What I don't get for that is that the 2nd table already has a row/tuple with a corresponding value (0). If I was to shift the current rows to not have a row with the default, I assume I then would put in the corresponding content a default too, in my case it's a character-based type. So the ""cost"" of enabling an index would be to make a multitude of useless joins then a multitude of useless merges by the software, in my case the database section of an office suite, Apache OpenOffice Base. This seem like a lot of added processing and it seem to me some kind of trigger, along with my current design, would be better.

The 2nd was to make a ""linked"" table (his/her term), a many-to-many relationship but I thought those were only for entries that had more than 1 possible relationship ; that having 0-1 relationship would not use it. And anyway, I'd still be confronted with the same problem, where there would not need to have an entry in that ""linked"" table. IIRC, the 2 ""sides"" of such table must contain valid candidate keys.

So the 1-1 relationship is already implemented for the cases where the business model do have the need for that option, with the current non-null entries in the FK. Now I just have to implement a method for when the business model do not need that option, to allow for a 0-1 relationship, for the current null entries in the FK.

Thank you kindly for your help
";;
50166664;19612096;2923817;5;5154275d-4eed-41e1-906b-98fb6bcd303a;2013-10-26 21:42:50.0;"So the business model, which I didn't create, have an optional relationship (as in ER model). It's been a while since I've worked DB so I might be forgetting something. Currently the FK (Foreign Key) of the 1st table point to the PK (Primary Key) of the 2nd table, which is an ID ; I don't recall the term but it's the ""fake"" one, not the ""real"" one used by the RDBMS (Relational Database Management System). For simplicity, let's imagine there's only 2 tables.

Currently I'm having nulls in that column/attribute when there's no need for the optional relation. When there is an item in that column, I want the full advantages, checking if there's a matching item at the other side of the relationship, where the FK point to (2nd table), also triggers (although there are currently none) and other validations. I was satisfied up to not long ago when I realized I didn't want a duplicate on the important parts of the 1st table, so I wanted to create an unique key but it seems a key cannot be created which include a column that might contain null. So far there's 2 solutions proposed to me although I understand neither.

The 1st was that I'd put defaults, 0 for digit-based types and an empty string ('') for character-based types. What I don't get for that is that the 2nd table already has a row/tuple with a corresponding value (0). If I was to shift the current rows to not have a row with the default, I assume I then would put in the corresponding content a default too, in my case it's a character-based type. So the ""cost"" of enabling an index would be to make a multitude of useless joins then a multitude of useless merges by the software, in my case the database section of an office suite, Apache OpenOffice Base. This seem like a lot of added processing and it seem to me some kind of trigger, along with my current design, would be better.

The 2nd was to make a ""linked"" table (his/her term), a many-to-many relationship but I thought those were only for entries that had more than 1 possible relationship ; that having 0-1 relationship would not use it. And anyway, I'd still be confronted with the same problem, where there would not need to have an entry in that ""linked"" table. IIRC, the 2 ""sides"" of such table must contain valid candidate keys.

So the 1-1 relationship is already implemented for the cases where the business model do have the need for that option, with the current non-null entries in the FK. Now I just have to implement a method for when the business model do not need that option, to allow for a 0-1 relationship, for the current null entries in the FK.

Thank you kindly for your help
";;general relationship instead of specific
50274472;19612096;2923817;5;ff63ca09-9be7-4216-a63b-47025ac5701d;2013-10-28 18:01:48.0;"So the business model, which I didn't create, have an optional relationship (as in ER model). It's been a while since I've worked DB so I might be forgetting something. Currently the FK (Foreign Key) of the 1st table point to the PK (Primary Key) of the 2nd table, which is an ID ; I don't recall the term but it's the ""fake"" one, not the ""real"" one used by the RDBMS (Relational Database Management System). For simplicity, let's imagine there's only 2 tables.

Currently I'm having nulls in that column/attribute when there's no need for the optional relation. When there is an item in that column, I want the full advantages, checking if there's a matching item at the other side of the relationship, where the FK point to (2nd table), also triggers (although there are currently none) and other validations. I was satisfied up to not long ago when I realized I didn't want a duplicate on the important parts of the 1st table, so I wanted to create an unique key but it seems a key cannot be created which include a column that might contain null. So far there's 2 solutions proposed to me although I understand neither.

The 1st was that I'd put defaults, 0 for digit-based types and an empty string ('') for character-based types. What I don't get for that is that the 2nd table already has a row/tuple with a corresponding value (0). If I was to shift the current rows to not have a row with the default, I assume I then would put in the corresponding content a default too, in my case it's a character-based type. So the ""cost"" of enabling an index would be to make a multitude of useless joins then a multitude of useless merges by the software, in my case the database section of an office suite, Apache OpenOffice Base. This seem like a lot of added processing and it seem to me some kind of trigger, along with my current design, would be better.

The 2nd was to make a ""linked"" table (his/her term), a many-to-many relationship but I thought those were only for entries that had more than 1 possible relationship ; that having 0-1 relationship would not use it. And anyway, I'd still be confronted with the same problem, where there would not need to have an entry in that ""linked"" table. IIRC, the 2 ""sides"" of such table must contain valid candidate keys.

So the 1-1 relationship is already implemented for the cases where the business model do have the need for that option, with the current non-null entries in the FK. Now I just have to implement a method for when the business model do not need that option, to allow for a 0-1 relationship, for the current null entries in the FK.

Thank you kindly for your help

----------

[fredt][1] request:

Below is a semi-SQL export from Apache OpenOffice Base using the command `SCRIPT 'PATH\\TO\\NAME.sql'`. The original file, along with its export, are on [How to make an index with an optional FK? example 1][1]. **Table 3 is *not* to be considered** ; it's only there to show Table1 proper schema.

    SET DATABASE COLLATION ""Latin1_General""
    CREATE SCHEMA PUBLIC AUTHORIZATION DBA
    CREATE CACHED TABLE ""Table1""(""ID"" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,""ID_to_part1"" INTEGER NOT NULL,""model_number"" VARCHAR_IGNORECASE(3) NOT NULL,""ID_to_part2"" INTEGER)
    CREATE CACHED TABLE ""Table2""(""ID"" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,""content"" VARCHAR_IGNORECASE(1) NOT NULL)
    CREATE CACHED TABLE ""Table3""(""ID"" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,""content"" VARCHAR_IGNORECASE(1) NOT NULL)
    ALTER TABLE ""Table1"" ADD CONSTRAINT SYS_FK_87 FOREIGN KEY(""ID_to_part1"") REFERENCES ""Table3""(""ID"") ON DELETE CASCADE ON UPDATE CASCADE
    ALTER TABLE ""Table1"" ADD CONSTRAINT SYS_FK_90 FOREIGN KEY(""ID_to_part2"") REFERENCES ""Table2""(""ID"") ON DELETE SET NULL ON UPDATE CASCADE
    ALTER TABLE ""Table1"" ALTER COLUMN ""ID"" RESTART WITH 8
    ALTER TABLE ""Table2"" ALTER COLUMN ""ID"" RESTART WITH 2
    ALTER TABLE ""Table3"" ALTER COLUMN ""ID"" RESTART WITH 4
    CREATE USER SA PASSWORD """"
    GRANT DBA TO SA
    SET WRITE_DELAY 60
    SET SCHEMA PUBLIC
    INSERT INTO ""Table1"" VALUES(0,0,'123',0)
    INSERT INTO ""Table1"" VALUES(1,1,'456',NULL)
    INSERT INTO ""Table1"" VALUES(2,2,'789',0)
    INSERT INTO ""Table1"" VALUES(3,0,'012',1)
    INSERT INTO ""Table1"" VALUES(6,3,'345',NULL)
    INSERT INTO ""Table1"" VALUES(7,1,'678',1)
    INSERT INTO ""Table2"" VALUES(0,'B')
    INSERT INTO ""Table2"" VALUES(1,'E')
    INSERT INTO ""Table3"" VALUES(0,'A')
    INSERT INTO ""Table3"" VALUES(1,'C')
    INSERT INTO ""Table3"" VALUES(2,'D')
    INSERT INTO ""Table3"" VALUES(3,'F')


  [1]: http://dynv.qc.to/content/how-make-index-optional-fk-example-1


  [1]: http://stackoverflow.com/users/471070/";;example 1
50275160;19612096;2923817;5;9d969c09-3737-4448-8696-934a4d9553d4;2013-10-28 18:12:00.0;"So the business model, which I didn't create, have an optional relationship (as in ER model). It's been a while since I've worked DB so I might be forgetting something. Currently the FK (Foreign Key) of the 1st table point to the PK (Primary Key) of the 2nd table, which is an ID ; I don't recall the term but it's the ""fake"" one, not the ""real"" one used by the RDBMS (Relational Database Management System). For simplicity, let's imagine there's only 2 tables.

Currently I'm having nulls in that column/attribute when there's no need for the optional relation. When there is an item in that column, I want the full advantages, checking if there's a matching item at the other side of the relationship, where the FK point to (2nd table), also triggers (although there are currently none) and other validations. I was satisfied up to not long ago when I realized I didn't want a duplicate on the important parts of the 1st table, so I wanted to create an unique key but it seems a key cannot be created which include a column that might contain null. So far there's 2 solutions proposed to me although I understand neither.

The 1st was that I'd put defaults, 0 for digit-based types and an empty string ('') for character-based types. What I don't get for that is that the 2nd table already has a row/tuple with a corresponding value (0). If I was to shift the current rows to not have a row with the default, I assume I then would put in the corresponding content a default too, in my case it's a character-based type. So the ""cost"" of enabling an index would be to make a multitude of useless joins then a multitude of useless merges by the software, in my case the database section of an office suite, Apache OpenOffice Base. This seem like a lot of added processing and it seem to me some kind of trigger, along with my current design, would be better.

The 2nd was to make a ""linked"" table (his/her term), a many-to-many relationship but I thought those were only for entries that had more than 1 possible relationship ; that having 0-1 relationship would not use it. And anyway, I'd still be confronted with the same problem, where there would not need to have an entry in that ""linked"" table. IIRC, the 2 ""sides"" of such table must contain valid candidate keys.

So the 1-1 relationship is already implemented for the cases where the business model do have the need for that option, with the current non-null entries in the FK. Now I just have to implement a method for when the business model do not need that option, to allow for a 0-1 relationship, for the current null entries in the FK.

Thank you kindly for your help

----------

[fredt][1] request:

Just below this paragraph is a semi-SQL export from Apache OpenOffice Base using the command `SCRIPT 'PATH\\TO\\NAME.sql'`. The original file, along with its export, are on [How to make an index with an optional FK? example 1][1]. **Table 3 is *not* to be considered** ; it's only there to show Table1 proper schema. This is an example for my original question (before horizontal rule), specifically the 1st solution proposal (paragraph 3).

    SET DATABASE COLLATION ""Latin1_General""
    CREATE SCHEMA PUBLIC AUTHORIZATION DBA
    CREATE CACHED TABLE ""Table1""(""ID"" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,""ID_to_part1"" INTEGER NOT NULL,""model_number"" VARCHAR_IGNORECASE(3) NOT NULL,""ID_to_part2"" INTEGER)
    CREATE CACHED TABLE ""Table2""(""ID"" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,""content"" VARCHAR_IGNORECASE(1) NOT NULL)
    CREATE CACHED TABLE ""Table3""(""ID"" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,""content"" VARCHAR_IGNORECASE(1) NOT NULL)
    ALTER TABLE ""Table1"" ADD CONSTRAINT SYS_FK_87 FOREIGN KEY(""ID_to_part1"") REFERENCES ""Table3""(""ID"") ON DELETE CASCADE ON UPDATE CASCADE
    ALTER TABLE ""Table1"" ADD CONSTRAINT SYS_FK_90 FOREIGN KEY(""ID_to_part2"") REFERENCES ""Table2""(""ID"") ON DELETE SET NULL ON UPDATE CASCADE
    ALTER TABLE ""Table1"" ALTER COLUMN ""ID"" RESTART WITH 8
    ALTER TABLE ""Table2"" ALTER COLUMN ""ID"" RESTART WITH 2
    ALTER TABLE ""Table3"" ALTER COLUMN ""ID"" RESTART WITH 4
    CREATE USER SA PASSWORD """"
    GRANT DBA TO SA
    SET WRITE_DELAY 60
    SET SCHEMA PUBLIC
    INSERT INTO ""Table1"" VALUES(0,0,'123',0)
    INSERT INTO ""Table1"" VALUES(1,1,'456',NULL)
    INSERT INTO ""Table1"" VALUES(2,2,'789',0)
    INSERT INTO ""Table1"" VALUES(3,0,'012',1)
    INSERT INTO ""Table1"" VALUES(6,3,'345',NULL)
    INSERT INTO ""Table1"" VALUES(7,1,'678',1)
    INSERT INTO ""Table2"" VALUES(0,'B')
    INSERT INTO ""Table2"" VALUES(1,'E')
    INSERT INTO ""Table3"" VALUES(0,'A')
    INSERT INTO ""Table3"" VALUES(1,'C')
    INSERT INTO ""Table3"" VALUES(2,'D')
    INSERT INTO ""Table3"" VALUES(3,'F')


  [1]: http://dynv.qc.to/content/how-make-index-optional-fk-example-1


  [1]: http://stackoverflow.com/users/471070/";;request explanation,  example 1
50296070;19612096;2923817;5;9d6576e7-94f2-445b-931a-3ab164b3bfd2;2013-10-29 01:19:13.0;"So the business model, which I didn't create, have an optional relationship (as in ER model). It's been a while since I've worked DB so I might be forgetting something. Currently the FK (Foreign Key) of the 1st table point to the PK (Primary Key) of the 2nd table, which is an ID ; I don't recall the term but it's the ""fake"" one, not the ""real"" one used by the RDBMS (Relational Database Management System). For simplicity, let's imagine there's only 2 tables.

Currently I'm having nulls in that column/attribute when there's no need for the optional relation. When there is an item in that column, I want the full advantages, checking if there's a matching item at the other side of the relationship, where the FK point to (2nd table), also triggers (although there are currently none) and other validations. I was satisfied up to not long ago when I realized I didn't want a duplicate on the important parts of the 1st table, so I wanted to create an unique key but it seems a key cannot be created which include a column that might contain null. So far there's 2 solutions proposed to me although I understand neither.

The 1st was that I'd put defaults, 0 for digit-based types and an empty string ('') for character-based types. What I don't get for that is that the 2nd table already has a row/tuple with a corresponding value (0). If I was to shift the current rows to not have a row with the default, I assume I then would put in the corresponding content a default too, in my case it's a character-based type. So the ""cost"" of enabling an index would be to make a multitude of useless joins then a multitude of useless merges by the software, in my case the database section of an office suite, Apache OpenOffice Base. This seem like a lot of added processing and it seem to me some kind of trigger, along with my current design, would be better.

The 2nd was to make a ""linked"" table (his/her term), a many-to-many relationship but I thought those were only for entries that had more than 1 possible relationship ; that having 0-1 relationship would not use it. And anyway, I'd still be confronted with the same problem, where there would not need to have an entry in that ""linked"" table. IIRC, the 2 ""sides"" of such table must contain valid candidate keys.

So the 1-1 relationship is already implemented for the cases where the business model do have the need for that option, with the current non-null entries in the FK. Now I just have to implement a method for when the business model do not need that option, to allow for a 0-1 relationship, for the current null entries in the FK.

Thank you kindly for your help

----------

[fredt][1] request:

Just below this paragraph is a semi-SQL export from Apache OpenOffice Base using the command `SCRIPT 'PATH\\TO\\NAME.sql'`. The original file, along with its export, are on [How to make an index with an optional FK? example 1][2]. **Table 3 is *not* to be considered** ; it's only there to show Table1 proper schema.

    SET DATABASE COLLATION ""Latin1_General""
    CREATE SCHEMA PUBLIC AUTHORIZATION DBA
    CREATE CACHED TABLE ""Table1""(""ID"" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,""ID_to_part1"" INTEGER NOT NULL,""model_number"" VARCHAR_IGNORECASE(3) NOT NULL,""ID_to_part2"" INTEGER)
    CREATE CACHED TABLE ""Table2""(""ID"" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,""content"" VARCHAR_IGNORECASE(1) NOT NULL)
    CREATE CACHED TABLE ""Table3""(""ID"" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,""content"" VARCHAR_IGNORECASE(1) NOT NULL)
    ALTER TABLE ""Table1"" ADD CONSTRAINT SYS_FK_87 FOREIGN KEY(""ID_to_part1"") REFERENCES ""Table3""(""ID"") ON DELETE CASCADE ON UPDATE CASCADE
    ALTER TABLE ""Table1"" ADD CONSTRAINT SYS_FK_90 FOREIGN KEY(""ID_to_part2"") REFERENCES ""Table2""(""ID"") ON DELETE SET NULL ON UPDATE CASCADE
    ALTER TABLE ""Table1"" ALTER COLUMN ""ID"" RESTART WITH 8
    ALTER TABLE ""Table2"" ALTER COLUMN ""ID"" RESTART WITH 2
    ALTER TABLE ""Table3"" ALTER COLUMN ""ID"" RESTART WITH 4
    CREATE USER SA PASSWORD """"
    GRANT DBA TO SA
    SET WRITE_DELAY 60
    SET SCHEMA PUBLIC
    INSERT INTO ""Table1"" VALUES(0,0,'123',0)
    INSERT INTO ""Table1"" VALUES(1,1,'456',NULL)
    INSERT INTO ""Table1"" VALUES(2,2,'789',0)
    INSERT INTO ""Table1"" VALUES(3,0,'012',1)
    INSERT INTO ""Table1"" VALUES(6,3,'345',NULL)
    INSERT INTO ""Table1"" VALUES(7,1,'678',1)
    INSERT INTO ""Table2"" VALUES(0,'B')
    INSERT INTO ""Table2"" VALUES(1,'E')
    INSERT INTO ""Table3"" VALUES(0,'A')
    INSERT INTO ""Table3"" VALUES(1,'C')
    INSERT INTO ""Table3"" VALUES(2,'D')
    INSERT INTO ""Table3"" VALUES(3,'F')

It seem queries aren't exported, here it is

    SELECT ""Table1"".""ID"", ""Table3"".""content"" AS ""Table3_content"", ""Table1"".""model_number"", ""Table2"".""content"" AS ""Table2_content""
    	FROM {
    		OJ ""Table1""
    		LEFT OUTER JOIN ""Table2"" ON ""Table1"".""ID_to_part2"" = ""Table2"".""ID""
    		LEFT OUTER JOIN ""Table3"" ON ""Table1"".""ID_to_part1"" = ""Table3"".""ID""
    	}

followed by its result

    ID    Table3_content    model_number    Table2_content
    0     A                 123             B
    1     C                 456            
    2     D                 789             B
    3     A                 012             E
    6     F                 345            
    7     C                 678             E

  [1]: http://stackoverflow.com/users/471070/
  [2]: http://dynv.qc.to/content/how-make-index-optional-fk-example-1
";;added 606 characters in body
50296241;19612096;2923817;5;e25ea6dc-4b6c-48ea-a950-6f8e3da46413;2013-10-29 01:25:36.0;"So the business model, which I didn't create, have an optional relationship (as in ER model). It's been a while since I've worked DB so I might be forgetting something. Currently the FK (Foreign Key) of the 1st table point to the PK (Primary Key) of the 2nd table, which is an ID ; I don't recall the term but it's the ""fake"" one, not the ""real"" one used by the RDBMS (Relational Database Management System). For simplicity, let's imagine there's only 2 tables.

Currently I'm having nulls in that column/attribute when there's no need for the optional relation. When there is an item in that column, I want the full advantages, checking if there's a matching item at the other side of the relationship, where the FK point to (2nd table), also triggers (although there are currently none) and other validations. I was satisfied up to not long ago when I realized I didn't want a duplicate on the important parts of the 1st table, so I wanted to create an unique key but it seems a key cannot be created which include a column that might contain null. So far there's 2 solutions proposed to me although I understand neither.

The 1st was that I'd put defaults, 0 for digit-based types and an empty string ('') for character-based types. What I don't get for that is that the 2nd table already has a row/tuple with a corresponding value (0). If I was to shift the current rows to not have a row with the default, I assume I then would put in the corresponding content a default too, in my case it's a character-based type. So the ""cost"" of enabling an index would be to make a multitude of useless joins then a multitude of useless merges by the software, in my case the database section of an office suite, Apache OpenOffice Base. This seem like a lot of added processing and it seem to me some kind of trigger, along with my current design, would be better.

The 2nd was to make a ""linked"" table (his/her term), a many-to-many relationship but I thought those were only for entries that had more than 1 possible relationship ; that having 0-1 relationship would not use it. And anyway, I'd still be confronted with the same problem, where there would not need to have an entry in that ""linked"" table. IIRC, the 2 ""sides"" of such table must contain valid candidate keys.

So the 1-1 relationship is already implemented for the cases where the business model do have the need for that option, with the current non-null entries in the FK. Now I just have to implement a method for when the business model do not need that option, to allow for a 0-1 relationship, for the current null entries in the FK.

Thank you kindly for your help

----------

[fredt][1] request:

Just below this paragraph is a semi-SQL export from Apache OpenOffice Base using the command `SCRIPT 'PATH\\TO\\NAME.sql'`. The original file, along with its export, are on [How to make an index with an optional FK? example 1][2]. **Table 3 is *not* to be considered** ; it's only there to show Table1 proper schema.

    SET DATABASE COLLATION ""Latin1_General""
    CREATE SCHEMA PUBLIC AUTHORIZATION DBA
    CREATE CACHED TABLE ""Table1""(""ID"" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,""ID_to_part1"" INTEGER NOT NULL,""model_number"" VARCHAR_IGNORECASE(3) NOT NULL,""ID_to_part2"" INTEGER)
    CREATE CACHED TABLE ""Table2""(""ID"" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,""content"" VARCHAR_IGNORECASE(1) NOT NULL)
    CREATE CACHED TABLE ""Table3""(""ID"" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,""content"" VARCHAR_IGNORECASE(1) NOT NULL)
    ALTER TABLE ""Table1"" ADD CONSTRAINT SYS_FK_87 FOREIGN KEY(""ID_to_part1"") REFERENCES ""Table3""(""ID"") ON DELETE CASCADE ON UPDATE CASCADE
    ALTER TABLE ""Table1"" ADD CONSTRAINT SYS_FK_90 FOREIGN KEY(""ID_to_part2"") REFERENCES ""Table2""(""ID"") ON DELETE SET NULL ON UPDATE CASCADE
    ALTER TABLE ""Table1"" ALTER COLUMN ""ID"" RESTART WITH 8
    ALTER TABLE ""Table2"" ALTER COLUMN ""ID"" RESTART WITH 2
    ALTER TABLE ""Table3"" ALTER COLUMN ""ID"" RESTART WITH 4
    CREATE USER SA PASSWORD """"
    GRANT DBA TO SA
    SET WRITE_DELAY 60
    SET SCHEMA PUBLIC
    INSERT INTO ""Table1"" VALUES(0,0,'123',0)
    INSERT INTO ""Table1"" VALUES(1,1,'456',NULL)
    INSERT INTO ""Table1"" VALUES(2,2,'789',0)
    INSERT INTO ""Table1"" VALUES(3,0,'012',1)
    INSERT INTO ""Table1"" VALUES(6,3,'345',NULL)
    INSERT INTO ""Table1"" VALUES(7,1,'678',1)
    INSERT INTO ""Table2"" VALUES(0,'B')
    INSERT INTO ""Table2"" VALUES(1,'E')
    INSERT INTO ""Table3"" VALUES(0,'A')
    INSERT INTO ""Table3"" VALUES(1,'C')
    INSERT INTO ""Table3"" VALUES(2,'D')
    INSERT INTO ""Table3"" VALUES(3,'F')

It seem queries aren't exported, here it is

    SELECT ""Table1"".""ID"", ""Table3"".""content"" AS ""Table3_content"", ""Table1"".""model_number"", ""Table2"".""content"" AS ""Table2_content""
    	FROM {
    		OJ ""Table1""
    		LEFT OUTER JOIN ""Table2"" ON ""Table1"".""ID_to_part2"" = ""Table2"".""ID""
    		LEFT OUTER JOIN ""Table3"" ON ""Table1"".""ID_to_part1"" = ""Table3"".""ID""
    	}

which I only added spacing, followed by its result

    ID    Table3_content    model_number    Table2_content
    0     A                 123             B
    1     C                 456            
    2     D                 789             B
    3     A                 012             E
    6     F                 345            
    7     C                 678             E

While beautification is done, here are the important tables schema (came code) :

    CREATE CACHED TABLE ""Table1""(
    	""ID"" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,
    	""ID_to_part1"" INTEGER NOT NULL,
    	""model_number"" VARCHAR_IGNORECASE(3) NOT NULL,
    	""ID_to_part2"" INTEGER
    )
    CREATE CACHED TABLE ""Table2""(
    	""ID"" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,
    	""content"" VARCHAR_IGNORECASE(1) NOT NULL
    )

  [1]: http://stackoverflow.com/users/471070/
  [2]: http://dynv.qc.to/content/how-make-index-optional-fk-example-1
";;query, result & beautified tables scema
50457617;19612096;2923817;5;2ee8607e-0db4-4d25-b3d7-e7dcc0cec60a;2013-10-30 22:01:00.0;"##Original question##

So the business model, which I didn't create, have an optional relationship (as in ER model). It's been a while since I've worked DB so I might be forgetting something. Currently the FK (Foreign Key) of the 1st table point to the PK (Primary Key) of the 2nd table, which is an ID ; I don't recall the term but it's the ""fake"" one, not the ""real"" one used by the RDBMS (Relational Database Management System). For simplicity, let's imagine there's only 2 tables.

Currently I'm having nulls in that column/attribute when there's no need for the optional relation. When there is an item in that column, I want the full advantages, checking if there's a matching item at the other side of the relationship, where the FK point to (2nd table), also triggers (although there are currently none) and other validations. I was satisfied up to not long ago when I realized I didn't want a duplicate on the important parts of the 1st table, so I wanted to create an unique key but it seems a key cannot be created which include a column that might contain null. So far there's 2 solutions proposed to me although I understand neither.

The 1st was that I'd put defaults, 0 for digit-based types and an empty string ('') for character-based types. What I don't get for that is that the 2nd table already has a row/tuple with a corresponding value (0). If I was to shift the current rows to not have a row with the default, I assume I then would put in the corresponding content a default too, in my case it's a character-based type. So the ""cost"" of enabling an index would be to make a multitude of useless joins then a multitude of useless merges by the software, in my case the database section of an office suite, Apache OpenOffice Base. This seem like a lot of added processing and it seem to me some kind of trigger, along with my current design, would be better.

The 2nd was to make a ""linked"" table (his/her term), a many-to-many relationship but I thought those were only for entries that had more than 1 possible relationship ; that having 0-1 relationship would not use it. And anyway, I'd still be confronted with the same problem, where there would not need to have an entry in that ""linked"" table. IIRC, the 2 ""sides"" of such table must contain valid candidate keys.

So the 1-1 relationship is already implemented for the cases where the business model do have the need for that option, with the current non-null entries in the FK. Now I just have to implement a method for when the business model do not need that option, to allow for a 0-1 relationship, for the current null entries in the FK.

Thank you kindly for your help

##[fredt][1] request##

Just below this paragraph is a semi-SQL export from Apache OpenOffice Base using the command `SCRIPT 'PATH\\TO\\NAME.sql'`. The original file, along with its export, and the non-exported queries, are on [How to make an index with an optional FK? example 1][2]. **Table 3 is *not* to be considered** ; it's only there to show Table1 proper schema.

This 2nd example is lacking although explains more than the 1st.

###HSQLDB export###
Producing some kind of SQL ; including non-standard statements.

    SET DATABASE COLLATION ""Latin1_General""
    CREATE SCHEMA PUBLIC AUTHORIZATION DBA
    CREATE CACHED TABLE ""Table1""(""ID"" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,""ID_to_part1"" INTEGER NOT NULL,""model_number"" VARCHAR_IGNORECASE(3) NOT NULL,""ID_to_part2"" INTEGER)
    CREATE CACHED TABLE ""Table2""(""ID"" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,""content"" VARCHAR_IGNORECASE(1) NOT NULL)
    CREATE CACHED TABLE ""Table3""(""ID"" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,""content"" VARCHAR_IGNORECASE(1) NOT NULL)
    ALTER TABLE ""Table1"" ADD CONSTRAINT SYS_FK_87 FOREIGN KEY(""ID_to_part1"") REFERENCES ""Table3""(""ID"") ON DELETE CASCADE ON UPDATE CASCADE
    ALTER TABLE ""Table1"" ADD CONSTRAINT SYS_FK_90 FOREIGN KEY(""ID_to_part2"") REFERENCES ""Table2""(""ID"") ON DELETE SET NULL ON UPDATE CASCADE
    ALTER TABLE ""Table1"" ALTER COLUMN ""ID"" RESTART WITH 13
    ALTER TABLE ""Table2"" ALTER COLUMN ""ID"" RESTART WITH 2
    ALTER TABLE ""Table3"" ALTER COLUMN ""ID"" RESTART WITH 4
    CREATE USER SA PASSWORD """"
    GRANT DBA TO SA
    SET WRITE_DELAY 60
    SET SCHEMA PUBLIC
    INSERT INTO ""Table1"" VALUES(0,0,'123',0)
    INSERT INTO ""Table1"" VALUES(1,1,'456',NULL)
    INSERT INTO ""Table1"" VALUES(2,2,'789',0)
    INSERT INTO ""Table1"" VALUES(3,0,'012',1)
    INSERT INTO ""Table1"" VALUES(6,3,'345',NULL)
    INSERT INTO ""Table1"" VALUES(7,1,'678',1)
    INSERT INTO ""Table1"" VALUES(8,0,'123',NULL)
    INSERT INTO ""Table1"" VALUES(9,0,'123',1)
    INSERT INTO ""Table1"" VALUES(10,1,'456',0)
    INSERT INTO ""Table1"" VALUES(11,1,'456',1)
    INSERT INTO ""Table1"" VALUES(12,1,'456',0)
    INSERT INTO ""Table2"" VALUES(0,'B')
    INSERT INTO ""Table2"" VALUES(1,'E')
    INSERT INTO ""Table3"" VALUES(0,'A')
    INSERT INTO ""Table3"" VALUES(1,'C')
    INSERT INTO ""Table3"" VALUES(2,'D')
    INSERT INTO ""Table3"" VALUES(3,'F')

It seem queries weren't exported, here they are followed by their results

###Query1###
Joined main table.

    SELECT ""Table1"".""ID"", ""Table3"".""content"" AS ""Table3_content"", ""Table1"".""model_number"", ""Table2"".""content"" AS ""Table2_content""
    	FROM {
    		OJ ""Table1""
    		LEFT OUTER JOIN ""Table2"" ON ""Table1"".""ID_to_part2"" = ""Table2"".""ID""
    		LEFT OUTER JOIN ""Table3"" ON ""Table1"".""ID_to_part1"" = ""Table3"".""ID""
    	}

which I only beautified (spacing & line breaks). Result in:

    ID    Table3_content    model_number    Table2_content
    0     A                 123             B
    1     C                 456            
    2     D                 789             B
    3     A                 012             E
    6     F                 345            
    7     C                 678             E

###Query2###


    SELECT *
    	FROM ""Table1""
    	WHERE ""model_number"" IN (
    		SELECT ""model_number""
    			FROM ""Table1""
    			GROUP BY ""model_number""
    			HAVING COUNT(""model_number"") > 1
    		)
    	ORDER BY ""model_number"" ASC

Result in:

    ID    ID_to_part1    model_number    ID_to_part2
    0     0              123             0
    1     1              456            
    8     0              123            
    9     0              123             1
    10    1              456             0
    11    1              456             1
    12    1              456             0

###Query3###
    SELECT ""Table1"".*
    	FROM ""Table1""
    		JOIN (
    			SELECT ""ID_to_part1"", ""model_number"", ""ID_to_part2""
    				FROM ""Table1""
    				WHERE ""model_number"" IN (
    					SELECT ""model_number""
    						FROM ""Table1""
    						GROUP BY ""model_number""
    						HAVING COUNT(""model_number"") > 1
    					)
    				GROUP BY ""ID_to_part1"", ""model_number"", ""ID_to_part2""
    				HAVING COUNT(*) > 1
    		) AS ""non_unique_model""
    			ON ""Table1"".""ID_to_part1""=""non_unique_model"".""ID_to_part1""
    				AND ""Table1"".""model_number""=""non_unique_model"".""model_number""
    				AND ""Table1"".""ID_to_part2""=""non_unique_model"".""ID_to_part2""

Result in:

    ID    ID_to_part1    model_number    ID_to_part2
    10    1              456             0
    12    1              456             0

###Beautified important tables schema###

    CREATE CACHED TABLE ""Table1""(
    	""ID"" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,
    	""ID_to_part1"" INTEGER NOT NULL,
    	""model_number"" VARCHAR_IGNORECASE(3) NOT NULL,
    	""ID_to_part2"" INTEGER
    )
    CREATE CACHED TABLE ""Table2""(
    	""ID"" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,
    	""content"" VARCHAR_IGNORECASE(1) NOT NULL
    )

  [1]: http://stackoverflow.com/users/471070/
  [2]: http://dynv.qc.to/content/how-make-index-optional-fk-example-2
";;example 2
50460625;19612096;2923817;5;c4bdd190-bdab-4374-931c-4a1b817d2286;2013-10-30 23:07:41.0;"##Original question##

So the business model, which I didn't create, have an optional relationship (as in ER model). It's been a while since I've worked DB so I might be forgetting something. Currently the FK (Foreign Key) of the 1st table point to the PK (Primary Key) of the 2nd table, which is an ID ; I don't recall the term but it's the ""fake"" one, not the ""real"" one used by the RDBMS (Relational Database Management System). For simplicity, let's imagine there's only 2 tables.

Currently I'm having nulls in that column/attribute when there's no need for the optional relation. When there is an item in that column, I want the full advantages, checking if there's a matching item at the other side of the relationship, where the FK point to (2nd table), also triggers (although there are currently none) and other validations. I was satisfied up to not long ago when I realized I didn't want a duplicate on the important parts of the 1st table, so I wanted to create an unique key but it seems a key cannot be created which include a column that might contain null. So far there's 2 solutions proposed to me although I understand neither.

The 1st was that I'd put defaults, 0 for digit-based types and an empty string ('') for character-based types. What I don't get for that is that the 2nd table already has a row/tuple with a corresponding value (0). If I was to shift the current rows to not have a row with the default, I assume I then would put in the corresponding content a default too, in my case it's a character-based type. So the ""cost"" of enabling an index would be to make a multitude of useless joins then a multitude of useless merges by the software, in my case the database section of an office suite, Apache OpenOffice Base. This seem like a lot of added processing and it seem to me some kind of trigger, along with my current design, would be better.

The 2nd was to make a ""linked"" table (his/her term), a many-to-many relationship but I thought those were only for entries that had more than 1 possible relationship ; that having 0-1 relationship would not use it. And anyway, I'd still be confronted with the same problem, where there would not need to have an entry in that ""linked"" table. IIRC, the 2 ""sides"" of such table must contain valid candidate keys.

So the 1-1 relationship is already implemented for the cases where the business model do have the need for that option, with the current non-null entries in the FK. Now I just have to implement a method for when the business model do not need that option, to allow for a 0-1 relationship, for the current null entries in the FK.

Thank you kindly for your help

##[fredt][1] request##

Just below this paragraph is a semi-SQL export from Apache OpenOffice Base using the command `SCRIPT 'PATH\\TO\\NAME.sql'`. The original file, along with its export, and the non-exported queries, are on [How to make an index with an optional FK? example 1][2]. **Table 3 is *not* to be considered** ; it's only there to show Table1 proper schema.

This 2nd example is lacking although explains more than the 1st.

###HSQLDB export###
Producing some kind of SQL ; including non-standard statements.

    SET DATABASE COLLATION ""Latin1_General""
    CREATE SCHEMA PUBLIC AUTHORIZATION DBA
    CREATE CACHED TABLE ""Table1""(""ID"" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,""ID_to_part1"" INTEGER NOT NULL,""model_number"" VARCHAR_IGNORECASE(3) NOT NULL,""ID_to_part2"" INTEGER)
    CREATE CACHED TABLE ""Table2""(""ID"" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,""content"" VARCHAR_IGNORECASE(1) NOT NULL)
    CREATE CACHED TABLE ""Table3""(""ID"" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,""content"" VARCHAR_IGNORECASE(1) NOT NULL)
    ALTER TABLE ""Table1"" ADD CONSTRAINT SYS_FK_87 FOREIGN KEY(""ID_to_part1"") REFERENCES ""Table3""(""ID"") ON DELETE CASCADE ON UPDATE CASCADE
    ALTER TABLE ""Table1"" ADD CONSTRAINT SYS_FK_90 FOREIGN KEY(""ID_to_part2"") REFERENCES ""Table2""(""ID"") ON DELETE SET NULL ON UPDATE CASCADE
    ALTER TABLE ""Table1"" ALTER COLUMN ""ID"" RESTART WITH 13
    ALTER TABLE ""Table2"" ALTER COLUMN ""ID"" RESTART WITH 2
    ALTER TABLE ""Table3"" ALTER COLUMN ""ID"" RESTART WITH 4
    CREATE USER SA PASSWORD """"
    GRANT DBA TO SA
    SET WRITE_DELAY 60
    SET SCHEMA PUBLIC
    INSERT INTO ""Table1"" VALUES(0,0,'123',0)
    INSERT INTO ""Table1"" VALUES(1,1,'456',NULL)
    INSERT INTO ""Table1"" VALUES(2,2,'789',0)
    INSERT INTO ""Table1"" VALUES(3,0,'012',1)
    INSERT INTO ""Table1"" VALUES(6,3,'345',NULL)
    INSERT INTO ""Table1"" VALUES(7,1,'678',1)
    INSERT INTO ""Table1"" VALUES(8,0,'123',NULL)
    INSERT INTO ""Table1"" VALUES(9,0,'123',1)
    INSERT INTO ""Table1"" VALUES(10,1,'456',0)
    INSERT INTO ""Table1"" VALUES(11,1,'456',1)
    INSERT INTO ""Table1"" VALUES(12,1,'456',0)
    INSERT INTO ""Table2"" VALUES(0,'B')
    INSERT INTO ""Table2"" VALUES(1,'E')
    INSERT INTO ""Table3"" VALUES(0,'A')
    INSERT INTO ""Table3"" VALUES(1,'C')
    INSERT INTO ""Table3"" VALUES(2,'D')
    INSERT INTO ""Table3"" VALUES(3,'F')

It seem queries weren't exported, here they are followed by their results

###Query1###
Joined main table.

    SELECT ""Table1"".""ID"", ""Table3"".""content"" AS ""Table3_content"", ""Table1"".""model_number"", ""Table2"".""content"" AS ""Table2_content""
    	FROM {
    		OJ ""Table1""
    		LEFT OUTER JOIN ""Table2"" ON ""Table1"".""ID_to_part2"" = ""Table2"".""ID""
    		LEFT OUTER JOIN ""Table3"" ON ""Table1"".""ID_to_part1"" = ""Table3"".""ID""
    	}

which I only beautified (spacing & line breaks). Result in:

    ID    Table3_content    model_number    Table2_content
    0     A                 123             B
    1     C                 456             
    2     D                 789             B
    3     A                 012             E
    6     F                 345             
    7     C                 678             E
    8     A                 123             
    9     A                 123             E
    10    C                 456             B
    11    C                 456             E
    12    C                 456             B

###Query2###


    SELECT *
    	FROM ""Table1""
    	WHERE ""model_number"" IN (
    		SELECT ""model_number""
    			FROM ""Table1""
    			GROUP BY ""model_number""
    			HAVING COUNT(""model_number"") > 1
    		)
    	ORDER BY ""model_number"" ASC

Result in:

    ID    ID_to_part1    model_number    ID_to_part2
    0     0              123             0
    1     1              456            
    8     0              123            
    9     0              123             1
    10    1              456             0
    11    1              456             1
    12    1              456             0

###Query3###
    SELECT ""Table1"".*
    	FROM ""Table1""
    		JOIN (
    			SELECT ""ID_to_part1"", ""model_number"", ""ID_to_part2""
    				FROM ""Table1""
    				WHERE ""model_number"" IN (
    					SELECT ""model_number""
    						FROM ""Table1""
    						GROUP BY ""model_number""
    						HAVING COUNT(""model_number"") > 1
    					)
    				GROUP BY ""ID_to_part1"", ""model_number"", ""ID_to_part2""
    				HAVING COUNT(*) > 1
    		) AS ""non_unique_model""
    			ON ""Table1"".""ID_to_part1""=""non_unique_model"".""ID_to_part1""
    				AND ""Table1"".""model_number""=""non_unique_model"".""model_number""
    				AND ""Table1"".""ID_to_part2""=""non_unique_model"".""ID_to_part2""

Result in:

    ID    ID_to_part1    model_number    ID_to_part2
    10    1              456             0
    12    1              456             0

###Beautified important tables schema###

    CREATE CACHED TABLE ""Table1""(
    	""ID"" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,
    	""ID_to_part1"" INTEGER NOT NULL,
    	""model_number"" VARCHAR_IGNORECASE(3) NOT NULL,
    	""ID_to_part2"" INTEGER
    )
    CREATE CACHED TABLE ""Table2""(
    	""ID"" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,
    	""content"" VARCHAR_IGNORECASE(1) NOT NULL
    )

  [1]: http://stackoverflow.com/users/471070/
  [2]: http://dynv.qc.to/content/how-make-index-optional-fk-example-2
";;example 2, wrong Query1 result
50460932;19612096;2923817;5;2ef90dd5-691d-4452-82aa-f1118c9974f9;2013-10-30 23:15:46.0;"##Original question##

So the business model, which I didn't create, have an optional relationship (as in ER model). It's been a while since I've worked DB so I might be forgetting something. Currently the FK (Foreign Key) of the 1st table point to the PK (Primary Key) of the 2nd table, which is an ID ; I don't recall the term but it's the ""fake"" one, not the ""real"" one used by the RDBMS (Relational Database Management System). For simplicity, let's imagine there's only 2 tables.

Currently I'm having nulls in that column/attribute when there's no need for the optional relation. When there is an item in that column, I want the full advantages, checking if there's a matching item at the other side of the relationship, where the FK point to (2nd table), also triggers (although there are currently none) and other validations. I was satisfied up to not long ago when I realized I didn't want a duplicate on the important parts of the 1st table, so I wanted to create an unique key but it seems a key cannot be created which include a column that might contain null. So far there's 2 solutions proposed to me although I understand neither.

The 1st was that I'd put defaults, 0 for digit-based types and an empty string ('') for character-based types. What I don't get for that is that the 2nd table already has a row/tuple with a corresponding value (0). If I was to shift the current rows to not have a row with the default, I assume I then would put in the corresponding content a default too, in my case it's a character-based type. So the ""cost"" of enabling an index would be to make a multitude of useless joins then a multitude of useless merges by the software, in my case the database section of an office suite, Apache OpenOffice Base. This seem like a lot of added processing and it seem to me some kind of trigger, along with my current design, would be better.

The 2nd was to make a ""linked"" table (his/her term), a many-to-many relationship but I thought those were only for entries that had more than 1 possible relationship ; that having 0-1 relationship would not use it. And anyway, I'd still be confronted with the same problem, where there would not need to have an entry in that ""linked"" table. IIRC, the 2 ""sides"" of such table must contain valid candidate keys.

So the 1-1 relationship is already implemented for the cases where the business model do have the need for that option, with the current non-null entries in the FK. Now I just have to implement a method for when the business model do not need that option, to allow for a 0-1 relationship, for the current null entries in the FK.

Thank you kindly for your help

##[fredt][1] request##

Just below this paragraph is a semi-SQL export from Apache OpenOffice Base using the command `SCRIPT 'PATH\\TO\\NAME.sql'`. The original file, along with its export, and the non-exported queries, are on [How to make an index with an optional FK? example 1][2]. **Table 3** is ***NOT*** to be considered ; it's only there to show Table1 proper schema.

This **2<sup>nd</sup> example** is lacking although show more than the 1st.

###HSQLDB export###
Producing some kind of SQL ; including non-standard statements.

    SET DATABASE COLLATION ""Latin1_General""
    CREATE SCHEMA PUBLIC AUTHORIZATION DBA
    CREATE CACHED TABLE ""Table1""(""ID"" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,""ID_to_part1"" INTEGER NOT NULL,""model_number"" VARCHAR_IGNORECASE(3) NOT NULL,""ID_to_part2"" INTEGER)
    CREATE CACHED TABLE ""Table2""(""ID"" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,""content"" VARCHAR_IGNORECASE(1) NOT NULL)
    CREATE CACHED TABLE ""Table3""(""ID"" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,""content"" VARCHAR_IGNORECASE(1) NOT NULL)
    ALTER TABLE ""Table1"" ADD CONSTRAINT SYS_FK_87 FOREIGN KEY(""ID_to_part1"") REFERENCES ""Table3""(""ID"") ON DELETE CASCADE ON UPDATE CASCADE
    ALTER TABLE ""Table1"" ADD CONSTRAINT SYS_FK_90 FOREIGN KEY(""ID_to_part2"") REFERENCES ""Table2""(""ID"") ON DELETE SET NULL ON UPDATE CASCADE
    ALTER TABLE ""Table1"" ALTER COLUMN ""ID"" RESTART WITH 13
    ALTER TABLE ""Table2"" ALTER COLUMN ""ID"" RESTART WITH 2
    ALTER TABLE ""Table3"" ALTER COLUMN ""ID"" RESTART WITH 4
    CREATE USER SA PASSWORD """"
    GRANT DBA TO SA
    SET WRITE_DELAY 60
    SET SCHEMA PUBLIC
    INSERT INTO ""Table1"" VALUES(0,0,'123',0)
    INSERT INTO ""Table1"" VALUES(1,1,'456',NULL)
    INSERT INTO ""Table1"" VALUES(2,2,'789',0)
    INSERT INTO ""Table1"" VALUES(3,0,'012',1)
    INSERT INTO ""Table1"" VALUES(6,3,'345',NULL)
    INSERT INTO ""Table1"" VALUES(7,1,'678',1)
    INSERT INTO ""Table1"" VALUES(8,0,'123',NULL)
    INSERT INTO ""Table1"" VALUES(9,0,'123',1)
    INSERT INTO ""Table1"" VALUES(10,1,'456',0)
    INSERT INTO ""Table1"" VALUES(11,1,'456',1)
    INSERT INTO ""Table1"" VALUES(12,1,'456',0)
    INSERT INTO ""Table2"" VALUES(0,'B')
    INSERT INTO ""Table2"" VALUES(1,'E')
    INSERT INTO ""Table3"" VALUES(0,'A')
    INSERT INTO ""Table3"" VALUES(1,'C')
    INSERT INTO ""Table3"" VALUES(2,'D')
    INSERT INTO ""Table3"" VALUES(3,'F')

It seem queries weren't exported, here they are followed by their results

###Query1###
Joined main table.

    SELECT ""Table1"".""ID"", ""Table3"".""content"" AS ""Table3_content"", ""Table1"".""model_number"", ""Table2"".""content"" AS ""Table2_content""
    	FROM {
    		OJ ""Table1""
    		LEFT OUTER JOIN ""Table2"" ON ""Table1"".""ID_to_part2"" = ""Table2"".""ID""
    		LEFT OUTER JOIN ""Table3"" ON ""Table1"".""ID_to_part1"" = ""Table3"".""ID""
    	}

which I only beautified (spacing & line breaks). Result in:

    ID    Table3_content    model_number    Table2_content
    0     A                 123             B
    1     C                 456             
    2     D                 789             B
    3     A                 012             E
    6     F                 345             
    7     C                 678             E
    8     A                 123             
    9     A                 123             E
    10    C                 456             B
    11    C                 456             E
    12    C                 456             B

###Query2###


    SELECT *
    	FROM ""Table1""
    	WHERE ""model_number"" IN (
    		SELECT ""model_number""
    			FROM ""Table1""
    			GROUP BY ""model_number""
    			HAVING COUNT(""model_number"") > 1
    		)
    	ORDER BY ""model_number"" ASC

Result in:

    ID    ID_to_part1    model_number    ID_to_part2
    0     0              123             0
    1     1              456            
    8     0              123            
    9     0              123             1
    10    1              456             0
    11    1              456             1
    12    1              456             0

###Query3###
    SELECT ""Table1"".*
    	FROM ""Table1""
    		JOIN (
    			SELECT ""ID_to_part1"", ""model_number"", ""ID_to_part2""
    				FROM ""Table1""
    				WHERE ""model_number"" IN (
    					SELECT ""model_number""
    						FROM ""Table1""
    						GROUP BY ""model_number""
    						HAVING COUNT(""model_number"") > 1
    					)
    				GROUP BY ""ID_to_part1"", ""model_number"", ""ID_to_part2""
    				HAVING COUNT(*) > 1
    		) AS ""non_unique_model""
    			ON ""Table1"".""ID_to_part1""=""non_unique_model"".""ID_to_part1""
    				AND ""Table1"".""model_number""=""non_unique_model"".""model_number""
    				AND ""Table1"".""ID_to_part2""=""non_unique_model"".""ID_to_part2""

Result in:

    ID    ID_to_part1    model_number    ID_to_part2
    10    1              456             0
    12    1              456             0

###Beautified important tables schema###

    CREATE CACHED TABLE ""Table1""(
    	""ID"" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,
    	""ID_to_part1"" INTEGER NOT NULL,
    	""model_number"" VARCHAR_IGNORECASE(3) NOT NULL,
    	""ID_to_part2"" INTEGER
    )
    CREATE CACHED TABLE ""Table2""(
    	""ID"" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,
    	""content"" VARCHAR_IGNORECASE(1) NOT NULL
    )

  [1]: http://stackoverflow.com/users/471070/
  [2]: http://dynv.qc.to/content/how-make-index-optional-fk-example-2
";;example 2, wrong Query1 result
50536699;19612096;2923817;5;9fa2bfba-d5bb-4292-9d64-65bc706339bf;2013-10-31 21:37:16.0;"##Original question##

So the business model, which I didn't create, have an optional relationship (as in ER model). It's been a while since I've worked DB so I might be forgetting something. Currently the FK (Foreign Key) of the 1st table point to the PK (Primary Key) of the 2nd table, which is an ID ; I don't recall the term but it's the ""fake"" one, not the ""real"" one used by the RDBMS (Relational Database Management System). For simplicity, let's imagine there's only 2 tables.

Currently I'm having *nulls in the FK column/attribute* when there's no need for the optional relation. When there is an item in that column, I want the full advantages, checking if there's a matching item at the other side of the relationship, where the FK point to (2nd table), also triggers (although there are currently none) and other validations. I was satisfied up to not long ago when I realized I *didn't want a duplicate* on the important parts of the 1st table, so I wanted to create an unique key but it seems **a key cannot be created which include a column/attribute that might contain null**. So far there's 2 solutions proposed to me although I understand neither.

The 1st was that I'd put defaults, 0 for digit-based types and an empty string ('') for character-based types. What I don't get for that is that the 2nd table already has a row/tuple with a corresponding value (0). If I was to shift the current rows to not have a row with the default, I assume I then would put in the corresponding content a default too, in my case it's a character-based type. So the ""cost"" of enabling an index would be to make a multitude of *useless joins* then a multitude of useless merges by the software, in my case the database section of an office suite, **Apache OpenOffice Base**. This seem like a lot of added processing and it seem to me some kind of trigger, along with my current design, would be better.

The 2nd was to make a ""linked"" table (his/her term), a many-to-many relationship but I thought those were only for entries that had more than 1 possible relationship ; that having 0-1 relationship would not use it. And anyway, *I'd still be confronted with the same problem*, where there would not need to have an entry in that ""linked"" table. IIRC, the 2 ""sides"" of such table must contain valid candidate keys.

So the 1-1 relationship is already implemented for the cases where the business model do have the need for that option, with the current non-null entries in the FK. Now I just have to implement a method for the cases when the business model do not need the optional part, to allow for a 0-1 relationship, for the *current null entries in the FK while not allowing duplicates*.

Thank you kindly for your help

##[fredt][1] request##
This now contain the **3<sup>rd</sup> example**.

The followind sub-section contain a semi-SQL export from Apache OpenOffice Base using the command `SCRIPT 'PATH\\TO\\NAME.sql'`. The original file, along with its export, and its non-exported queries, are on [How to make an index with an optional FK? example 3][2].

I'd like a *unique key* on the 3 columns/attributes ID_to_part1, model_number & ID_to_part2 ; however the original question, in the previous section, show HSQLDB version 1.8.0.10 won't allow a null to be contained in a column which is part of a unique key.

###HSQLDB export###
Producing some kind of SQL ; including non-standard statements.

    SET DATABASE COLLATION ""Latin1_General""
    CREATE SCHEMA PUBLIC AUTHORIZATION DBA
    CREATE CACHED TABLE ""Table1""(""ID"" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,""ID_to_part1"" INTEGER NOT NULL,""model_number"" VARCHAR_IGNORECASE(3) NOT NULL,""ID_to_part2"" INTEGER)
    CREATE CACHED TABLE ""Table2""(""ID"" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,""content"" VARCHAR_IGNORECASE(1) NOT NULL)
    CREATE CACHED TABLE ""Table3""(""ID"" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,""content"" VARCHAR_IGNORECASE(1) NOT NULL)
    ALTER TABLE ""Table1"" ADD CONSTRAINT SYS_FK_87 FOREIGN KEY(""ID_to_part1"") REFERENCES ""Table3""(""ID"") ON DELETE CASCADE ON UPDATE CASCADE
    ALTER TABLE ""Table1"" ADD CONSTRAINT SYS_FK_90 FOREIGN KEY(""ID_to_part2"") REFERENCES ""Table2""(""ID"") ON DELETE SET NULL ON UPDATE CASCADE
    ALTER TABLE ""Table1"" ALTER COLUMN ""ID"" RESTART WITH 15
    ALTER TABLE ""Table2"" ALTER COLUMN ""ID"" RESTART WITH 2
    ALTER TABLE ""Table3"" ALTER COLUMN ""ID"" RESTART WITH 4
    CREATE USER SA PASSWORD """"
    GRANT DBA TO SA
    SET WRITE_DELAY 0 MILLIS
    SET SCHEMA PUBLIC
    INSERT INTO ""Table1"" VALUES(0,0,'123',0)
    INSERT INTO ""Table1"" VALUES(1,1,'456',NULL)
    INSERT INTO ""Table1"" VALUES(2,2,'789',0)
    INSERT INTO ""Table1"" VALUES(3,0,'012',1)
    INSERT INTO ""Table1"" VALUES(6,3,'345',NULL)
    INSERT INTO ""Table1"" VALUES(7,1,'678',1)
    INSERT INTO ""Table1"" VALUES(8,0,'123',NULL)
    INSERT INTO ""Table1"" VALUES(9,0,'123',1)
    INSERT INTO ""Table1"" VALUES(10,1,'456',0)
    INSERT INTO ""Table1"" VALUES(11,1,'456',1)
    INSERT INTO ""Table1"" VALUES(12,1,'456',0)
    INSERT INTO ""Table1"" VALUES(13,1,'123',NULL)
    INSERT INTO ""Table1"" VALUES(14,1,'123',0)
    INSERT INTO ""Table2"" VALUES(0,'B')
    INSERT INTO ""Table2"" VALUES(1,'E')
    INSERT INTO ""Table3"" VALUES(0,'A')
    INSERT INTO ""Table3"" VALUES(1,'C')
    INSERT INTO ""Table3"" VALUES(2,'D')
    INSERT INTO ""Table3"" VALUES(3,'F')

It seem queries weren't exported, here they are followed by their results

###Query1###
Joined main table:

    SELECT ""Table1"".""ID"", ""Table3"".""content"" AS ""Table3_content"", ""Table1"".""model_number"", ""Table2"".""content"" AS ""Table2_content""
    	FROM ""Table1""
    		LEFT OUTER JOIN ""Table2"" ON ""Table1"".""ID_to_part2"" = ""Table2"".""ID""
    		LEFT OUTER JOIN ""Table3"" ON ""Table1"".""ID_to_part1"" = ""Table3"".""ID""
    	ORDER BY ""ID"" ASC

Result in:

    ID    Table3_content    model_number    Table2_content
    0     A                 123             B
    1     C                 456             
    2     D                 789             B
    3     A                 012             E
    6     F                 345             
    7     C                 678             E
    8     A                 123             
    9     A                 123             E
    10    C                 456             B
    11    C                 456             E
    12    C                 456             B
    13    C                 123             
    14    C                 123             B

###Query2###
The rows/tuples which 2 first part of the unique index could ""break"" the desired unique index should the 3<sup>rd</sup> also match. In other words, other rows aren't a threat (Query1 minus Query2).

    SELECT *
    	FROM ""Table1""
    	-- It seem HSQLDB won't support tuples as in WHERE (col1, col2) IN ( SELECT col1, col2 FROM
    	WHERE ""ID_to_part1"" IN (
    			SELECT ""ID_to_part1""
    				FROM ""Table1""
    				GROUP BY ""ID_to_part1"", ""model_number""
    				HAVING COUNT(*) > 1
    		) AND ""model_number"" IN (
    			SELECT ""model_number""
    				FROM ""Table1""
    				GROUP BY ""ID_to_part1"", ""model_number""
    				HAVING COUNT(*) > 1
    		)
    	ORDER BY ""ID_to_part1"" ASC, ""model_number"" ASC, ""ID_to_part2"" ASC, ""ID"" ASC

Result in:

    ID    ID_to_part1    model_number    ID_to_part2
    8     0              123             
    0     0              123             0
    9     0              123             1
    13    1              123             
    14    1              123             0
    1     1              456             
    10    1              456             0
    12    1              456             0
    11    1              456             1

###Query3###
The rows/tuples which would ""break"" the desired unique index.

    SELECT ""Table1"".*
    	FROM ""Table1""
    		JOIN (
    			SELECT ""ID_to_part1"", ""model_number"", ""ID_to_part2""
    				FROM ""Table1""
    				GROUP BY ""ID_to_part1"", ""model_number"", ""ID_to_part2""
    				HAVING COUNT(*) > 1
    		) AS ""non_unique_model""
    			ON ""Table1"".""ID_to_part1""=""non_unique_model"".""ID_to_part1""
    				AND ""Table1"".""model_number""=""non_unique_model"".""model_number""
    				AND ""Table1"".""ID_to_part2""=""non_unique_model"".""ID_to_part2""
    	ORDER BY ""ID_to_part1"" ASC, ""model_number"" ASC, ""ID_to_part2"" ASC, ""ID"" ASC

Result in:

    ID    ID_to_part1    model_number    ID_to_part2
    10    1              456             0
    12    1              456             0

###Beautified important tables schema###

    CREATE CACHED TABLE ""Table1""(
    	""ID"" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,
    	""ID_to_part1"" INTEGER NOT NULL,
    	""model_number"" VARCHAR_IGNORECASE(3) NOT NULL,
    	""ID_to_part2"" INTEGER
    )
    CREATE CACHED TABLE ""Table2""(
    	""ID"" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,
    	""content"" VARCHAR_IGNORECASE(1) NOT NULL
    )

  [1]: http://stackoverflow.com/users/471070/
  [2]: http://dynv.qc.to/content/how-make-index-optional-fk-example-3
";;example 3
147541891;19612096;-1;5;6fce7674-1729-4b19-a6c0-07ca898d23c2;2017-05-23 12:28:06.0;"##Original question##

So the business model, which I didn't create, have an optional relationship (as in ER model). It's been a while since I've worked DB so I might be forgetting something. Currently the FK (Foreign Key) of the 1st table point to the PK (Primary Key) of the 2nd table, which is an ID ; I don't recall the term but it's the ""fake"" one, not the ""real"" one used by the RDBMS (Relational Database Management System). For simplicity, let's imagine there's only 2 tables.

Currently I'm having *nulls in the FK column/attribute* when there's no need for the optional relation. When there is an item in that column, I want the full advantages, checking if there's a matching item at the other side of the relationship, where the FK point to (2nd table), also triggers (although there are currently none) and other validations. I was satisfied up to not long ago when I realized I *didn't want a duplicate* on the important parts of the 1st table, so I wanted to create an unique key but it seems **a key cannot be created which include a column/attribute that might contain null**. So far there's 2 solutions proposed to me although I understand neither.

The 1st was that I'd put defaults, 0 for digit-based types and an empty string ('') for character-based types. What I don't get for that is that the 2nd table already has a row/tuple with a corresponding value (0). If I was to shift the current rows to not have a row with the default, I assume I then would put in the corresponding content a default too, in my case it's a character-based type. So the ""cost"" of enabling an index would be to make a multitude of *useless joins* then a multitude of useless merges by the software, in my case the database section of an office suite, **Apache OpenOffice Base**. This seem like a lot of added processing and it seem to me some kind of trigger, along with my current design, would be better.

The 2nd was to make a ""linked"" table (his/her term), a many-to-many relationship but I thought those were only for entries that had more than 1 possible relationship ; that having 0-1 relationship would not use it. And anyway, *I'd still be confronted with the same problem*, where there would not need to have an entry in that ""linked"" table. IIRC, the 2 ""sides"" of such table must contain valid candidate keys.

So the 1-1 relationship is already implemented for the cases where the business model do have the need for that option, with the current non-null entries in the FK. Now I just have to implement a method for the cases when the business model do not need the optional part, to allow for a 0-1 relationship, for the *current null entries in the FK while not allowing duplicates*.

Thank you kindly for your help

##[fredt][1] request##
This now contain the **3<sup>rd</sup> example**.

The followind sub-section contain a semi-SQL export from Apache OpenOffice Base using the command `SCRIPT 'PATH\\TO\\NAME.sql'`. The original file, along with its export, and its non-exported queries, are on [How to make an index with an optional FK? example 3][2].

I'd like a *unique key* on the 3 columns/attributes ID_to_part1, model_number & ID_to_part2 ; however the original question, in the previous section, show HSQLDB version 1.8.0.10 won't allow a null to be contained in a column which is part of a unique key.

###HSQLDB export###
Producing some kind of SQL ; including non-standard statements.

    SET DATABASE COLLATION ""Latin1_General""
    CREATE SCHEMA PUBLIC AUTHORIZATION DBA
    CREATE CACHED TABLE ""Table1""(""ID"" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,""ID_to_part1"" INTEGER NOT NULL,""model_number"" VARCHAR_IGNORECASE(3) NOT NULL,""ID_to_part2"" INTEGER)
    CREATE CACHED TABLE ""Table2""(""ID"" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,""content"" VARCHAR_IGNORECASE(1) NOT NULL)
    CREATE CACHED TABLE ""Table3""(""ID"" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,""content"" VARCHAR_IGNORECASE(1) NOT NULL)
    ALTER TABLE ""Table1"" ADD CONSTRAINT SYS_FK_87 FOREIGN KEY(""ID_to_part1"") REFERENCES ""Table3""(""ID"") ON DELETE CASCADE ON UPDATE CASCADE
    ALTER TABLE ""Table1"" ADD CONSTRAINT SYS_FK_90 FOREIGN KEY(""ID_to_part2"") REFERENCES ""Table2""(""ID"") ON DELETE SET NULL ON UPDATE CASCADE
    ALTER TABLE ""Table1"" ALTER COLUMN ""ID"" RESTART WITH 15
    ALTER TABLE ""Table2"" ALTER COLUMN ""ID"" RESTART WITH 2
    ALTER TABLE ""Table3"" ALTER COLUMN ""ID"" RESTART WITH 4
    CREATE USER SA PASSWORD """"
    GRANT DBA TO SA
    SET WRITE_DELAY 0 MILLIS
    SET SCHEMA PUBLIC
    INSERT INTO ""Table1"" VALUES(0,0,'123',0)
    INSERT INTO ""Table1"" VALUES(1,1,'456',NULL)
    INSERT INTO ""Table1"" VALUES(2,2,'789',0)
    INSERT INTO ""Table1"" VALUES(3,0,'012',1)
    INSERT INTO ""Table1"" VALUES(6,3,'345',NULL)
    INSERT INTO ""Table1"" VALUES(7,1,'678',1)
    INSERT INTO ""Table1"" VALUES(8,0,'123',NULL)
    INSERT INTO ""Table1"" VALUES(9,0,'123',1)
    INSERT INTO ""Table1"" VALUES(10,1,'456',0)
    INSERT INTO ""Table1"" VALUES(11,1,'456',1)
    INSERT INTO ""Table1"" VALUES(12,1,'456',0)
    INSERT INTO ""Table1"" VALUES(13,1,'123',NULL)
    INSERT INTO ""Table1"" VALUES(14,1,'123',0)
    INSERT INTO ""Table2"" VALUES(0,'B')
    INSERT INTO ""Table2"" VALUES(1,'E')
    INSERT INTO ""Table3"" VALUES(0,'A')
    INSERT INTO ""Table3"" VALUES(1,'C')
    INSERT INTO ""Table3"" VALUES(2,'D')
    INSERT INTO ""Table3"" VALUES(3,'F')

It seem queries weren't exported, here they are followed by their results

###Query1###
Joined main table:

    SELECT ""Table1"".""ID"", ""Table3"".""content"" AS ""Table3_content"", ""Table1"".""model_number"", ""Table2"".""content"" AS ""Table2_content""
    	FROM ""Table1""
    		LEFT OUTER JOIN ""Table2"" ON ""Table1"".""ID_to_part2"" = ""Table2"".""ID""
    		LEFT OUTER JOIN ""Table3"" ON ""Table1"".""ID_to_part1"" = ""Table3"".""ID""
    	ORDER BY ""ID"" ASC

Result in:

    ID    Table3_content    model_number    Table2_content
    0     A                 123             B
    1     C                 456             
    2     D                 789             B
    3     A                 012             E
    6     F                 345             
    7     C                 678             E
    8     A                 123             
    9     A                 123             E
    10    C                 456             B
    11    C                 456             E
    12    C                 456             B
    13    C                 123             
    14    C                 123             B

###Query2###
The rows/tuples which 2 first part of the unique index could ""break"" the desired unique index should the 3<sup>rd</sup> also match. In other words, other rows aren't a threat (Query1 minus Query2).

    SELECT *
    	FROM ""Table1""
    	-- It seem HSQLDB won't support tuples as in WHERE (col1, col2) IN ( SELECT col1, col2 FROM
    	WHERE ""ID_to_part1"" IN (
    			SELECT ""ID_to_part1""
    				FROM ""Table1""
    				GROUP BY ""ID_to_part1"", ""model_number""
    				HAVING COUNT(*) > 1
    		) AND ""model_number"" IN (
    			SELECT ""model_number""
    				FROM ""Table1""
    				GROUP BY ""ID_to_part1"", ""model_number""
    				HAVING COUNT(*) > 1
    		)
    	ORDER BY ""ID_to_part1"" ASC, ""model_number"" ASC, ""ID_to_part2"" ASC, ""ID"" ASC

Result in:

    ID    ID_to_part1    model_number    ID_to_part2
    8     0              123             
    0     0              123             0
    9     0              123             1
    13    1              123             
    14    1              123             0
    1     1              456             
    10    1              456             0
    12    1              456             0
    11    1              456             1

###Query3###
The rows/tuples which would ""break"" the desired unique index.

    SELECT ""Table1"".*
    	FROM ""Table1""
    		JOIN (
    			SELECT ""ID_to_part1"", ""model_number"", ""ID_to_part2""
    				FROM ""Table1""
    				GROUP BY ""ID_to_part1"", ""model_number"", ""ID_to_part2""
    				HAVING COUNT(*) > 1
    		) AS ""non_unique_model""
    			ON ""Table1"".""ID_to_part1""=""non_unique_model"".""ID_to_part1""
    				AND ""Table1"".""model_number""=""non_unique_model"".""model_number""
    				AND ""Table1"".""ID_to_part2""=""non_unique_model"".""ID_to_part2""
    	ORDER BY ""ID_to_part1"" ASC, ""model_number"" ASC, ""ID_to_part2"" ASC, ""ID"" ASC

Result in:

    ID    ID_to_part1    model_number    ID_to_part2
    10    1              456             0
    12    1              456             0

###Beautified important tables schema###

    CREATE CACHED TABLE ""Table1""(
    	""ID"" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,
    	""ID_to_part1"" INTEGER NOT NULL,
    	""model_number"" VARCHAR_IGNORECASE(3) NOT NULL,
    	""ID_to_part2"" INTEGER
    )
    CREATE CACHED TABLE ""Table2""(
    	""ID"" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,
    	""content"" VARCHAR_IGNORECASE(1) NOT NULL
    )

  [1]: https://stackoverflow.com/users/471070/
  [2]: http://dynv.qc.to/content/how-make-index-optional-fk-example-3
";;replaced http://stackoverflow.com/ with https://stackoverflow.com/
