Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
23853687;10381975;1048425;2;6f424ad2-6257-4169-aedc-177eb7b80ada;2012-04-30 10:15:37.0;"The simplest way of explaining it is to look at how `FOR XML PATH` works for actual XML. Imagine a simple table `Employee`:

    EmployeeID		Name
    1				John Smith
    2				Jane Doe

You could use 

	SELECT	EmployeeID, Name
	FROM	emp.Employee
	FOR XML PATH ('Employee')

This would create XML as follows

	<Employee>
		<EmployeeID>1</EmployeeID>
		<Name>John Smith</Name>
	</Employee>
	<Employee>
		<EmployeeID>2</EmployeeID>
		<Name>Jane Doe</Name>
	</Employee>
		
		
Removing the 'Employee' from `PATH` removes the outer xml tags so this query:

	SELECT	Name AS [Data()]
	FROM	Employee
	FOR XML PATH ('Employee')
	
Would create

		<Name>John Smith</Name>
		<Name>Jane Doe</Name>
		
What you are then doing is not ideal, the column name 'data()' forces an sql error because it is trying to create an xml tag <Data()> which is not a legal tag, so the following error is generated:

`Column name 'Data()' contains an invalid XML identifier as required by FOR XML; '('(0x0028) is the first character at fault.`

The correlated subquery hides this error and just generates the XML with no tags:

	SELECT	Name AS [Data()]
	FROM	Employee
	FOR XML PATH ('Employee')
	
creates

	John Smith Jane Doe

You are then replacing spaces with commas, fairly self explanatory... 

If I were you I would adapt the query slightly:

    SELECT	E1.deptno, 
    		STUFF((	SELECT	', ' + E2.ename 
    				FROM	emp AS e2 
                    WHERE	e1.deptno = e2.DEPTNO 
                    FOR XML PATH('')
                ), 1, 2, '') 
    FROM	EMP AS e1 
    GROUP BY DEPTNO; 

Having no column alias will mean no xml tags are created, and adding the comma within the select query means any names with spaces in will not cause errors,`STUFF` will remove the first comma and space";;
23853971;10381975;1048425;5;3e71d94b-3d86-437a-b3cd-d705f81dea89;2012-04-30 10:24:15.0;"The simplest way of explaining it is to look at how `FOR XML PATH` works for actual XML. Imagine a simple table `Employee`:

    EmployeeID		Name
    1				John Smith
    2				Jane Doe

You could use 

	SELECT	EmployeeID, Name
	FROM	emp.Employee
	FOR XML PATH ('Employee')

This would create XML as follows

	<Employee>
		<EmployeeID>1</EmployeeID>
		<Name>John Smith</Name>
	</Employee>
	<Employee>
		<EmployeeID>2</EmployeeID>
		<Name>Jane Doe</Name>
	</Employee>
		
		
Removing the 'Employee' from `PATH` removes the outer xml tags so this query:

	SELECT	Name
	FROM	Employee
	FOR XML PATH ('')
	
Would create

		<Name>John Smith</Name>
		<Name>Jane Doe</Name>
		
What you are then doing is not ideal, the column name 'data()' forces an sql error because it is trying to create an xml tag <Data()> which is not a legal tag, so the following error is generated:

`Column name 'Data()' contains an invalid XML identifier as required by FOR XML; '('(0x0028) is the first character at fault.`

The correlated subquery hides this error and just generates the XML with no tags:

	SELECT	Name AS [Data()]
	FROM	Employee
	FOR XML PATH ('Employee')
	
creates

	John Smith Jane Doe

You are then replacing spaces with commas, fairly self explanatory... 

If I were you I would adapt the query slightly:

    SELECT	E1.deptno, 
    		STUFF((	SELECT	', ' + E2.ename 
    				FROM	emp AS e2 
                    WHERE	e1.deptno = e2.DEPTNO 
                    FOR XML PATH('')
                ), 1, 2, '') 
    FROM	EMP AS e1 
    GROUP BY DEPTNO; 

Having no column alias will mean no xml tags are created, and adding the comma within the select query means any names with spaces in will not cause errors,`STUFF` will remove the first comma and space";;deleted 20 characters in body
39779854;10381975;1048425;5;b8edaaf3-dbbd-49d8-b9d8-990e1f20ac52;2013-04-27 07:23:06.0;"The simplest way of explaining it is to look at how `FOR XML PATH` works for actual XML. Imagine a simple table `Employee`:

    EmployeeID		Name
    1				John Smith
    2				Jane Doe

You could use 

	SELECT	EmployeeID, Name
	FROM	emp.Employee
	FOR XML PATH ('Employee')

This would create XML as follows

	<Employee>
		<EmployeeID>1</EmployeeID>
		<Name>John Smith</Name>
	</Employee>
	<Employee>
		<EmployeeID>2</EmployeeID>
		<Name>Jane Doe</Name>
	</Employee>
		
		
Removing the 'Employee' from `PATH` removes the outer xml tags so this query:

	SELECT	Name
	FROM	Employee
	FOR XML PATH ('')
	
Would create

		<Name>John Smith</Name>
		<Name>Jane Doe</Name>
		
What you are then doing is not ideal, the column name 'data()' forces an sql error because it is trying to create an xml tag <Data()> which is not a legal tag, so the following error is generated:

`Column name 'Data()' contains an invalid XML identifier as required by FOR XML; '('(0x0028) is the first character at fault.`

The correlated subquery hides this error and just generates the XML with no tags:

	SELECT	Name AS [Data()]
	FROM	Employee
	FOR XML PATH ('Employee')
	
creates

	John Smith Jane Doe

You are then replacing spaces with commas, fairly self explanatory... 

If I were you I would adapt the query slightly:

    SELECT	E1.deptno, 
    		STUFF((	SELECT	', ' + E2.ename 
    				FROM	emp AS e2 
                    WHERE	e1.deptno = e2.DEPTNO 
                    FOR XML PATH('')
                ), 1, 2, '') 
    FROM	EMP AS e1 
    GROUP BY DEPTNO; 

Having no column alias will mean no xml tags are created, and adding the comma within the select query means any names with spaces in will not cause errors,`STUFF` will remove the first comma and space.

**ADDENDUM**

To elaborate on what KM has said in a comment, as this seems to be getting a few more views, the correct way to escape XML characters would be to use `.value` as follows:

	SELECT  E1.deptno, 
			STUFF(( SELECT  ', ' + E2.ename 
					FROM    emp AS e2 
					WHERE   e1.deptno = e2.DEPTNO 
					FOR XML PATH(''), TYPE
				).value('.', 'NVARCHAR(MAX)), 1, 2, '') 
	FROM    EMP AS e1 
	GROUP BY DEPTNO; ";;added 430 characters in body
40807482;10381975;1048425;5;67e8679d-d962-47c3-a626-4740c9a482b4;2013-05-17 22:22:12.0;"The simplest way of explaining it is to look at how `FOR XML PATH` works for actual XML. Imagine a simple table `Employee`:

    EmployeeID		Name
    1				John Smith
    2				Jane Doe

You could use 

	SELECT	EmployeeID, Name
	FROM	emp.Employee
	FOR XML PATH ('Employee')

This would create XML as follows

	<Employee>
		<EmployeeID>1</EmployeeID>
		<Name>John Smith</Name>
	</Employee>
	<Employee>
		<EmployeeID>2</EmployeeID>
		<Name>Jane Doe</Name>
	</Employee>
		
		
Removing the 'Employee' from `PATH` removes the outer xml tags so this query:

	SELECT	Name
	FROM	Employee
	FOR XML PATH ('')
	
Would create

		<Name>John Smith</Name>
		<Name>Jane Doe</Name>
		
What you are then doing is not ideal, the column name 'data()' forces an sql error because it is trying to create an xml tag <Data()> which is not a legal tag, so the following error is generated:

`Column name 'Data()' contains an invalid XML identifier as required by FOR XML; '('(0x0028) is the first character at fault.`

The correlated subquery hides this error and just generates the XML with no tags:

	SELECT	Name AS [Data()]
	FROM	Employee
	FOR XML PATH ('Employee')
	
creates

	John Smith Jane Doe

You are then replacing spaces with commas, fairly self explanatory... 

If I were you I would adapt the query slightly:

    SELECT	E1.deptno, 
    		STUFF((	SELECT	', ' + E2.ename 
    				FROM	emp AS e2 
                    WHERE	e1.deptno = e2.DEPTNO 
                    FOR XML PATH('')
                ), 1, 2, '') 
    FROM	EMP AS e1 
    GROUP BY DEPTNO; 

Having no column alias will mean no xml tags are created, and adding the comma within the select query means any names with spaces in will not cause errors,`STUFF` will remove the first comma and space.

**ADDENDUM**

To elaborate on what KM has said in a comment, as this seems to be getting a few more views, the correct way to escape XML characters would be to use `.value` as follows:

	SELECT  E1.deptno, 
			STUFF(( SELECT  ', ' + E2.ename 
					FROM    emp AS e2 
					WHERE   e1.deptno = e2.DEPTNO 
					FOR XML PATH(''), TYPE
				).value('.', 'NVARCHAR(MAX)'), 1, 2, '') 
	FROM    EMP AS e1 
	GROUP BY DEPTNO; ";;added 1 characters in body
44617966;10381975;1048425;5;364e66d2-92a4-4ef9-9eeb-28aad0d61a55;2013-07-31 17:12:52.0;"The simplest way of explaining it is to look at how `FOR XML PATH` works for actual XML. Imagine a simple table `Employee`:

    EmployeeID		Name
    1				John Smith
    2				Jane Doe

You could use 

	SELECT	EmployeeID, Name
	FROM	emp.Employee
	FOR XML PATH ('Employee')

This would create XML as follows

	<Employee>
		<EmployeeID>1</EmployeeID>
		<Name>John Smith</Name>
	</Employee>
	<Employee>
		<EmployeeID>2</EmployeeID>
		<Name>Jane Doe</Name>
	</Employee>
		
		
Removing the 'Employee' from `PATH` removes the outer xml tags so this query:

	SELECT	Name
	FROM	Employee
	FOR XML PATH ('')
	
Would create

		<Name>John Smith</Name>
		<Name>Jane Doe</Name>
		
What you are then doing is not ideal, the column name 'data()' forces an sql error because it is trying to create an xml tag <Data()> which is not a legal tag, so the following error is generated:

`Column name 'Data()' contains an invalid XML identifier as required by FOR XML; '('(0x0028) is the first character at fault.`

The correlated subquery hides this error and just generates the XML with no tags:

	SELECT	Name AS [Data()]
	FROM	Employee
	FOR XML PATH ('')
	
creates

	John Smith Jane Doe

You are then replacing spaces with commas, fairly self explanatory... 

If I were you I would adapt the query slightly:

    SELECT	E1.deptno, 
    		STUFF((	SELECT	', ' + E2.ename 
    				FROM	emp AS e2 
                    WHERE	e1.deptno = e2.DEPTNO 
                    FOR XML PATH('')
                ), 1, 2, '') 
    FROM	EMP AS e1 
    GROUP BY DEPTNO; 

Having no column alias will mean no xml tags are created, and adding the comma within the select query means any names with spaces in will not cause errors,`STUFF` will remove the first comma and space.

**ADDENDUM**

To elaborate on what KM has said in a comment, as this seems to be getting a few more views, the correct way to escape XML characters would be to use `.value` as follows:

	SELECT  E1.deptno, 
			STUFF(( SELECT  ', ' + E2.ename 
					FROM    emp AS e2 
					WHERE   e1.deptno = e2.DEPTNO 
					FOR XML PATH(''), TYPE
				).value('.', 'NVARCHAR(MAX)'), 1, 2, '') 
	FROM    EMP AS e1 
	GROUP BY DEPTNO; ";;deleted 8 characters in body
107160128;10381975;4519059;5;b78be80c-503f-41d5-b1ef-d5fbcc0811b0;2015-12-26 07:25:41.0;"The simplest way of explaining it is to look at how `FOR XML PATH` works for actual XML. Imagine a simple table `Employee`:

    EmployeeID		Name
    1				John Smith
    2				Jane Doe

You could use 

	SELECT	EmployeeID, Name
	FROM	emp.Employee
	FOR XML PATH ('Employee')

This would create XML as follows

	<Employee>
		<EmployeeID>1</EmployeeID>
		<Name>John Smith</Name>
	</Employee>
	<Employee>
		<EmployeeID>2</EmployeeID>
		<Name>Jane Doe</Name>
	</Employee>
		
		
Removing the 'Employee' from `PATH` removes the outer xml tags so this query:

	SELECT	Name
	FROM	Employee
	FOR XML PATH ('')
	
Would create

		<Name>John Smith</Name>
		<Name>Jane Doe</Name>
		
What you are then doing is not ideal, the column name 'data()' forces an sql error because it is trying to create an xml tag <Data()> which is not a legal tag, so the following error is generated:

> Column name 'Data()' contains an invalid XML identifier as required by FOR XML; '('(0x0028) is the first character at fault.

The correlated subquery hides this error and just generates the XML with no tags:

	SELECT	Name AS [Data()]
	FROM	Employee
	FOR XML PATH ('')
	
creates

	John Smith Jane Doe

You are then replacing spaces with commas, fairly self explanatory... 

If I were you I would adapt the query slightly:

    SELECT	E1.deptno, 
    		STUFF((	SELECT	', ' + E2.ename 
    				FROM	emp AS e2 
                    WHERE	e1.deptno = e2.DEPTNO 
                    FOR XML PATH('')
                ), 1, 2, '') 
    FROM	EMP AS e1 
    GROUP BY DEPTNO; 

Having no column alias will mean no xml tags are created, and adding the comma within the select query means any names with spaces in will not cause errors,`STUFF` will remove the first comma and space.

**ADDENDUM**

To elaborate on what KM has said in a comment, as this seems to be getting a few more views, the correct way to escape XML characters would be to use `.value` as follows:

	SELECT  E1.deptno, 
			STUFF(( SELECT  ', ' + E2.ename 
					FROM    emp AS e2 
					WHERE   e1.deptno = e2.DEPTNO 
					FOR XML PATH(''), TYPE
				).value('.', 'NVARCHAR(MAX)'), 1, 2, '') 
	FROM    EMP AS e1 
	GROUP BY DEPTNO; ";;edited body
