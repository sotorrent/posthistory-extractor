Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
5280933;2581754;309596;2;16cf468c-5fd5-4aa1-b58c-426bc8345f18;2010-04-05 23:24:06;"
Here's a 1.5-friendly version you're free to use:

    import java.util.*;
    
    public class MapUtil
    {
        public static <K, V extends Comparable<? super V>> Map<K, V> 
            sortByValue( Map<K, V> map )
        {
            List<Map.Entry<K, V>> list =
                new LinkedList<Map.Entry<K, V>>( map.entrySet() );
            Collections.sort( list, new Comparator<Map.Entry<K, V>>()
            {
                public int compare( Map.Entry<K, V> o1, Map.Entry<K, V> o2 )
                {
                    return (o1.getValue()).compareTo( o2.getValue() );
                }
            } );
    
            Map<K, V> result = new LinkedHashMap<K, V>();
            for (Map.Entry<K, V> entry : list)
            {
                result.put( entry.getKey(), entry.getValue() );
            }
            return result;
        }
    }

And an associated JUnit4 test so you don't have to take my word for it:

    import java.util.*;
    import org.junit.*;
    
    public class MapUtilTest
    {
        @Test
        public void testSortByValue()
        {
            Random random = new Random(System.currentTimeMillis());
            Map<String, Integer> testMap = new HashMap<String, Integer>(1000);
            for(int i = 0 ; i < 1000 ; ++i) {
                testMap.put( ""SomeString"" + random.nextInt(), random.nextInt());
            }
            
            testMap = MapUtil.sortByValue( testMap );
            Assert.assertEquals( 1000, testMap.size() );
    
            Integer previous = null;
            for(Map.Entry<String, Integer> entry : testMap.entrySet()) {
                Assert.assertNotNull( entry.getValue() );
                if (previous != null) {
                    Assert.assertTrue( entry.getValue() >= previous );
                }
                previous = entry.getValue();
            }
        }
    
    }

";;
22891948;2581754;309596;5;0a7c34e8-d4b7-477e-9f4b-a6f1c76acc88;2012-04-03 19:28:28;"Here's a generic-friendly version you're free to use:

    import java.util.*;
    
    public class MapUtil
    {
        public static <K, V extends Comparable<? super V>> Map<K, V> 
            sortByValue( Map<K, V> map )
        {
            List<Map.Entry<K, V>> list =
                new LinkedList<Map.Entry<K, V>>( map.entrySet() );
            Collections.sort( list, new Comparator<Map.Entry<K, V>>()
            {
                public int compare( Map.Entry<K, V> o1, Map.Entry<K, V> o2 )
                {
                    return (o1.getValue()).compareTo( o2.getValue() );
                }
            } );
    
            Map<K, V> result = new LinkedHashMap<K, V>();
            for (Map.Entry<K, V> entry : list)
            {
                result.put( entry.getKey(), entry.getValue() );
            }
            return result;
        }
    }

And an associated JUnit4 test so you don't have to take my word for it:

    import java.util.*;
    import org.junit.*;
    
    public class MapUtilTest
    {
        @Test
        public void testSortByValue()
        {
            Random random = new Random(System.currentTimeMillis());
            Map<String, Integer> testMap = new HashMap<String, Integer>(1000);
            for(int i = 0 ; i < 1000 ; ++i) {
                testMap.put( ""SomeString"" + random.nextInt(), random.nextInt());
            }
            
            testMap = MapUtil.sortByValue( testMap );
            Assert.assertEquals( 1000, testMap.size() );
    
            Integer previous = null;
            for(Map.Entry<String, Integer> entry : testMap.entrySet()) {
                Assert.assertNotNull( entry.getValue() );
                if (previous != null) {
                    Assert.assertTrue( entry.getValue() >= previous );
                }
                previous = entry.getValue();
            }
        }
    
    }

";;Clarifying the approach.  The point is more about it generics than java 1.5.
24965215;2581754;821497;16;73b32197-5403-406f-823a-9b6b27b85417;2012-05-30 00:47:28;;;
67971723;2581754;1341806;5;63e0cab3-5d3b-4130-a30b-2cbecfbb7321;2014-06-24 19:12:16;"Here's a generic-friendly version you're free to use:

    import java.util.*;
    
    public class MapUtil
    {
        public static <K, V extends Comparable<? super V>> Map<K, V> 
            sortByValue( Map<K, V> map )
        {
            List<Map.Entry<K, V>> list =
                new LinkedList<Map.Entry<K, V>>( map.entrySet() );
            Collections.sort( list, new Comparator<Map.Entry<K, V>>()
            {
                public int compare( Map.Entry<K, V> o1, Map.Entry<K, V> o2 )
                {
                    return (o1.getValue()).compareTo( o2.getValue() );
                }
            } );
    
            Map<K, V> result = new LinkedHashMap<K, V>();
            for (Map.Entry<K, V> entry : list)
            {
                result.put( entry.getKey(), entry.getValue() );
            }
            return result;
        }
    }

And an associated JUnit4 test so you don't have to take my word for it:

    import java.util.*;
    import org.junit.*;
    
    public class MapUtilTest
    {
        @Test
        public void testSortByValue()
        {
            Random random = new Random(System.currentTimeMillis());
            Map<String, Integer> testMap = new HashMap<String, Integer>(1000);
            for(int i = 0 ; i < 1000 ; ++i) {
                testMap.put( ""SomeString"" + random.nextInt(), random.nextInt());
            }
            
            testMap = MapUtil.sortByValue( testMap );
            Assert.assertEquals( 1000, testMap.size() );
    
            Integer previous = null;
            for(Map.Entry<String, Integer> entry : testMap.entrySet()) {
                Assert.assertNotNull( entry.getValue() );
                if (previous != null) {
                    Assert.assertTrue( entry.getValue() >= previous );
                }
                previous = entry.getValue();
            }
        }
    
    }


Java 7 Version
    
    public static <K, V extends Comparable<? super V>> Map<K, V> 
        sortByValue( Map<K, V> map )
    {
        List<Map.Entry<K, V>> list =
            new LinkedList<>( map.entrySet() );
        Collections.sort( list, new Comparator<Map.Entry<K, V>>()
        {
            @Override
            public int compare( Map.Entry<K, V> o1, Map.Entry<K, V> o2 )
            {
                return (o1.getValue()).compareTo( o2.getValue() );
            }
        } );

        Map<K, V> result = new LinkedHashMap<>();
        for (Map.Entry<K, V> entry : list)
        {
            result.put( entry.getKey(), entry.getValue() );
        }
        return result;
    }";;added 719 characters in body
71864192;2581754;796477;5;1a60142c-2335-4931-a27d-b7d9ec2a0605;2014-08-20 18:48:47;"Here's a generic-friendly version you're free to use:

    import java.util.*;
    
    public class MapUtil
    {
        public static <K, V extends Comparable<? super V>> Map<K, V> 
            sortByValue( Map<K, V> map )
        {
            List<Map.Entry<K, V>> list =
                new LinkedList<Map.Entry<K, V>>( map.entrySet() );
            Collections.sort( list, new Comparator<Map.Entry<K, V>>()
            {
                public int compare( Map.Entry<K, V> o1, Map.Entry<K, V> o2 )
                {
                    return (o1.getValue()).compareTo( o2.getValue() );
                }
            } );
    
            Map<K, V> result = new LinkedHashMap<K, V>();
            for (Map.Entry<K, V> entry : list)
            {
                result.put( entry.getKey(), entry.getValue() );
            }
            return result;
        }
    }

And an associated JUnit4 test so you don't have to take my word for it:

    import java.util.*;
    import org.junit.*;
    
    public class MapUtilTest
    {
        @Test
        public void testSortByValue()
        {
            Random random = new Random(System.currentTimeMillis());
            Map<String, Integer> testMap = new HashMap<String, Integer>(1000);
            for(int i = 0 ; i < 1000 ; ++i) {
                testMap.put( ""SomeString"" + random.nextInt(), random.nextInt());
            }
            
            testMap = MapUtil.sortByValue( testMap );
            Assert.assertEquals( 1000, testMap.size() );
    
            Integer previous = null;
            for(Map.Entry<String, Integer> entry : testMap.entrySet()) {
                Assert.assertNotNull( entry.getValue() );
                if (previous != null) {
                    Assert.assertTrue( entry.getValue() >= previous );
                }
                previous = entry.getValue();
            }
        }
    
    }


Java 7 Version
    
    public static <K, V extends Comparable<? super V>> Map<K, V> 
        sortByValue( Map<K, V> map )
    {
        List<Map.Entry<K, V>> list =
            new LinkedList<>( map.entrySet() );
        Collections.sort( list, new Comparator<Map.Entry<K, V>>()
        {
            @Override
            public int compare( Map.Entry<K, V> o1, Map.Entry<K, V> o2 )
            {
                return (o1.getValue()).compareTo( o2.getValue() );
            }
        } );

        Map<K, V> result = new LinkedHashMap<>();
        for (Map.Entry<K, V> entry : list)
        {
            result.put( entry.getKey(), entry.getValue() );
        }
        return result;
    }

Java 8 Version

    public static <K, V extends Comparable<? super V>> Map<K, V> 
        sortByValue( Map<K, V> map )
	{
		  Map<K,V> result = new LinkedHashMap<>();
		 Stream <Entry<K,V>> st = map.entrySet().stream();
		 
		 st.sorted(Comparator.comparing(e -> e.getValue()))
              .forEach(e ->result.put(e.getKey(),e.getValue()));
			
		 return result;
    }";;just added the java 8 version of above method using streams and lambda expression 
71864193;2581754;0;24;1a60142c-2335-4931-a27d-b7d9ec2a0605;2014-08-20 18:48:47;;;Proposed by 796477 approved by 407466, 235288, 1149528 edit id of 1488321
103898153;2581754;1358179;5;d9cf0256-f7f3-48dc-b4cb-28247b4c4bf1;2015-11-11 16:39:46;"Here's a generic-friendly version you're free to use:

    import java.util.*;
    
    public class MapUtil
    {
        public static <K, V extends Comparable<? super V>> Map<K, V> 
            sortByValue( Map<K, V> map )
        {
            List<Map.Entry<K, V>> list =
                new LinkedList<Map.Entry<K, V>>( map.entrySet() );
            Collections.sort( list, new Comparator<Map.Entry<K, V>>()
            {
                public int compare( Map.Entry<K, V> o1, Map.Entry<K, V> o2 )
                {
                    return (o1.getValue()).compareTo( o2.getValue() );
                }
            } );
    
            Map<K, V> result = new LinkedHashMap<K, V>();
            for (Map.Entry<K, V> entry : list)
            {
                result.put( entry.getKey(), entry.getValue() );
            }
            return result;
        }
    }

And an associated JUnit4 test so you don't have to take my word for it:

    import java.util.*;
    import org.junit.*;
    
    public class MapUtilTest
    {
        @Test
        public void testSortByValue()
        {
            Random random = new Random(System.currentTimeMillis());
            Map<String, Integer> testMap = new HashMap<String, Integer>(1000);
            for(int i = 0 ; i < 1000 ; ++i) {
                testMap.put( ""SomeString"" + random.nextInt(), random.nextInt());
            }
            
            testMap = MapUtil.sortByValue( testMap );
            Assert.assertEquals( 1000, testMap.size() );
    
            Integer previous = null;
            for(Map.Entry<String, Integer> entry : testMap.entrySet()) {
                Assert.assertNotNull( entry.getValue() );
                if (previous != null) {
                    Assert.assertTrue( entry.getValue() >= previous );
                }
                previous = entry.getValue();
            }
        }
    
    }


Java 7 Version
    
    public static <K, V extends Comparable<? super V>> Map<K, V> 
        sortByValue( Map<K, V> map )
    {
        List<Map.Entry<K, V>> list =
            new LinkedList<>( map.entrySet() );
        Collections.sort( list, new Comparator<Map.Entry<K, V>>()
        {
            @Override
            public int compare( Map.Entry<K, V> o1, Map.Entry<K, V> o2 )
            {
                return (o1.getValue()).compareTo( o2.getValue() );
            }
        } );

        Map<K, V> result = new LinkedHashMap<>();
        for (Map.Entry<K, V> entry : list)
        {
            result.put( entry.getKey(), entry.getValue() );
        }
        return result;
    }

Java 8 Version

    public static <K, V extends Comparable<? super V>> Map<K, V> 
        sortByValue( Map<K, V> map )
	{
		  Map<K,V> result = new LinkedHashMap<>();
		 Stream <Entry<K,V>> st = map.entrySet().stream();
		 
		 st.sorted(Comparator.comparing(e -> e.getValue()))
              .forEachOrdered(e ->result.put(e.getKey(),e.getValue()));
			
		 return result;
    }";;forEach: ???The behavior of this operation is explicitly nondeterministic???
116029327;2581754;2891664;5;4dca0542-1235-413a-b440-72657d1c6024;2016-04-18 23:38:25;"Here's a generic-friendly version you're free to use:

    import java.util.*;
    
    public class MapUtil
    {
        public static <K, V extends Comparable<? super V>> Map<K, V> 
            sortByValue( Map<K, V> map )
        {
            List<Map.Entry<K, V>> list =
                new LinkedList<Map.Entry<K, V>>( map.entrySet() );
            Collections.sort( list, new Comparator<Map.Entry<K, V>>()
            {
                public int compare( Map.Entry<K, V> o1, Map.Entry<K, V> o2 )
                {
                    return (o1.getValue()).compareTo( o2.getValue() );
                }
            } );
    
            Map<K, V> result = new LinkedHashMap<K, V>();
            for (Map.Entry<K, V> entry : list)
            {
                result.put( entry.getKey(), entry.getValue() );
            }
            return result;
        }
    }

And an associated JUnit4 test so you don't have to take my word for it:

    import java.util.*;
    import org.junit.*;
    
    public class MapUtilTest
    {
        @Test
        public void testSortByValue()
        {
            Random random = new Random(System.currentTimeMillis());
            Map<String, Integer> testMap = new HashMap<String, Integer>(1000);
            for(int i = 0 ; i < 1000 ; ++i) {
                testMap.put( ""SomeString"" + random.nextInt(), random.nextInt());
            }
            
            testMap = MapUtil.sortByValue( testMap );
            Assert.assertEquals( 1000, testMap.size() );
    
            Integer previous = null;
            for(Map.Entry<String, Integer> entry : testMap.entrySet()) {
                Assert.assertNotNull( entry.getValue() );
                if (previous != null) {
                    Assert.assertTrue( entry.getValue() >= previous );
                }
                previous = entry.getValue();
            }
        }
    
    }


Java 7 Version
    
    public static <K, V extends Comparable<? super V>> Map<K, V> 
        sortByValue( Map<K, V> map )
    {
        List<Map.Entry<K, V>> list =
            new LinkedList<>( map.entrySet() );
        Collections.sort( list, new Comparator<Map.Entry<K, V>>()
        {
            @Override
            public int compare( Map.Entry<K, V> o1, Map.Entry<K, V> o2 )
            {
                return ( o1.getValue() ).compareTo( o2.getValue() );
            }
        } );

        Map<K, V> result = new LinkedHashMap<>();
        for (Map.Entry<K, V> entry : list)
        {
            result.put( entry.getKey(), entry.getValue() );
        }
        return result;
    }

Java 8 Version

    public static <K, V extends Comparable<? super V>> Map<K, V> 
        sortByValue( Map<K, V> map )
	{
	    Map<K, V> result = new LinkedHashMap<>();
		Stream<Map.Entry<K, V>> st = map.entrySet().stream();
		
		st.sorted( Map.Entry.comparingByValue() )
            .forEachOrdered( e -> result.put(e.getKey(), e.getValue()) );
			
		return result;
    }";;deleted 3 characters in body
125739633;2581754;1743880;5;453040f2-1298-4444-affa-98383e6fbfab;2016-08-26 00:34:02;"Here's a generic-friendly version you're free to use:

    import java.util.*;
    
    public class MapUtil
    {
        public static <K, V extends Comparable<? super V>> Map<K, V> 
            sortByValue( Map<K, V> map )
        {
            List<Map.Entry<K, V>> list =
                new LinkedList<Map.Entry<K, V>>( map.entrySet() );
            Collections.sort( list, new Comparator<Map.Entry<K, V>>()
            {
                public int compare( Map.Entry<K, V> o1, Map.Entry<K, V> o2 )
                {
                    return (o1.getValue()).compareTo( o2.getValue() );
                }
            } );
    
            Map<K, V> result = new LinkedHashMap<K, V>();
            for (Map.Entry<K, V> entry : list)
            {
                result.put( entry.getKey(), entry.getValue() );
            }
            return result;
        }
    }

And an associated JUnit4 test so you don't have to take my word for it:

    import java.util.*;
    import org.junit.*;
    
    public class MapUtilTest
    {
        @Test
        public void testSortByValue()
        {
            Random random = new Random(System.currentTimeMillis());
            Map<String, Integer> testMap = new HashMap<String, Integer>(1000);
            for(int i = 0 ; i < 1000 ; ++i) {
                testMap.put( ""SomeString"" + random.nextInt(), random.nextInt());
            }
            
            testMap = MapUtil.sortByValue( testMap );
            Assert.assertEquals( 1000, testMap.size() );
    
            Integer previous = null;
            for(Map.Entry<String, Integer> entry : testMap.entrySet()) {
                Assert.assertNotNull( entry.getValue() );
                if (previous != null) {
                    Assert.assertTrue( entry.getValue() >= previous );
                }
                previous = entry.getValue();
            }
        }
    
    }


Java 7 Version
    
    public static <K, V extends Comparable<? super V>> Map<K, V> 
        sortByValue( Map<K, V> map )
    {
        List<Map.Entry<K, V>> list =
            new LinkedList<>( map.entrySet() );
        Collections.sort( list, new Comparator<Map.Entry<K, V>>()
        {
            @Override
            public int compare( Map.Entry<K, V> o1, Map.Entry<K, V> o2 )
            {
                return ( o1.getValue() ).compareTo( o2.getValue() );
            }
        } );

        Map<K, V> result = new LinkedHashMap<>();
        for (Map.Entry<K, V> entry : list)
        {
            result.put( entry.getKey(), entry.getValue() );
        }
        return result;
    }

Java 8 Version

	public static <K, V extends Comparable<? super V>> Map<K, V> sortByValue(Map<K, V> map) {
		return map.entrySet()
				  .stream()
				  .sorted(Map.Entry.comparingByValue())
				  .collect(Collectors.toMap(
					Map.Entry::getKey, 
					Map.Entry::getValue, 
					(e1, e2) -> e1, 
					LinkedHashMap::new
				  ));
	}";;deleted 38 characters in body
125739823;2581754;1743880;5;4ef55bbe-ed74-4208-9dbb-1d62ab21902c;2016-08-26 00:40:21;"Here's a generic-friendly version you're free to use:

    import java.util.*;
    
    public class MapUtil
    {
        public static <K, V extends Comparable<? super V>> Map<K, V> 
            sortByValue( Map<K, V> map )
        {
            List<Map.Entry<K, V>> list =
                new LinkedList<Map.Entry<K, V>>( map.entrySet() );
            Collections.sort( list, new Comparator<Map.Entry<K, V>>()
            {
                public int compare( Map.Entry<K, V> o1, Map.Entry<K, V> o2 )
                {
                    return (o1.getValue()).compareTo( o2.getValue() );
                }
            } );
    
            Map<K, V> result = new LinkedHashMap<K, V>();
            for (Map.Entry<K, V> entry : list)
            {
                result.put( entry.getKey(), entry.getValue() );
            }
            return result;
        }
    }

And an associated JUnit4 test so you don't have to take my word for it:

    import java.util.*;
    import org.junit.*;
    
    public class MapUtilTest
    {
        @Test
        public void testSortByValue()
        {
            Random random = new Random(System.currentTimeMillis());
            Map<String, Integer> testMap = new HashMap<String, Integer>(1000);
            for(int i = 0 ; i < 1000 ; ++i) {
                testMap.put( ""SomeString"" + random.nextInt(), random.nextInt());
            }
            
            testMap = MapUtil.sortByValue( testMap );
            Assert.assertEquals( 1000, testMap.size() );
    
            Integer previous = null;
            for(Map.Entry<String, Integer> entry : testMap.entrySet()) {
                Assert.assertNotNull( entry.getValue() );
                if (previous != null) {
                    Assert.assertTrue( entry.getValue() >= previous );
                }
                previous = entry.getValue();
            }
        }
    
    }


Java 7 Version
    
    public static <K, V extends Comparable<? super V>> Map<K, V> 
        sortByValue( Map<K, V> map )
    {
        List<Map.Entry<K, V>> list =
            new LinkedList<>( map.entrySet() );
        Collections.sort( list, new Comparator<Map.Entry<K, V>>()
        {
            @Override
            public int compare( Map.Entry<K, V> o1, Map.Entry<K, V> o2 )
            {
                return ( o1.getValue() ).compareTo( o2.getValue() );
            }
        } );

        Map<K, V> result = new LinkedHashMap<>();
        for (Map.Entry<K, V> entry : list)
        {
            result.put( entry.getKey(), entry.getValue() );
        }
        return result;
    }

Java 8 Version. This will sort according to the value in ascending order; for descending order, it is just possible to uncomment the call to `Collections.reverseOrder()`.

	public static <K, V extends Comparable<? super V>> Map<K, V> sortByValue(Map<K, V> map) {
		return map.entrySet()
				  .stream()
				  .sorted(Map.Entry.comparingByValue(/*Collections.reverseOrder()*/))
				  .collect(Collectors.toMap(
					Map.Entry::getKey, 
					Map.Entry::getValue, 
					(e1, e2) -> e1, 
					LinkedHashMap::new
				  ));
	}";;deleted 38 characters in body
