Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
5280933;2581754;309596;2;16cf468c-5fd5-4aa1-b58c-426bc8345f18;2010-04-05 23:24:06;"&#xD;&#xA;Here's a 1.5-friendly version you're free to use:&#xD;&#xA;&#xD;&#xA;    import java.util.*;&#xD;&#xA;    &#xD;&#xA;    public class MapUtil&#xD;&#xA;    {&#xD;&#xA;        public static <K, V extends Comparable<? super V>> Map<K, V> &#xD;&#xA;            sortByValue( Map<K, V> map )&#xD;&#xA;        {&#xD;&#xA;            List<Map.Entry<K, V>> list =&#xD;&#xA;                new LinkedList<Map.Entry<K, V>>( map.entrySet() );&#xD;&#xA;            Collections.sort( list, new Comparator<Map.Entry<K, V>>()&#xD;&#xA;            {&#xD;&#xA;                public int compare( Map.Entry<K, V> o1, Map.Entry<K, V> o2 )&#xD;&#xA;                {&#xD;&#xA;                    return (o1.getValue()).compareTo( o2.getValue() );&#xD;&#xA;                }&#xD;&#xA;            } );&#xD;&#xA;    &#xD;&#xA;            Map<K, V> result = new LinkedHashMap<K, V>();&#xD;&#xA;            for (Map.Entry<K, V> entry : list)&#xD;&#xA;            {&#xD;&#xA;                result.put( entry.getKey(), entry.getValue() );&#xD;&#xA;            }&#xD;&#xA;            return result;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;And an associated JUnit4 test so you don't have to take my word for it:&#xD;&#xA;&#xD;&#xA;    import java.util.*;&#xD;&#xA;    import org.junit.*;&#xD;&#xA;    &#xD;&#xA;    public class MapUtilTest&#xD;&#xA;    {&#xD;&#xA;        @Test&#xD;&#xA;        public void testSortByValue()&#xD;&#xA;        {&#xD;&#xA;            Random random = new Random(System.currentTimeMillis());&#xD;&#xA;            Map<String, Integer> testMap = new HashMap<String, Integer>(1000);&#xD;&#xA;            for(int i = 0 ; i < 1000 ; ++i) {&#xD;&#xA;                testMap.put( ""SomeString"" + random.nextInt(), random.nextInt());&#xD;&#xA;            }&#xD;&#xA;            &#xD;&#xA;            testMap = MapUtil.sortByValue( testMap );&#xD;&#xA;            Assert.assertEquals( 1000, testMap.size() );&#xD;&#xA;    &#xD;&#xA;            Integer previous = null;&#xD;&#xA;            for(Map.Entry<String, Integer> entry : testMap.entrySet()) {&#xD;&#xA;                Assert.assertNotNull( entry.getValue() );&#xD;&#xA;                if (previous != null) {&#xD;&#xA;                    Assert.assertTrue( entry.getValue() >= previous );&#xD;&#xA;                }&#xD;&#xA;                previous = entry.getValue();&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;";;
22891948;2581754;309596;5;0a7c34e8-d4b7-477e-9f4b-a6f1c76acc88;2012-04-03 19:28:28;"Here's a generic-friendly version you're free to use:&#xD;&#xA;&#xD;&#xA;    import java.util.*;&#xD;&#xA;    &#xD;&#xA;    public class MapUtil&#xD;&#xA;    {&#xD;&#xA;        public static <K, V extends Comparable<? super V>> Map<K, V> &#xD;&#xA;            sortByValue( Map<K, V> map )&#xD;&#xA;        {&#xD;&#xA;            List<Map.Entry<K, V>> list =&#xD;&#xA;                new LinkedList<Map.Entry<K, V>>( map.entrySet() );&#xD;&#xA;            Collections.sort( list, new Comparator<Map.Entry<K, V>>()&#xD;&#xA;            {&#xD;&#xA;                public int compare( Map.Entry<K, V> o1, Map.Entry<K, V> o2 )&#xD;&#xA;                {&#xD;&#xA;                    return (o1.getValue()).compareTo( o2.getValue() );&#xD;&#xA;                }&#xD;&#xA;            } );&#xD;&#xA;    &#xD;&#xA;            Map<K, V> result = new LinkedHashMap<K, V>();&#xD;&#xA;            for (Map.Entry<K, V> entry : list)&#xD;&#xA;            {&#xD;&#xA;                result.put( entry.getKey(), entry.getValue() );&#xD;&#xA;            }&#xD;&#xA;            return result;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;And an associated JUnit4 test so you don't have to take my word for it:&#xD;&#xA;&#xD;&#xA;    import java.util.*;&#xD;&#xA;    import org.junit.*;&#xD;&#xA;    &#xD;&#xA;    public class MapUtilTest&#xD;&#xA;    {&#xD;&#xA;        @Test&#xD;&#xA;        public void testSortByValue()&#xD;&#xA;        {&#xD;&#xA;            Random random = new Random(System.currentTimeMillis());&#xD;&#xA;            Map<String, Integer> testMap = new HashMap<String, Integer>(1000);&#xD;&#xA;            for(int i = 0 ; i < 1000 ; ++i) {&#xD;&#xA;                testMap.put( ""SomeString"" + random.nextInt(), random.nextInt());&#xD;&#xA;            }&#xD;&#xA;            &#xD;&#xA;            testMap = MapUtil.sortByValue( testMap );&#xD;&#xA;            Assert.assertEquals( 1000, testMap.size() );&#xD;&#xA;    &#xD;&#xA;            Integer previous = null;&#xD;&#xA;            for(Map.Entry<String, Integer> entry : testMap.entrySet()) {&#xD;&#xA;                Assert.assertNotNull( entry.getValue() );&#xD;&#xA;                if (previous != null) {&#xD;&#xA;                    Assert.assertTrue( entry.getValue() >= previous );&#xD;&#xA;                }&#xD;&#xA;                previous = entry.getValue();&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;";;Clarifying the approach.  The point is more about it generics than java 1.5.
24965215;2581754;821497;16;73b32197-5403-406f-823a-9b6b27b85417;2012-05-30 00:47:28;;;
67971723;2581754;1341806;5;63e0cab3-5d3b-4130-a30b-2cbecfbb7321;2014-06-24 19:12:16;"Here's a generic-friendly version you're free to use:&#xD;&#xA;&#xD;&#xA;    import java.util.*;&#xD;&#xA;    &#xD;&#xA;    public class MapUtil&#xD;&#xA;    {&#xD;&#xA;        public static <K, V extends Comparable<? super V>> Map<K, V> &#xD;&#xA;            sortByValue( Map<K, V> map )&#xD;&#xA;        {&#xD;&#xA;            List<Map.Entry<K, V>> list =&#xD;&#xA;                new LinkedList<Map.Entry<K, V>>( map.entrySet() );&#xD;&#xA;            Collections.sort( list, new Comparator<Map.Entry<K, V>>()&#xD;&#xA;            {&#xD;&#xA;                public int compare( Map.Entry<K, V> o1, Map.Entry<K, V> o2 )&#xD;&#xA;                {&#xD;&#xA;                    return (o1.getValue()).compareTo( o2.getValue() );&#xD;&#xA;                }&#xD;&#xA;            } );&#xD;&#xA;    &#xD;&#xA;            Map<K, V> result = new LinkedHashMap<K, V>();&#xD;&#xA;            for (Map.Entry<K, V> entry : list)&#xD;&#xA;            {&#xD;&#xA;                result.put( entry.getKey(), entry.getValue() );&#xD;&#xA;            }&#xD;&#xA;            return result;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;And an associated JUnit4 test so you don't have to take my word for it:&#xD;&#xA;&#xD;&#xA;    import java.util.*;&#xD;&#xA;    import org.junit.*;&#xD;&#xA;    &#xD;&#xA;    public class MapUtilTest&#xD;&#xA;    {&#xD;&#xA;        @Test&#xD;&#xA;        public void testSortByValue()&#xD;&#xA;        {&#xD;&#xA;            Random random = new Random(System.currentTimeMillis());&#xD;&#xA;            Map<String, Integer> testMap = new HashMap<String, Integer>(1000);&#xD;&#xA;            for(int i = 0 ; i < 1000 ; ++i) {&#xD;&#xA;                testMap.put( ""SomeString"" + random.nextInt(), random.nextInt());&#xD;&#xA;            }&#xD;&#xA;            &#xD;&#xA;            testMap = MapUtil.sortByValue( testMap );&#xD;&#xA;            Assert.assertEquals( 1000, testMap.size() );&#xD;&#xA;    &#xD;&#xA;            Integer previous = null;&#xD;&#xA;            for(Map.Entry<String, Integer> entry : testMap.entrySet()) {&#xD;&#xA;                Assert.assertNotNull( entry.getValue() );&#xD;&#xA;                if (previous != null) {&#xD;&#xA;                    Assert.assertTrue( entry.getValue() >= previous );&#xD;&#xA;                }&#xD;&#xA;                previous = entry.getValue();&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Java 7 Version&#xD;&#xA;    &#xD;&#xA;    public static <K, V extends Comparable<? super V>> Map<K, V> &#xD;&#xA;        sortByValue( Map<K, V> map )&#xD;&#xA;    {&#xD;&#xA;        List<Map.Entry<K, V>> list =&#xD;&#xA;            new LinkedList<>( map.entrySet() );&#xD;&#xA;        Collections.sort( list, new Comparator<Map.Entry<K, V>>()&#xD;&#xA;        {&#xD;&#xA;            @Override&#xD;&#xA;            public int compare( Map.Entry<K, V> o1, Map.Entry<K, V> o2 )&#xD;&#xA;            {&#xD;&#xA;                return (o1.getValue()).compareTo( o2.getValue() );&#xD;&#xA;            }&#xD;&#xA;        } );&#xD;&#xA;&#xD;&#xA;        Map<K, V> result = new LinkedHashMap<>();&#xD;&#xA;        for (Map.Entry<K, V> entry : list)&#xD;&#xA;        {&#xD;&#xA;            result.put( entry.getKey(), entry.getValue() );&#xD;&#xA;        }&#xD;&#xA;        return result;&#xD;&#xA;    }";;added 719 characters in body
71864192;2581754;796477;5;1a60142c-2335-4931-a27d-b7d9ec2a0605;2014-08-20 18:48:47;"Here's a generic-friendly version you're free to use:&#xD;&#xA;&#xD;&#xA;    import java.util.*;&#xD;&#xA;    &#xD;&#xA;    public class MapUtil&#xD;&#xA;    {&#xD;&#xA;        public static <K, V extends Comparable<? super V>> Map<K, V> &#xD;&#xA;            sortByValue( Map<K, V> map )&#xD;&#xA;        {&#xD;&#xA;            List<Map.Entry<K, V>> list =&#xD;&#xA;                new LinkedList<Map.Entry<K, V>>( map.entrySet() );&#xD;&#xA;            Collections.sort( list, new Comparator<Map.Entry<K, V>>()&#xD;&#xA;            {&#xD;&#xA;                public int compare( Map.Entry<K, V> o1, Map.Entry<K, V> o2 )&#xD;&#xA;                {&#xD;&#xA;                    return (o1.getValue()).compareTo( o2.getValue() );&#xD;&#xA;                }&#xD;&#xA;            } );&#xD;&#xA;    &#xD;&#xA;            Map<K, V> result = new LinkedHashMap<K, V>();&#xD;&#xA;            for (Map.Entry<K, V> entry : list)&#xD;&#xA;            {&#xD;&#xA;                result.put( entry.getKey(), entry.getValue() );&#xD;&#xA;            }&#xD;&#xA;            return result;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;And an associated JUnit4 test so you don't have to take my word for it:&#xD;&#xA;&#xD;&#xA;    import java.util.*;&#xD;&#xA;    import org.junit.*;&#xD;&#xA;    &#xD;&#xA;    public class MapUtilTest&#xD;&#xA;    {&#xD;&#xA;        @Test&#xD;&#xA;        public void testSortByValue()&#xD;&#xA;        {&#xD;&#xA;            Random random = new Random(System.currentTimeMillis());&#xD;&#xA;            Map<String, Integer> testMap = new HashMap<String, Integer>(1000);&#xD;&#xA;            for(int i = 0 ; i < 1000 ; ++i) {&#xD;&#xA;                testMap.put( ""SomeString"" + random.nextInt(), random.nextInt());&#xD;&#xA;            }&#xD;&#xA;            &#xD;&#xA;            testMap = MapUtil.sortByValue( testMap );&#xD;&#xA;            Assert.assertEquals( 1000, testMap.size() );&#xD;&#xA;    &#xD;&#xA;            Integer previous = null;&#xD;&#xA;            for(Map.Entry<String, Integer> entry : testMap.entrySet()) {&#xD;&#xA;                Assert.assertNotNull( entry.getValue() );&#xD;&#xA;                if (previous != null) {&#xD;&#xA;                    Assert.assertTrue( entry.getValue() >= previous );&#xD;&#xA;                }&#xD;&#xA;                previous = entry.getValue();&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Java 7 Version&#xD;&#xA;    &#xD;&#xA;    public static <K, V extends Comparable<? super V>> Map<K, V> &#xD;&#xA;        sortByValue( Map<K, V> map )&#xD;&#xA;    {&#xD;&#xA;        List<Map.Entry<K, V>> list =&#xD;&#xA;            new LinkedList<>( map.entrySet() );&#xD;&#xA;        Collections.sort( list, new Comparator<Map.Entry<K, V>>()&#xD;&#xA;        {&#xD;&#xA;            @Override&#xD;&#xA;            public int compare( Map.Entry<K, V> o1, Map.Entry<K, V> o2 )&#xD;&#xA;            {&#xD;&#xA;                return (o1.getValue()).compareTo( o2.getValue() );&#xD;&#xA;            }&#xD;&#xA;        } );&#xD;&#xA;&#xD;&#xA;        Map<K, V> result = new LinkedHashMap<>();&#xD;&#xA;        for (Map.Entry<K, V> entry : list)&#xD;&#xA;        {&#xD;&#xA;            result.put( entry.getKey(), entry.getValue() );&#xD;&#xA;        }&#xD;&#xA;        return result;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Java 8 Version&#xD;&#xA;&#xD;&#xA;    public static <K, V extends Comparable<? super V>> Map<K, V> &#xD;&#xA;        sortByValue( Map<K, V> map )&#xD;&#xA;	{&#xD;&#xA;		  Map<K,V> result = new LinkedHashMap<>();&#xD;&#xA;		 Stream <Entry<K,V>> st = map.entrySet().stream();&#xD;&#xA;		 &#xD;&#xA;		 st.sorted(Comparator.comparing(e -> e.getValue()))&#xD;&#xA;              .forEach(e ->result.put(e.getKey(),e.getValue()));&#xD;&#xA;			&#xD;&#xA;		 return result;&#xD;&#xA;    }";;just added the java 8 version of above method using streams and lambda expression 
71864193;2581754;0;24;1a60142c-2335-4931-a27d-b7d9ec2a0605;2014-08-20 18:48:47;;;Proposed by 796477 approved by 407466, 235288, 1149528 edit id of 1488321
103898153;2581754;1358179;5;d9cf0256-f7f3-48dc-b4cb-28247b4c4bf1;2015-11-11 16:39:46;"Here's a generic-friendly version you're free to use:&#xD;&#xA;&#xD;&#xA;    import java.util.*;&#xD;&#xA;    &#xD;&#xA;    public class MapUtil&#xD;&#xA;    {&#xD;&#xA;        public static <K, V extends Comparable<? super V>> Map<K, V> &#xD;&#xA;            sortByValue( Map<K, V> map )&#xD;&#xA;        {&#xD;&#xA;            List<Map.Entry<K, V>> list =&#xD;&#xA;                new LinkedList<Map.Entry<K, V>>( map.entrySet() );&#xD;&#xA;            Collections.sort( list, new Comparator<Map.Entry<K, V>>()&#xD;&#xA;            {&#xD;&#xA;                public int compare( Map.Entry<K, V> o1, Map.Entry<K, V> o2 )&#xD;&#xA;                {&#xD;&#xA;                    return (o1.getValue()).compareTo( o2.getValue() );&#xD;&#xA;                }&#xD;&#xA;            } );&#xD;&#xA;    &#xD;&#xA;            Map<K, V> result = new LinkedHashMap<K, V>();&#xD;&#xA;            for (Map.Entry<K, V> entry : list)&#xD;&#xA;            {&#xD;&#xA;                result.put( entry.getKey(), entry.getValue() );&#xD;&#xA;            }&#xD;&#xA;            return result;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;And an associated JUnit4 test so you don't have to take my word for it:&#xD;&#xA;&#xD;&#xA;    import java.util.*;&#xD;&#xA;    import org.junit.*;&#xD;&#xA;    &#xD;&#xA;    public class MapUtilTest&#xD;&#xA;    {&#xD;&#xA;        @Test&#xD;&#xA;        public void testSortByValue()&#xD;&#xA;        {&#xD;&#xA;            Random random = new Random(System.currentTimeMillis());&#xD;&#xA;            Map<String, Integer> testMap = new HashMap<String, Integer>(1000);&#xD;&#xA;            for(int i = 0 ; i < 1000 ; ++i) {&#xD;&#xA;                testMap.put( ""SomeString"" + random.nextInt(), random.nextInt());&#xD;&#xA;            }&#xD;&#xA;            &#xD;&#xA;            testMap = MapUtil.sortByValue( testMap );&#xD;&#xA;            Assert.assertEquals( 1000, testMap.size() );&#xD;&#xA;    &#xD;&#xA;            Integer previous = null;&#xD;&#xA;            for(Map.Entry<String, Integer> entry : testMap.entrySet()) {&#xD;&#xA;                Assert.assertNotNull( entry.getValue() );&#xD;&#xA;                if (previous != null) {&#xD;&#xA;                    Assert.assertTrue( entry.getValue() >= previous );&#xD;&#xA;                }&#xD;&#xA;                previous = entry.getValue();&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Java 7 Version&#xD;&#xA;    &#xD;&#xA;    public static <K, V extends Comparable<? super V>> Map<K, V> &#xD;&#xA;        sortByValue( Map<K, V> map )&#xD;&#xA;    {&#xD;&#xA;        List<Map.Entry<K, V>> list =&#xD;&#xA;            new LinkedList<>( map.entrySet() );&#xD;&#xA;        Collections.sort( list, new Comparator<Map.Entry<K, V>>()&#xD;&#xA;        {&#xD;&#xA;            @Override&#xD;&#xA;            public int compare( Map.Entry<K, V> o1, Map.Entry<K, V> o2 )&#xD;&#xA;            {&#xD;&#xA;                return (o1.getValue()).compareTo( o2.getValue() );&#xD;&#xA;            }&#xD;&#xA;        } );&#xD;&#xA;&#xD;&#xA;        Map<K, V> result = new LinkedHashMap<>();&#xD;&#xA;        for (Map.Entry<K, V> entry : list)&#xD;&#xA;        {&#xD;&#xA;            result.put( entry.getKey(), entry.getValue() );&#xD;&#xA;        }&#xD;&#xA;        return result;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Java 8 Version&#xD;&#xA;&#xD;&#xA;    public static <K, V extends Comparable<? super V>> Map<K, V> &#xD;&#xA;        sortByValue( Map<K, V> map )&#xD;&#xA;	{&#xD;&#xA;		  Map<K,V> result = new LinkedHashMap<>();&#xD;&#xA;		 Stream <Entry<K,V>> st = map.entrySet().stream();&#xD;&#xA;		 &#xD;&#xA;		 st.sorted(Comparator.comparing(e -> e.getValue()))&#xD;&#xA;              .forEachOrdered(e ->result.put(e.getKey(),e.getValue()));&#xD;&#xA;			&#xD;&#xA;		 return result;&#xD;&#xA;    }";;forEach: ???The behavior of this operation is explicitly nondeterministic???
116029327;2581754;2891664;5;4dca0542-1235-413a-b440-72657d1c6024;2016-04-18 23:38:25;"Here's a generic-friendly version you're free to use:&#xD;&#xA;&#xD;&#xA;    import java.util.*;&#xD;&#xA;    &#xD;&#xA;    public class MapUtil&#xD;&#xA;    {&#xD;&#xA;        public static <K, V extends Comparable<? super V>> Map<K, V> &#xD;&#xA;            sortByValue( Map<K, V> map )&#xD;&#xA;        {&#xD;&#xA;            List<Map.Entry<K, V>> list =&#xD;&#xA;                new LinkedList<Map.Entry<K, V>>( map.entrySet() );&#xD;&#xA;            Collections.sort( list, new Comparator<Map.Entry<K, V>>()&#xD;&#xA;            {&#xD;&#xA;                public int compare( Map.Entry<K, V> o1, Map.Entry<K, V> o2 )&#xD;&#xA;                {&#xD;&#xA;                    return (o1.getValue()).compareTo( o2.getValue() );&#xD;&#xA;                }&#xD;&#xA;            } );&#xD;&#xA;    &#xD;&#xA;            Map<K, V> result = new LinkedHashMap<K, V>();&#xD;&#xA;            for (Map.Entry<K, V> entry : list)&#xD;&#xA;            {&#xD;&#xA;                result.put( entry.getKey(), entry.getValue() );&#xD;&#xA;            }&#xD;&#xA;            return result;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;And an associated JUnit4 test so you don't have to take my word for it:&#xD;&#xA;&#xD;&#xA;    import java.util.*;&#xD;&#xA;    import org.junit.*;&#xD;&#xA;    &#xD;&#xA;    public class MapUtilTest&#xD;&#xA;    {&#xD;&#xA;        @Test&#xD;&#xA;        public void testSortByValue()&#xD;&#xA;        {&#xD;&#xA;            Random random = new Random(System.currentTimeMillis());&#xD;&#xA;            Map<String, Integer> testMap = new HashMap<String, Integer>(1000);&#xD;&#xA;            for(int i = 0 ; i < 1000 ; ++i) {&#xD;&#xA;                testMap.put( ""SomeString"" + random.nextInt(), random.nextInt());&#xD;&#xA;            }&#xD;&#xA;            &#xD;&#xA;            testMap = MapUtil.sortByValue( testMap );&#xD;&#xA;            Assert.assertEquals( 1000, testMap.size() );&#xD;&#xA;    &#xD;&#xA;            Integer previous = null;&#xD;&#xA;            for(Map.Entry<String, Integer> entry : testMap.entrySet()) {&#xD;&#xA;                Assert.assertNotNull( entry.getValue() );&#xD;&#xA;                if (previous != null) {&#xD;&#xA;                    Assert.assertTrue( entry.getValue() >= previous );&#xD;&#xA;                }&#xD;&#xA;                previous = entry.getValue();&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Java 7 Version&#xD;&#xA;    &#xD;&#xA;    public static <K, V extends Comparable<? super V>> Map<K, V> &#xD;&#xA;        sortByValue( Map<K, V> map )&#xD;&#xA;    {&#xD;&#xA;        List<Map.Entry<K, V>> list =&#xD;&#xA;            new LinkedList<>( map.entrySet() );&#xD;&#xA;        Collections.sort( list, new Comparator<Map.Entry<K, V>>()&#xD;&#xA;        {&#xD;&#xA;            @Override&#xD;&#xA;            public int compare( Map.Entry<K, V> o1, Map.Entry<K, V> o2 )&#xD;&#xA;            {&#xD;&#xA;                return ( o1.getValue() ).compareTo( o2.getValue() );&#xD;&#xA;            }&#xD;&#xA;        } );&#xD;&#xA;&#xD;&#xA;        Map<K, V> result = new LinkedHashMap<>();&#xD;&#xA;        for (Map.Entry<K, V> entry : list)&#xD;&#xA;        {&#xD;&#xA;            result.put( entry.getKey(), entry.getValue() );&#xD;&#xA;        }&#xD;&#xA;        return result;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Java 8 Version&#xD;&#xA;&#xD;&#xA;    public static <K, V extends Comparable<? super V>> Map<K, V> &#xD;&#xA;        sortByValue( Map<K, V> map )&#xD;&#xA;	{&#xD;&#xA;	    Map<K, V> result = new LinkedHashMap<>();&#xD;&#xA;		Stream<Map.Entry<K, V>> st = map.entrySet().stream();&#xD;&#xA;		&#xD;&#xA;		st.sorted( Map.Entry.comparingByValue() )&#xD;&#xA;            .forEachOrdered( e -> result.put(e.getKey(), e.getValue()) );&#xD;&#xA;			&#xD;&#xA;		return result;&#xD;&#xA;    }";;deleted 3 characters in body
125739633;2581754;1743880;5;453040f2-1298-4444-affa-98383e6fbfab;2016-08-26 00:34:02;"Here's a generic-friendly version you're free to use:&#xD;&#xA;&#xD;&#xA;    import java.util.*;&#xD;&#xA;    &#xD;&#xA;    public class MapUtil&#xD;&#xA;    {&#xD;&#xA;        public static <K, V extends Comparable<? super V>> Map<K, V> &#xD;&#xA;            sortByValue( Map<K, V> map )&#xD;&#xA;        {&#xD;&#xA;            List<Map.Entry<K, V>> list =&#xD;&#xA;                new LinkedList<Map.Entry<K, V>>( map.entrySet() );&#xD;&#xA;            Collections.sort( list, new Comparator<Map.Entry<K, V>>()&#xD;&#xA;            {&#xD;&#xA;                public int compare( Map.Entry<K, V> o1, Map.Entry<K, V> o2 )&#xD;&#xA;                {&#xD;&#xA;                    return (o1.getValue()).compareTo( o2.getValue() );&#xD;&#xA;                }&#xD;&#xA;            } );&#xD;&#xA;    &#xD;&#xA;            Map<K, V> result = new LinkedHashMap<K, V>();&#xD;&#xA;            for (Map.Entry<K, V> entry : list)&#xD;&#xA;            {&#xD;&#xA;                result.put( entry.getKey(), entry.getValue() );&#xD;&#xA;            }&#xD;&#xA;            return result;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;And an associated JUnit4 test so you don't have to take my word for it:&#xD;&#xA;&#xD;&#xA;    import java.util.*;&#xD;&#xA;    import org.junit.*;&#xD;&#xA;    &#xD;&#xA;    public class MapUtilTest&#xD;&#xA;    {&#xD;&#xA;        @Test&#xD;&#xA;        public void testSortByValue()&#xD;&#xA;        {&#xD;&#xA;            Random random = new Random(System.currentTimeMillis());&#xD;&#xA;            Map<String, Integer> testMap = new HashMap<String, Integer>(1000);&#xD;&#xA;            for(int i = 0 ; i < 1000 ; ++i) {&#xD;&#xA;                testMap.put( ""SomeString"" + random.nextInt(), random.nextInt());&#xD;&#xA;            }&#xD;&#xA;            &#xD;&#xA;            testMap = MapUtil.sortByValue( testMap );&#xD;&#xA;            Assert.assertEquals( 1000, testMap.size() );&#xD;&#xA;    &#xD;&#xA;            Integer previous = null;&#xD;&#xA;            for(Map.Entry<String, Integer> entry : testMap.entrySet()) {&#xD;&#xA;                Assert.assertNotNull( entry.getValue() );&#xD;&#xA;                if (previous != null) {&#xD;&#xA;                    Assert.assertTrue( entry.getValue() >= previous );&#xD;&#xA;                }&#xD;&#xA;                previous = entry.getValue();&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Java 7 Version&#xD;&#xA;    &#xD;&#xA;    public static <K, V extends Comparable<? super V>> Map<K, V> &#xD;&#xA;        sortByValue( Map<K, V> map )&#xD;&#xA;    {&#xD;&#xA;        List<Map.Entry<K, V>> list =&#xD;&#xA;            new LinkedList<>( map.entrySet() );&#xD;&#xA;        Collections.sort( list, new Comparator<Map.Entry<K, V>>()&#xD;&#xA;        {&#xD;&#xA;            @Override&#xD;&#xA;            public int compare( Map.Entry<K, V> o1, Map.Entry<K, V> o2 )&#xD;&#xA;            {&#xD;&#xA;                return ( o1.getValue() ).compareTo( o2.getValue() );&#xD;&#xA;            }&#xD;&#xA;        } );&#xD;&#xA;&#xD;&#xA;        Map<K, V> result = new LinkedHashMap<>();&#xD;&#xA;        for (Map.Entry<K, V> entry : list)&#xD;&#xA;        {&#xD;&#xA;            result.put( entry.getKey(), entry.getValue() );&#xD;&#xA;        }&#xD;&#xA;        return result;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Java 8 Version&#xD;&#xA;&#xD;&#xA;	public static <K, V extends Comparable<? super V>> Map<K, V> sortByValue(Map<K, V> map) {&#xD;&#xA;		return map.entrySet()&#xD;&#xA;				  .stream()&#xD;&#xA;				  .sorted(Map.Entry.comparingByValue())&#xD;&#xA;				  .collect(Collectors.toMap(&#xD;&#xA;					Map.Entry::getKey, &#xD;&#xA;					Map.Entry::getValue, &#xD;&#xA;					(e1, e2) -> e1, &#xD;&#xA;					LinkedHashMap::new&#xD;&#xA;				  ));&#xD;&#xA;	}";;deleted 38 characters in body
125739823;2581754;1743880;5;4ef55bbe-ed74-4208-9dbb-1d62ab21902c;2016-08-26 00:40:21;"Here's a generic-friendly version you're free to use:&#xD;&#xA;&#xD;&#xA;    import java.util.*;&#xD;&#xA;    &#xD;&#xA;    public class MapUtil&#xD;&#xA;    {&#xD;&#xA;        public static <K, V extends Comparable<? super V>> Map<K, V> &#xD;&#xA;            sortByValue( Map<K, V> map )&#xD;&#xA;        {&#xD;&#xA;            List<Map.Entry<K, V>> list =&#xD;&#xA;                new LinkedList<Map.Entry<K, V>>( map.entrySet() );&#xD;&#xA;            Collections.sort( list, new Comparator<Map.Entry<K, V>>()&#xD;&#xA;            {&#xD;&#xA;                public int compare( Map.Entry<K, V> o1, Map.Entry<K, V> o2 )&#xD;&#xA;                {&#xD;&#xA;                    return (o1.getValue()).compareTo( o2.getValue() );&#xD;&#xA;                }&#xD;&#xA;            } );&#xD;&#xA;    &#xD;&#xA;            Map<K, V> result = new LinkedHashMap<K, V>();&#xD;&#xA;            for (Map.Entry<K, V> entry : list)&#xD;&#xA;            {&#xD;&#xA;                result.put( entry.getKey(), entry.getValue() );&#xD;&#xA;            }&#xD;&#xA;            return result;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;And an associated JUnit4 test so you don't have to take my word for it:&#xD;&#xA;&#xD;&#xA;    import java.util.*;&#xD;&#xA;    import org.junit.*;&#xD;&#xA;    &#xD;&#xA;    public class MapUtilTest&#xD;&#xA;    {&#xD;&#xA;        @Test&#xD;&#xA;        public void testSortByValue()&#xD;&#xA;        {&#xD;&#xA;            Random random = new Random(System.currentTimeMillis());&#xD;&#xA;            Map<String, Integer> testMap = new HashMap<String, Integer>(1000);&#xD;&#xA;            for(int i = 0 ; i < 1000 ; ++i) {&#xD;&#xA;                testMap.put( ""SomeString"" + random.nextInt(), random.nextInt());&#xD;&#xA;            }&#xD;&#xA;            &#xD;&#xA;            testMap = MapUtil.sortByValue( testMap );&#xD;&#xA;            Assert.assertEquals( 1000, testMap.size() );&#xD;&#xA;    &#xD;&#xA;            Integer previous = null;&#xD;&#xA;            for(Map.Entry<String, Integer> entry : testMap.entrySet()) {&#xD;&#xA;                Assert.assertNotNull( entry.getValue() );&#xD;&#xA;                if (previous != null) {&#xD;&#xA;                    Assert.assertTrue( entry.getValue() >= previous );&#xD;&#xA;                }&#xD;&#xA;                previous = entry.getValue();&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Java 7 Version&#xD;&#xA;    &#xD;&#xA;    public static <K, V extends Comparable<? super V>> Map<K, V> &#xD;&#xA;        sortByValue( Map<K, V> map )&#xD;&#xA;    {&#xD;&#xA;        List<Map.Entry<K, V>> list =&#xD;&#xA;            new LinkedList<>( map.entrySet() );&#xD;&#xA;        Collections.sort( list, new Comparator<Map.Entry<K, V>>()&#xD;&#xA;        {&#xD;&#xA;            @Override&#xD;&#xA;            public int compare( Map.Entry<K, V> o1, Map.Entry<K, V> o2 )&#xD;&#xA;            {&#xD;&#xA;                return ( o1.getValue() ).compareTo( o2.getValue() );&#xD;&#xA;            }&#xD;&#xA;        } );&#xD;&#xA;&#xD;&#xA;        Map<K, V> result = new LinkedHashMap<>();&#xD;&#xA;        for (Map.Entry<K, V> entry : list)&#xD;&#xA;        {&#xD;&#xA;            result.put( entry.getKey(), entry.getValue() );&#xD;&#xA;        }&#xD;&#xA;        return result;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Java 8 Version. This will sort according to the value in ascending order; for descending order, it is just possible to uncomment the call to `Collections.reverseOrder()`.&#xD;&#xA;&#xD;&#xA;	public static <K, V extends Comparable<? super V>> Map<K, V> sortByValue(Map<K, V> map) {&#xD;&#xA;		return map.entrySet()&#xD;&#xA;				  .stream()&#xD;&#xA;				  .sorted(Map.Entry.comparingByValue(/*Collections.reverseOrder()*/))&#xD;&#xA;				  .collect(Collectors.toMap(&#xD;&#xA;					Map.Entry::getKey, &#xD;&#xA;					Map.Entry::getValue, &#xD;&#xA;					(e1, e2) -> e1, &#xD;&#xA;					LinkedHashMap::new&#xD;&#xA;				  ));&#xD;&#xA;	}";;deleted 38 characters in body
