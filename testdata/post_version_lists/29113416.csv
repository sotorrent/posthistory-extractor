Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
86079997;29113416;1409512;2;3fa07eb6-63d9-495e-908d-e3d093522614;2015-03-18 03:00:51.0;"The best practice is by creating a model that is separated with persistence layer types as mentioned by [BaulusC][1]. But I found a solution that fit my case, that is by using `java.util.Map` or creating another model for binding with view (I call it binder), but it requires twice of work. You need to put the values from the map or the binder to your actual model.&#xD;&#xA;&#xD;&#xA;1. By using a `java.util.Map`&#xD;&#xA;&#xD;&#xA;This is the sample bean:&#xD;&#xA;&#xD;&#xA;	public class PageBean {&#xD;&#xA;		&#xD;&#xA;		private List<Model> listModel;&#xD;&#xA;        private List<Map> listMap;&#xD;&#xA;&#xD;&#xA;		public String save() {&#xD;&#xA;			// Move the values from listMap to listModel&#xD;&#xA;            listModel = new ArrayList<Model>();&#xD;&#xA;            for (Map map : listMap) {&#xD;&#xA;                Model model = new Model();&#xD;&#xA;                model.setStartDate(new Timestamp(((Date) map.get('startDate')).getTime());&#xD;&#xA;				model.setEndDate(new Timestamp(((Date) map.get('endDate')).getTime());&#xD;&#xA;				listModel.add(model);&#xD;&#xA;            }&#xD;&#xA;			// Process listModel to database ...&#xD;&#xA;			return ""next-page""&#xD;&#xA;		}&#xD;&#xA;		&#xD;&#xA;		public List<Map> getListMap() {&#xD;&#xA;			return listMap;&#xD;&#xA;		}&#xD;&#xA;		&#xD;&#xA;		public void setListMap(List<Map> listMap) {&#xD;&#xA;			this.listMap = listMap;&#xD;&#xA;		}&#xD;&#xA;	}&#xD;&#xA;&#xD;&#xA;in xhtml page we use `listMap` for `<p:dataTable>` value:&#xD;&#xA;&#xD;&#xA;	<p:dataTable value=""#{pageBean.listMap}"" var=""map"" >&#xD;&#xA;		<p:column headerText=""Start Date"">&#xD;&#xA;			<p:calendar value=""#{map.startDate}"" pattern=""dd-MMM-yyyy"" ></p:calendar>&#xD;&#xA;		</p:column>&#xD;&#xA;		<p:column headerText=""End Date"">&#xD;&#xA;			<p:calendar value=""#{map.endDate}"" pattern=""dd-MMM-yyyy"" ></p:calendar>&#xD;&#xA;		</p:column>&#xD;&#xA;	</p:dataTable>&#xD;&#xA;	<p:commandButton value=""Save"" action=""#{pageBean.save()}"" ajax=""false"" />&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;2. By creating another model&#xD;&#xA;&#xD;&#xA;The sample of new model for binding with the view:&#xD;&#xA;&#xD;&#xA;	public class ModelBinder {&#xD;&#xA;		&#xD;&#xA;		private Date startDate;&#xD;&#xA;		private Date endDate;&#xD;&#xA;		&#xD;&#xA;		public Date getStartDate() {&#xD;&#xA;			return startDate;&#xD;&#xA;		}&#xD;&#xA;		&#xD;&#xA;		public void setStartDate(Date startDate) {&#xD;&#xA;			this.startDate = startDate;&#xD;&#xA;		}&#xD;&#xA;		&#xD;&#xA;		public Date getEndDate() {&#xD;&#xA;			return endDate;&#xD;&#xA;		}&#xD;&#xA;		&#xD;&#xA;		public void setEndDate(Date endDate) {&#xD;&#xA;			this.endDate = endDate;&#xD;&#xA;		}&#xD;&#xA;		&#xD;&#xA;	}&#xD;&#xA;&#xD;&#xA;in bean:&#xD;&#xA;&#xD;&#xA;	public class PageBean {&#xD;&#xA;		&#xD;&#xA;		private List<Model> listModel;&#xD;&#xA;        private List<ModelBinder> listModelBinder;&#xD;&#xA;&#xD;&#xA;		public String save() {&#xD;&#xA;			// Move the values from listModelBinder to listModel&#xD;&#xA;            listModel = new ArrayList<Model>();&#xD;&#xA;            for (ModelBinder modelBinder : listModelBinder) {&#xD;&#xA;                Model model = new Model();&#xD;&#xA;                model.setStartDate(new Timestamp(modelBinder.getStartdate().getTime());&#xD;&#xA;				model.setEndDate(new Timestamp(modelBinder.getEndDate().getTime());&#xD;&#xA;				listModel.add(model);&#xD;&#xA;            }&#xD;&#xA;			// Process listModel to database ...&#xD;&#xA;			return ""next-page""&#xD;&#xA;		}&#xD;&#xA;		&#xD;&#xA;		public List<ModelBinder> getListModelBinder() {&#xD;&#xA;			return listModelBinder;&#xD;&#xA;		}&#xD;&#xA;		&#xD;&#xA;		public void setListModelBinder(List<ModelBinder> listModelBinder) {&#xD;&#xA;			this.listModelBinder = listModelBinder;&#xD;&#xA;		}&#xD;&#xA;	}&#xD;&#xA;&#xD;&#xA;in xhtml page we use `listModelBinder` for `<p:dataTable>` value:&#xD;&#xA;&#xD;&#xA;	<p:dataTable value=""#{pageBean.listModelBinder}"" var=""binder"" >&#xD;&#xA;		<p:column headerText=""Start Date"">&#xD;&#xA;			<p:calendar value=""#{binder.startDate}"" pattern=""dd-MMM-yyyy"" ></p:calendar>&#xD;&#xA;		</p:column>&#xD;&#xA;		<p:column headerText=""End Date"">&#xD;&#xA;			<p:calendar value=""#{binder.endDate}"" pattern=""dd-MMM-yyyy"" ></p:calendar>&#xD;&#xA;		</p:column>&#xD;&#xA;	</p:dataTable>&#xD;&#xA;	<p:commandButton value=""Save"" action=""#{pageBean.save()}"" ajax=""false"" />&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;This workaround needs no modification to the actual model, although we need to do other things for moving the values to the actual model. It works well for me. Hope it will be useful.&#xD;&#xA;&#xD;&#xA;  [1]: http://stackoverflow.com/users/157882/balusc";;
86081082;29113416;1409512;5;9c3356c5-4972-4b66-8175-bc4ea2ecec56;2015-03-18 03:20:49.0;"The best practice is by creating a model that is separated with persistence layer types as mentioned by [BaulusC][1]. But I found a solution that fit my case, that is by using `java.util.Map` or creating another model for binding with view (I call it binder), but it requires twice of work. You need to put the values from the map or the binder to your actual model.&#xD;&#xA;&#xD;&#xA;1. By using a `java.util.Map`&#xD;&#xA;&#xD;&#xA;This is the sample bean:&#xD;&#xA;&#xD;&#xA;	public class PageBean {&#xD;&#xA;		&#xD;&#xA;		private List<Model> listModel;&#xD;&#xA;        private List<Map> listMap;&#xD;&#xA;&#xD;&#xA;		public String save() {&#xD;&#xA;			// Move the values from listMap to listModel&#xD;&#xA;            listModel = new ArrayList<Model>();&#xD;&#xA;            for (Map map : listMap) {&#xD;&#xA;                Model model = new Model();&#xD;&#xA;                model.setStartDate(new Timestamp(((Date) map.get(""startDate"")).getTime());&#xD;&#xA;				model.setEndDate(new Timestamp(((Date) map.get(""endDate"")).getTime());&#xD;&#xA;				listModel.add(model);&#xD;&#xA;            }&#xD;&#xA;			// Process listModel to database ...&#xD;&#xA;			return ""next-page""&#xD;&#xA;		}&#xD;&#xA;		&#xD;&#xA;		public List<Map> getListMap() {&#xD;&#xA;			return listMap;&#xD;&#xA;		}&#xD;&#xA;		&#xD;&#xA;		public void setListMap(List<Map> listMap) {&#xD;&#xA;			this.listMap = listMap;&#xD;&#xA;		}&#xD;&#xA;	}&#xD;&#xA;&#xD;&#xA;in xhtml page we use `listMap` for `<p:dataTable>` value:&#xD;&#xA;&#xD;&#xA;	<p:dataTable value=""#{pageBean.listMap}"" var=""map"" >&#xD;&#xA;		<p:column headerText=""Start Date"">&#xD;&#xA;			<p:calendar value=""#{map.startDate}"" pattern=""dd-MMM-yyyy"" ></p:calendar>&#xD;&#xA;		</p:column>&#xD;&#xA;		<p:column headerText=""End Date"">&#xD;&#xA;			<p:calendar value=""#{map.endDate}"" pattern=""dd-MMM-yyyy"" ></p:calendar>&#xD;&#xA;		</p:column>&#xD;&#xA;	</p:dataTable>&#xD;&#xA;	<p:commandButton value=""Save"" action=""#{pageBean.save()}"" ajax=""false"" />&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;2. By creating another model&#xD;&#xA;&#xD;&#xA;The sample of new model for binding with the view:&#xD;&#xA;&#xD;&#xA;	public class ModelBinder {&#xD;&#xA;		&#xD;&#xA;		private Date startDate;&#xD;&#xA;		private Date endDate;&#xD;&#xA;		&#xD;&#xA;		public Date getStartDate() {&#xD;&#xA;			return startDate;&#xD;&#xA;		}&#xD;&#xA;		&#xD;&#xA;		public void setStartDate(Date startDate) {&#xD;&#xA;			this.startDate = startDate;&#xD;&#xA;		}&#xD;&#xA;		&#xD;&#xA;		public Date getEndDate() {&#xD;&#xA;			return endDate;&#xD;&#xA;		}&#xD;&#xA;		&#xD;&#xA;		public void setEndDate(Date endDate) {&#xD;&#xA;			this.endDate = endDate;&#xD;&#xA;		}&#xD;&#xA;		&#xD;&#xA;	}&#xD;&#xA;&#xD;&#xA;in bean:&#xD;&#xA;&#xD;&#xA;	public class PageBean {&#xD;&#xA;		&#xD;&#xA;		private List<Model> listModel;&#xD;&#xA;        private List<ModelBinder> listModelBinder;&#xD;&#xA;&#xD;&#xA;		public String save() {&#xD;&#xA;			// Move the values from listModelBinder to listModel&#xD;&#xA;            listModel = new ArrayList<Model>();&#xD;&#xA;            for (ModelBinder modelBinder : listModelBinder) {&#xD;&#xA;                Model model = new Model();&#xD;&#xA;                model.setStartDate(new Timestamp(modelBinder.getStartdate().getTime());&#xD;&#xA;				model.setEndDate(new Timestamp(modelBinder.getEndDate().getTime());&#xD;&#xA;				listModel.add(model);&#xD;&#xA;            }&#xD;&#xA;			// Process listModel to database ...&#xD;&#xA;			return ""next-page""&#xD;&#xA;		}&#xD;&#xA;		&#xD;&#xA;		public List<ModelBinder> getListModelBinder() {&#xD;&#xA;			return listModelBinder;&#xD;&#xA;		}&#xD;&#xA;		&#xD;&#xA;		public void setListModelBinder(List<ModelBinder> listModelBinder) {&#xD;&#xA;			this.listModelBinder = listModelBinder;&#xD;&#xA;		}&#xD;&#xA;	}&#xD;&#xA;&#xD;&#xA;in xhtml page we use `listModelBinder` for `<p:dataTable>` value:&#xD;&#xA;&#xD;&#xA;	<p:dataTable value=""#{pageBean.listModelBinder}"" var=""binder"" >&#xD;&#xA;		<p:column headerText=""Start Date"">&#xD;&#xA;			<p:calendar value=""#{binder.startDate}"" pattern=""dd-MMM-yyyy"" ></p:calendar>&#xD;&#xA;		</p:column>&#xD;&#xA;		<p:column headerText=""End Date"">&#xD;&#xA;			<p:calendar value=""#{binder.endDate}"" pattern=""dd-MMM-yyyy"" ></p:calendar>&#xD;&#xA;		</p:column>&#xD;&#xA;	</p:dataTable>&#xD;&#xA;	<p:commandButton value=""Save"" action=""#{pageBean.save()}"" ajax=""false"" />&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;This workaround needs no modification to the actual model, although we need to do other things for moving the values to the actual model. It works well for me. Hope it will be useful.&#xD;&#xA;&#xD;&#xA;  [1]: http://stackoverflow.com/users/157882/balusc";;edited body
86430290;29113416;1409512;5;2498e7f6-db84-48c3-a493-3c32db20c9bd;2015-03-23 03:00:49.0;"The best practice is by creating a model that is separated with persistence layer types as mentioned by @BaulusC. But I found a solution (actually a trick) that fit my case, that is by using `java.util.Map` or creating another model for binding with view, but it requires a little more work. You need to put the values from the map or the model mapper to your actual model.&#xD;&#xA;&#xD;&#xA;1. By using a `java.util.Map`&#xD;&#xA;&#xD;&#xA;This is the sample bean:&#xD;&#xA;&#xD;&#xA;	public class PageBean {&#xD;&#xA;		&#xD;&#xA;		private List<Model> listModel;&#xD;&#xA;        private List<Map> listMap;&#xD;&#xA;&#xD;&#xA;		public String save() {&#xD;&#xA;			// Move the values from listMap to listModel&#xD;&#xA;            listModel = new ArrayList<Model>();&#xD;&#xA;            for (Map map : listMap) {&#xD;&#xA;                Model model = new Model();&#xD;&#xA;                model.setStartDate(new Timestamp(((Date) map.get(""startDate"")).getTime());&#xD;&#xA;				model.setEndDate(new Timestamp(((Date) map.get(""endDate"")).getTime());&#xD;&#xA;				listModel.add(model);&#xD;&#xA;            }&#xD;&#xA;			// Process listModel to database ...&#xD;&#xA;			return ""next-page""&#xD;&#xA;		}&#xD;&#xA;		&#xD;&#xA;		public List<Map> getListMap() {&#xD;&#xA;			return listMap;&#xD;&#xA;		}&#xD;&#xA;		&#xD;&#xA;		public void setListMap(List<Map> listMap) {&#xD;&#xA;			this.listMap = listMap;&#xD;&#xA;		}&#xD;&#xA;	}&#xD;&#xA;&#xD;&#xA;in xhtml page we use `listMap` for `<p:dataTable>` value:&#xD;&#xA;&#xD;&#xA;	<p:dataTable value=""#{pageBean.listMap}"" var=""map"" >&#xD;&#xA;		<p:column headerText=""Start Date"">&#xD;&#xA;			<p:calendar value=""#{map.startDate}"" pattern=""dd-MMM-yyyy"" ></p:calendar>&#xD;&#xA;		</p:column>&#xD;&#xA;		<p:column headerText=""End Date"">&#xD;&#xA;			<p:calendar value=""#{map.endDate}"" pattern=""dd-MMM-yyyy"" ></p:calendar>&#xD;&#xA;		</p:column>&#xD;&#xA;	</p:dataTable>&#xD;&#xA;	<p:commandButton value=""Save"" action=""#{pageBean.save()}"" ajax=""false"" />&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;2. By creating another model&#xD;&#xA;&#xD;&#xA;The sample of new model for binding with the view:&#xD;&#xA;&#xD;&#xA;	public class ModelMapper {&#xD;&#xA;		&#xD;&#xA;		private Date startDate;&#xD;&#xA;		private Date endDate;&#xD;&#xA;		&#xD;&#xA;		public Date getStartDate() {&#xD;&#xA;			return startDate;&#xD;&#xA;		}&#xD;&#xA;		&#xD;&#xA;		public void setStartDate(Date startDate) {&#xD;&#xA;			this.startDate = startDate;&#xD;&#xA;		}&#xD;&#xA;		&#xD;&#xA;		public Date getEndDate() {&#xD;&#xA;			return endDate;&#xD;&#xA;		}&#xD;&#xA;		&#xD;&#xA;		public void setEndDate(Date endDate) {&#xD;&#xA;			this.endDate = endDate;&#xD;&#xA;		}&#xD;&#xA;		&#xD;&#xA;	}&#xD;&#xA;&#xD;&#xA;in bean:&#xD;&#xA;&#xD;&#xA;	public class PageBean {&#xD;&#xA;		&#xD;&#xA;		private List<Model> listModel;&#xD;&#xA;        private List<ModelMapper> listModelMapper;&#xD;&#xA;&#xD;&#xA;		public String save() {&#xD;&#xA;			// Move the values from listModelMapper to listModel&#xD;&#xA;            listModel = new ArrayList<Model>();&#xD;&#xA;            for (ModelMapper modelMapper : listModelBinder) {&#xD;&#xA;                Model model = new Model();&#xD;&#xA;                model.setStartDate(new Timestamp(modelMapper.getStartdate().getTime());&#xD;&#xA;				model.setEndDate(new Timestamp(modelMapper.getEndDate().getTime());&#xD;&#xA;				listModel.add(model);&#xD;&#xA;            }&#xD;&#xA;			// Process listModel to database ...&#xD;&#xA;			return ""next-page""&#xD;&#xA;		}&#xD;&#xA;		&#xD;&#xA;		public List<ModelMapper> getListModelMapper() {&#xD;&#xA;			return listModelMapper;&#xD;&#xA;		}&#xD;&#xA;		&#xD;&#xA;		public void setListModelMapper(List<ModelMapper> listModelMapper) {&#xD;&#xA;			this.listModelMapper = listModelMapper;&#xD;&#xA;		}&#xD;&#xA;	}&#xD;&#xA;&#xD;&#xA;in xhtml page we use `listModelMapper` for `<p:dataTable>` value:&#xD;&#xA;&#xD;&#xA;	<p:dataTable value=""#{pageBean.listModelMapper}"" var=""mapper"" >&#xD;&#xA;		<p:column headerText=""Start Date"">&#xD;&#xA;			<p:calendar value=""#{mapper.startDate}"" pattern=""dd-MMM-yyyy"" ></p:calendar>&#xD;&#xA;		</p:column>&#xD;&#xA;		<p:column headerText=""End Date"">&#xD;&#xA;			<p:calendar value=""#{mapper.endDate}"" pattern=""dd-MMM-yyyy"" ></p:calendar>&#xD;&#xA;		</p:column>&#xD;&#xA;	</p:dataTable>&#xD;&#xA;	<p:commandButton value=""Save"" action=""#{pageBean.save()}"" ajax=""false"" />&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;This workaround needs no modification to the actual model, although we need to do other things for moving the values to the actual model. It works well for me. Hope it will be useful.&#xD;&#xA;";;deleted 46 characters in body
