Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
6514576;3145655;95313;2;e5de1855-4d64-4dd5-a290-56f9c611a23c;2010-06-30 00:07:52;"Here's what I do:&#xD;&#xA;&#xD;&#xA;1. First of all I check what providers are enabled. Some may be disabled on the device, some may be disabled in application manifest.&#xD;&#xA;2. If any provider is available I start location listeners and timeout timer. It's 20 seconds in my example, may not be enough for GPS so you can enlarge it.&#xD;&#xA;3. If I get update from location listener I use the provided value. I stop listeners and timer.&#xD;&#xA;4. If I don't get any updates and timer elapses I have to use last known values.&#xD;&#xA;5. I grab last known values from available providers and choose the most recent of them.&#xD;&#xA;&#xD;&#xA;Somebody may want to modify my logic. For example if you get update from Network provider don't stop listeners but continue waiting. GPS gives more accurate data so it's worth waiting for it. If timer elapses and you've got update from Network but not from GPS then you can use value profided from Network.&#xD;&#xA;&#xD;&#xA;Here's how I use my class:&#xD;&#xA;&#xD;&#xA;    MyLocation myLocation = new MyLocation();&#xD;&#xA;    private void locationClick() {&#xD;&#xA;    	myLocation.getLocation(this, locationResult));&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    public LocationResult locationResult = new LocationResult(){&#xD;&#xA;    	@Override&#xD;&#xA;    	public void gotLocation(final Location location){&#xD;&#xA;    		//Got the location!&#xD;&#xA;    		});&#xD;&#xA;    	}&#xD;&#xA;    };&#xD;&#xA;&#xD;&#xA;And here's MyLocation class:&#xD;&#xA;&#xD;&#xA;    import java.util.Timer;&#xD;&#xA;    import java.util.TimerTask;&#xD;&#xA;    import android.content.Context;&#xD;&#xA;    import android.location.Location;&#xD;&#xA;    import android.location.LocationListener;&#xD;&#xA;    import android.location.LocationManager;&#xD;&#xA;    import android.os.Bundle;&#xD;&#xA;    &#xD;&#xA;    public class MyLocation {&#xD;&#xA;        Timer timer1;&#xD;&#xA;        LocationManager lm;&#xD;&#xA;        LocationResult locationResult;&#xD;&#xA;        boolean gps_enabled=false;&#xD;&#xA;        boolean network_enabled=false;&#xD;&#xA;        &#xD;&#xA;        public boolean getLocation(Context context, LocationResult result)&#xD;&#xA;        {&#xD;&#xA;    		//I use LocationResult callback class to pass location value from MyLocation to user code.&#xD;&#xA;            locationResult=result;&#xD;&#xA;            if(lm==null)&#xD;&#xA;                lm = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);&#xD;&#xA;            &#xD;&#xA;            //exceptions will be thrown if provider is not permitted.&#xD;&#xA;            try{gps_enabled=lm.isProviderEnabled(LocationManager.GPS_PROVIDER);}catch(Exception ex){}&#xD;&#xA;            try{network_enabled=lm.isProviderEnabled(LocationManager.NETWORK_PROVIDER);}catch(Exception ex){}&#xD;&#xA;            &#xD;&#xA;            //don't start listeners if no provider is enabled&#xD;&#xA;            if(!gps_enabled && !network_enabled)&#xD;&#xA;                return false;&#xD;&#xA;    &#xD;&#xA;            if(gps_enabled)&#xD;&#xA;                lm.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0, locationListenerGps);&#xD;&#xA;            if(network_enabled)&#xD;&#xA;                lm.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 0, 0, locationListenerNetwork);&#xD;&#xA;            timer1=new Timer();&#xD;&#xA;            timer1.schedule(new GetLastLocation(), 20000);&#xD;&#xA;            return true;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        LocationListener locationListenerGps = new LocationListener() {&#xD;&#xA;            public void onLocationChanged(Location location) {&#xD;&#xA;                timer1.cancel();&#xD;&#xA;                locationResult.gotLocation(location);&#xD;&#xA;                lm.removeUpdates(this);&#xD;&#xA;                lm.removeUpdates(locationListenerNetwork);&#xD;&#xA;            }&#xD;&#xA;            public void onProviderDisabled(String provider) {}&#xD;&#xA;            public void onProviderEnabled(String provider) {}&#xD;&#xA;            public void onStatusChanged(String provider, int status, Bundle extras) {}&#xD;&#xA;        };&#xD;&#xA;        &#xD;&#xA;        LocationListener locationListenerNetwork = new LocationListener() {&#xD;&#xA;            public void onLocationChanged(Location location) {&#xD;&#xA;                timer1.cancel();&#xD;&#xA;                locationResult.gotLocation(location);&#xD;&#xA;                lm.removeUpdates(this);&#xD;&#xA;                lm.removeUpdates(locationListenerGps);&#xD;&#xA;            }&#xD;&#xA;            public void onProviderDisabled(String provider) {}&#xD;&#xA;            public void onProviderEnabled(String provider) {}&#xD;&#xA;            public void onStatusChanged(String provider, int status, Bundle extras) {}&#xD;&#xA;        };&#xD;&#xA;        &#xD;&#xA;        class GetLastLocation extends TimerTask {&#xD;&#xA;            @Override&#xD;&#xA;            public void run() {&#xD;&#xA;                 lm.removeUpdates(locationListenerGps);&#xD;&#xA;                 lm.removeUpdates(locationListenerNetwork);&#xD;&#xA;                 &#xD;&#xA;                 Location net_loc=null, gps_loc=null;&#xD;&#xA;                 if(gps_enabled)&#xD;&#xA;                     gps_loc=lm.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);&#xD;&#xA;                 if(network_enabled)&#xD;&#xA;                     net_loc=lm.getLastKnownLocation(LocationManager.GPS_PROVIDER);&#xD;&#xA;                 &#xD;&#xA;                 //if there are both values use the latest one&#xD;&#xA;                 if(gps_loc!=null && net_loc!=null){&#xD;&#xA;                     if(gps_loc.getTime()>net_loc.getTime())&#xD;&#xA;                         locationResult.gotLocation(gps_loc);&#xD;&#xA;                     else&#xD;&#xA;                         locationResult.gotLocation(net_loc);&#xD;&#xA;                     return;&#xD;&#xA;                 }&#xD;&#xA;                 &#xD;&#xA;                 if(gps_loc!=null){&#xD;&#xA;                     locationResult.gotLocation(gps_loc);&#xD;&#xA;                     return;&#xD;&#xA;                 }&#xD;&#xA;                 if(net_loc!=null){&#xD;&#xA;                     locationResult.gotLocation(net_loc);&#xD;&#xA;                     return;&#xD;&#xA;                 }&#xD;&#xA;                 locationResult.gotLocation(null);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        public static abstract class LocationResult{&#xD;&#xA;            public abstract void gotLocation(Location location);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;";;
6514721;3145655;95313;5;db662b32-7de1-40df-852a-4ffe70b4dd1e;2010-06-30 00:27:10;"Here's what I do:&#xD;&#xA;&#xD;&#xA;1. First of all I check what providers are enabled. Some may be disabled on the device, some may be disabled in application manifest.&#xD;&#xA;2. If any provider is available I start location listeners and timeout timer. It's 20 seconds in my example, may not be enough for GPS so you can enlarge it.&#xD;&#xA;3. If I get update from location listener I use the provided value. I stop listeners and timer.&#xD;&#xA;4. If I don't get any updates and timer elapses I have to use last known values.&#xD;&#xA;5. I grab last known values from available providers and choose the most recent of them.&#xD;&#xA;&#xD;&#xA;Here's how I use my class:&#xD;&#xA;&#xD;&#xA;    MyLocation myLocation = new MyLocation();&#xD;&#xA;    private void locationClick() {&#xD;&#xA;    	myLocation.getLocation(this, locationResult));&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    public LocationResult locationResult = new LocationResult(){&#xD;&#xA;    	@Override&#xD;&#xA;    	public void gotLocation(final Location location){&#xD;&#xA;    		//Got the location!&#xD;&#xA;    		});&#xD;&#xA;    	}&#xD;&#xA;    };&#xD;&#xA;&#xD;&#xA;And here's MyLocation class:&#xD;&#xA;&#xD;&#xA;    import java.util.Timer;&#xD;&#xA;    import java.util.TimerTask;&#xD;&#xA;    import android.content.Context;&#xD;&#xA;    import android.location.Location;&#xD;&#xA;    import android.location.LocationListener;&#xD;&#xA;    import android.location.LocationManager;&#xD;&#xA;    import android.os.Bundle;&#xD;&#xA;    &#xD;&#xA;    public class MyLocation {&#xD;&#xA;        Timer timer1;&#xD;&#xA;        LocationManager lm;&#xD;&#xA;        LocationResult locationResult;&#xD;&#xA;        boolean gps_enabled=false;&#xD;&#xA;        boolean network_enabled=false;&#xD;&#xA;        &#xD;&#xA;        public boolean getLocation(Context context, LocationResult result)&#xD;&#xA;        {&#xD;&#xA;    		//I use LocationResult callback class to pass location value from MyLocation to user code.&#xD;&#xA;            locationResult=result;&#xD;&#xA;            if(lm==null)&#xD;&#xA;                lm = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);&#xD;&#xA;            &#xD;&#xA;            //exceptions will be thrown if provider is not permitted.&#xD;&#xA;            try{gps_enabled=lm.isProviderEnabled(LocationManager.GPS_PROVIDER);}catch(Exception ex){}&#xD;&#xA;            try{network_enabled=lm.isProviderEnabled(LocationManager.NETWORK_PROVIDER);}catch(Exception ex){}&#xD;&#xA;            &#xD;&#xA;            //don't start listeners if no provider is enabled&#xD;&#xA;            if(!gps_enabled && !network_enabled)&#xD;&#xA;                return false;&#xD;&#xA;    &#xD;&#xA;            if(gps_enabled)&#xD;&#xA;                lm.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0, locationListenerGps);&#xD;&#xA;            if(network_enabled)&#xD;&#xA;                lm.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 0, 0, locationListenerNetwork);&#xD;&#xA;            timer1=new Timer();&#xD;&#xA;            timer1.schedule(new GetLastLocation(), 20000);&#xD;&#xA;            return true;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        LocationListener locationListenerGps = new LocationListener() {&#xD;&#xA;            public void onLocationChanged(Location location) {&#xD;&#xA;                timer1.cancel();&#xD;&#xA;                locationResult.gotLocation(location);&#xD;&#xA;                lm.removeUpdates(this);&#xD;&#xA;                lm.removeUpdates(locationListenerNetwork);&#xD;&#xA;            }&#xD;&#xA;            public void onProviderDisabled(String provider) {}&#xD;&#xA;            public void onProviderEnabled(String provider) {}&#xD;&#xA;            public void onStatusChanged(String provider, int status, Bundle extras) {}&#xD;&#xA;        };&#xD;&#xA;        &#xD;&#xA;        LocationListener locationListenerNetwork = new LocationListener() {&#xD;&#xA;            public void onLocationChanged(Location location) {&#xD;&#xA;                timer1.cancel();&#xD;&#xA;                locationResult.gotLocation(location);&#xD;&#xA;                lm.removeUpdates(this);&#xD;&#xA;                lm.removeUpdates(locationListenerGps);&#xD;&#xA;            }&#xD;&#xA;            public void onProviderDisabled(String provider) {}&#xD;&#xA;            public void onProviderEnabled(String provider) {}&#xD;&#xA;            public void onStatusChanged(String provider, int status, Bundle extras) {}&#xD;&#xA;        };&#xD;&#xA;        &#xD;&#xA;        class GetLastLocation extends TimerTask {&#xD;&#xA;            @Override&#xD;&#xA;            public void run() {&#xD;&#xA;                 lm.removeUpdates(locationListenerGps);&#xD;&#xA;                 lm.removeUpdates(locationListenerNetwork);&#xD;&#xA;                 &#xD;&#xA;                 Location net_loc=null, gps_loc=null;&#xD;&#xA;                 if(gps_enabled)&#xD;&#xA;                     gps_loc=lm.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);&#xD;&#xA;                 if(network_enabled)&#xD;&#xA;                     net_loc=lm.getLastKnownLocation(LocationManager.GPS_PROVIDER);&#xD;&#xA;                 &#xD;&#xA;                 //if there are both values use the latest one&#xD;&#xA;                 if(gps_loc!=null && net_loc!=null){&#xD;&#xA;                     if(gps_loc.getTime()>net_loc.getTime())&#xD;&#xA;                         locationResult.gotLocation(gps_loc);&#xD;&#xA;                     else&#xD;&#xA;                         locationResult.gotLocation(net_loc);&#xD;&#xA;                     return;&#xD;&#xA;                 }&#xD;&#xA;                 &#xD;&#xA;                 if(gps_loc!=null){&#xD;&#xA;                     locationResult.gotLocation(gps_loc);&#xD;&#xA;                     return;&#xD;&#xA;                 }&#xD;&#xA;                 if(net_loc!=null){&#xD;&#xA;                     locationResult.gotLocation(net_loc);&#xD;&#xA;                     return;&#xD;&#xA;                 }&#xD;&#xA;                 locationResult.gotLocation(null);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        public static abstract class LocationResult{&#xD;&#xA;            public abstract void gotLocation(Location location);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Somebody may also want to modify my logic. For example if you get update from Network provider don't stop listeners but continue waiting. GPS gives more accurate data so it's worth waiting for it. If timer elapses and you've got update from Network but not from GPS then you can use value profided from Network.";;added 5 characters in body
6942029;3145655;95313;5;c3facdfe-eaee-42a6-a976-42afc31f2a41;2010-07-26 23:11:35;"Here's what I do:&#xD;&#xA;&#xD;&#xA;1. First of all I check what providers are enabled. Some may be disabled on the device, some may be disabled in application manifest.&#xD;&#xA;2. If any provider is available I start location listeners and timeout timer. It's 20 seconds in my example, may not be enough for GPS so you can enlarge it.&#xD;&#xA;3. If I get update from location listener I use the provided value. I stop listeners and timer.&#xD;&#xA;4. If I don't get any updates and timer elapses I have to use last known values.&#xD;&#xA;5. I grab last known values from available providers and choose the most recent of them.&#xD;&#xA;&#xD;&#xA;Here's how I use my class:&#xD;&#xA;&#xD;&#xA;    MyLocation myLocation = new MyLocation();&#xD;&#xA;    private void locationClick() {&#xD;&#xA;    	myLocation.getLocation(this, locationResult));&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    public LocationResult locationResult = new LocationResult(){&#xD;&#xA;    	@Override&#xD;&#xA;    	public void gotLocation(final Location location){&#xD;&#xA;    		//Got the location!&#xD;&#xA;    		});&#xD;&#xA;    	}&#xD;&#xA;    };&#xD;&#xA;&#xD;&#xA;And here's MyLocation class:&#xD;&#xA;&#xD;&#xA;    import java.util.Timer;&#xD;&#xA;    import java.util.TimerTask;&#xD;&#xA;    import android.content.Context;&#xD;&#xA;    import android.location.Location;&#xD;&#xA;    import android.location.LocationListener;&#xD;&#xA;    import android.location.LocationManager;&#xD;&#xA;    import android.os.Bundle;&#xD;&#xA;    &#xD;&#xA;    public class MyLocation {&#xD;&#xA;        Timer timer1;&#xD;&#xA;        LocationManager lm;&#xD;&#xA;        LocationResult locationResult;&#xD;&#xA;        boolean gps_enabled=false;&#xD;&#xA;        boolean network_enabled=false;&#xD;&#xA;        &#xD;&#xA;        public boolean getLocation(Context context, LocationResult result)&#xD;&#xA;        {&#xD;&#xA;    		//I use LocationResult callback class to pass location value from MyLocation to user code.&#xD;&#xA;            locationResult=result;&#xD;&#xA;            if(lm==null)&#xD;&#xA;                lm = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);&#xD;&#xA;            &#xD;&#xA;            //exceptions will be thrown if provider is not permitted.&#xD;&#xA;            try{gps_enabled=lm.isProviderEnabled(LocationManager.GPS_PROVIDER);}catch(Exception ex){}&#xD;&#xA;            try{network_enabled=lm.isProviderEnabled(LocationManager.NETWORK_PROVIDER);}catch(Exception ex){}&#xD;&#xA;            &#xD;&#xA;            //don't start listeners if no provider is enabled&#xD;&#xA;            if(!gps_enabled && !network_enabled)&#xD;&#xA;                return false;&#xD;&#xA;    &#xD;&#xA;            if(gps_enabled)&#xD;&#xA;                lm.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0, locationListenerGps);&#xD;&#xA;            if(network_enabled)&#xD;&#xA;                lm.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 0, 0, locationListenerNetwork);&#xD;&#xA;            timer1=new Timer();&#xD;&#xA;            timer1.schedule(new GetLastLocation(), 20000);&#xD;&#xA;            return true;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        LocationListener locationListenerGps = new LocationListener() {&#xD;&#xA;            public void onLocationChanged(Location location) {&#xD;&#xA;                timer1.cancel();&#xD;&#xA;                locationResult.gotLocation(location);&#xD;&#xA;                lm.removeUpdates(this);&#xD;&#xA;                lm.removeUpdates(locationListenerNetwork);&#xD;&#xA;            }&#xD;&#xA;            public void onProviderDisabled(String provider) {}&#xD;&#xA;            public void onProviderEnabled(String provider) {}&#xD;&#xA;            public void onStatusChanged(String provider, int status, Bundle extras) {}&#xD;&#xA;        };&#xD;&#xA;        &#xD;&#xA;        LocationListener locationListenerNetwork = new LocationListener() {&#xD;&#xA;            public void onLocationChanged(Location location) {&#xD;&#xA;                timer1.cancel();&#xD;&#xA;                locationResult.gotLocation(location);&#xD;&#xA;                lm.removeUpdates(this);&#xD;&#xA;                lm.removeUpdates(locationListenerGps);&#xD;&#xA;            }&#xD;&#xA;            public void onProviderDisabled(String provider) {}&#xD;&#xA;            public void onProviderEnabled(String provider) {}&#xD;&#xA;            public void onStatusChanged(String provider, int status, Bundle extras) {}&#xD;&#xA;        };&#xD;&#xA;        &#xD;&#xA;        class GetLastLocation extends TimerTask {&#xD;&#xA;            @Override&#xD;&#xA;            public void run() {&#xD;&#xA;                 lm.removeUpdates(locationListenerGps);&#xD;&#xA;                 lm.removeUpdates(locationListenerNetwork);&#xD;&#xA;                 &#xD;&#xA;                 Location net_loc=null, gps_loc=null;&#xD;&#xA;                 if(gps_enabled)&#xD;&#xA;                     gps_loc=lm.getLastKnownLocation(LocationManager.GPS_PROVIDER);&#xD;&#xA;                 if(network_enabled)&#xD;&#xA;                     net_loc=lm.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);&#xD;&#xA;                 &#xD;&#xA;                 //if there are both values use the latest one&#xD;&#xA;                 if(gps_loc!=null && net_loc!=null){&#xD;&#xA;                     if(gps_loc.getTime()>net_loc.getTime())&#xD;&#xA;                         locationResult.gotLocation(gps_loc);&#xD;&#xA;                     else&#xD;&#xA;                         locationResult.gotLocation(net_loc);&#xD;&#xA;                     return;&#xD;&#xA;                 }&#xD;&#xA;                 &#xD;&#xA;                 if(gps_loc!=null){&#xD;&#xA;                     locationResult.gotLocation(gps_loc);&#xD;&#xA;                     return;&#xD;&#xA;                 }&#xD;&#xA;                 if(net_loc!=null){&#xD;&#xA;                     locationResult.gotLocation(net_loc);&#xD;&#xA;                     return;&#xD;&#xA;                 }&#xD;&#xA;                 locationResult.gotLocation(null);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        public static abstract class LocationResult{&#xD;&#xA;            public abstract void gotLocation(Location location);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Somebody may also want to modify my logic. For example if you get update from Network provider don't stop listeners but continue waiting. GPS gives more accurate data so it's worth waiting for it. If timer elapses and you've got update from Network but not from GPS then you can use value profided from Network.";;edited body
9043650;3145655;95313;5;88db7e89-9700-4995-ba7e-6072c03d8a64;2010-11-27 12:34:14;"Here's what I do:&#xD;&#xA;&#xD;&#xA;1. First of all I check what providers are enabled. Some may be disabled on the device, some may be disabled in application manifest.&#xD;&#xA;2. If any provider is available I start location listeners and timeout timer. It's 20 seconds in my example, may not be enough for GPS so you can enlarge it.&#xD;&#xA;3. If I get update from location listener I use the provided value. I stop listeners and timer.&#xD;&#xA;4. If I don't get any updates and timer elapses I have to use last known values.&#xD;&#xA;5. I grab last known values from available providers and choose the most recent of them.&#xD;&#xA;&#xD;&#xA;Here's how I use my class:&#xD;&#xA;&#xD;&#xA;    MyLocation myLocation = new MyLocation();&#xD;&#xA;    private void locationClick() {&#xD;&#xA;    	myLocation.getLocation(this, locationResult));&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    public LocationResult locationResult = new LocationResult(){&#xD;&#xA;    	@Override&#xD;&#xA;    	public void gotLocation(final Location location){&#xD;&#xA;    		//Got the location!&#xD;&#xA;    		});&#xD;&#xA;    	}&#xD;&#xA;    };&#xD;&#xA;&#xD;&#xA;And here's MyLocation class:&#xD;&#xA;&#xD;&#xA;    import java.util.Timer;&#xD;&#xA;    import java.util.TimerTask;&#xD;&#xA;    import android.content.Context;&#xD;&#xA;    import android.location.Location;&#xD;&#xA;    import android.location.LocationListener;&#xD;&#xA;    import android.location.LocationManager;&#xD;&#xA;    import android.os.Bundle;&#xD;&#xA;    &#xD;&#xA;    public class MyLocation {&#xD;&#xA;        Timer timer1;&#xD;&#xA;        LocationManager lm;&#xD;&#xA;        LocationResult locationResult;&#xD;&#xA;        boolean gps_enabled=false;&#xD;&#xA;        boolean network_enabled=false;&#xD;&#xA;        &#xD;&#xA;        public boolean getLocation(Context context, LocationResult result)&#xD;&#xA;        {&#xD;&#xA;    		//I use LocationResult callback class to pass location value from MyLocation to user code.&#xD;&#xA;            locationResult=result;&#xD;&#xA;            if(lm==null)&#xD;&#xA;                lm = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);&#xD;&#xA;            &#xD;&#xA;            //exceptions will be thrown if provider is not permitted.&#xD;&#xA;            try{gps_enabled=lm.isProviderEnabled(LocationManager.GPS_PROVIDER);}catch(Exception ex){}&#xD;&#xA;            try{network_enabled=lm.isProviderEnabled(LocationManager.NETWORK_PROVIDER);}catch(Exception ex){}&#xD;&#xA;            &#xD;&#xA;            //don't start listeners if no provider is enabled&#xD;&#xA;            if(!gps_enabled && !network_enabled)&#xD;&#xA;                return false;&#xD;&#xA;    &#xD;&#xA;            if(gps_enabled)&#xD;&#xA;                lm.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0, locationListenerGps);&#xD;&#xA;            if(network_enabled)&#xD;&#xA;                lm.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 0, 0, locationListenerNetwork);&#xD;&#xA;            timer1=new Timer();&#xD;&#xA;            timer1.schedule(new GetLastLocation(), 20000);&#xD;&#xA;            return true;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        LocationListener locationListenerGps = new LocationListener() {&#xD;&#xA;            public void onLocationChanged(Location location) {&#xD;&#xA;                timer1.cancel();&#xD;&#xA;                locationResult.gotLocation(location);&#xD;&#xA;                lm.removeUpdates(this);&#xD;&#xA;                lm.removeUpdates(locationListenerNetwork);&#xD;&#xA;            }&#xD;&#xA;            public void onProviderDisabled(String provider) {}&#xD;&#xA;            public void onProviderEnabled(String provider) {}&#xD;&#xA;            public void onStatusChanged(String provider, int status, Bundle extras) {}&#xD;&#xA;        };&#xD;&#xA;        &#xD;&#xA;        LocationListener locationListenerNetwork = new LocationListener() {&#xD;&#xA;            public void onLocationChanged(Location location) {&#xD;&#xA;                timer1.cancel();&#xD;&#xA;                locationResult.gotLocation(location);&#xD;&#xA;                lm.removeUpdates(this);&#xD;&#xA;                lm.removeUpdates(locationListenerGps);&#xD;&#xA;            }&#xD;&#xA;            public void onProviderDisabled(String provider) {}&#xD;&#xA;            public void onProviderEnabled(String provider) {}&#xD;&#xA;            public void onStatusChanged(String provider, int status, Bundle extras) {}&#xD;&#xA;        };&#xD;&#xA;        &#xD;&#xA;        class GetLastLocation extends TimerTask {&#xD;&#xA;            @Override&#xD;&#xA;            public void run() {&#xD;&#xA;                 lm.removeUpdates(locationListenerGps);&#xD;&#xA;                 lm.removeUpdates(locationListenerNetwork);&#xD;&#xA;                 &#xD;&#xA;                 Location net_loc=null, gps_loc=null;&#xD;&#xA;                 if(gps_enabled)&#xD;&#xA;                     gps_loc=lm.getLastKnownLocation(LocationManager.GPS_PROVIDER);&#xD;&#xA;                 if(network_enabled)&#xD;&#xA;                     net_loc=lm.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);&#xD;&#xA;                 &#xD;&#xA;                 //if there are both values use the latest one&#xD;&#xA;                 if(gps_loc!=null && net_loc!=null){&#xD;&#xA;                     if(gps_loc.getTime()>net_loc.getTime())&#xD;&#xA;                         locationResult.gotLocation(gps_loc);&#xD;&#xA;                     else&#xD;&#xA;                         locationResult.gotLocation(net_loc);&#xD;&#xA;                     return;&#xD;&#xA;                 }&#xD;&#xA;                 &#xD;&#xA;                 if(gps_loc!=null){&#xD;&#xA;                     locationResult.gotLocation(gps_loc);&#xD;&#xA;                     return;&#xD;&#xA;                 }&#xD;&#xA;                 if(net_loc!=null){&#xD;&#xA;                     locationResult.gotLocation(net_loc);&#xD;&#xA;                     return;&#xD;&#xA;                 }&#xD;&#xA;                 locationResult.gotLocation(null);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        public static abstract class LocationResult{&#xD;&#xA;            public abstract void gotLocation(Location location);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Somebody may also want to modify my logic. For example if you get update from Network provider don't stop listeners but continue waiting. GPS gives more accurate data so it's worth waiting for it. If timer elapses and you've got update from Network but not from GPS then you can use value provided from Network.";;edited body
20947168;3145655;244296;5;2f536558-4492-46f9-bed5-b5be0b639c17;2012-02-10 19:31:05;"Here's what I do:&#xD;&#xA;&#xD;&#xA;1. First of all I check what providers are enabled. Some may be disabled on the device, some may be disabled in application manifest.&#xD;&#xA;2. If any provider is available I start location listeners and timeout timer. It's 20 seconds in my example, may not be enough for GPS so you can enlarge it.&#xD;&#xA;3. If I get update from location listener I use the provided value. I stop listeners and timer.&#xD;&#xA;4. If I don't get any updates and timer elapses I have to use last known values.&#xD;&#xA;5. I grab last known values from available providers and choose the most recent of them.&#xD;&#xA;&#xD;&#xA;Here's how I use my class:&#xD;&#xA;&#xD;&#xA;    MyLocation myLocation = new MyLocation();&#xD;&#xA;    private void locationClick() {&#xD;&#xA;    	myLocation.getLocation(this, locationResult);&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    public LocationResult locationResult = new LocationResult(){&#xD;&#xA;    	@Override&#xD;&#xA;    	public void gotLocation(final Location location){&#xD;&#xA;    		//Got the location!&#xD;&#xA;    	}&#xD;&#xA;    };&#xD;&#xA;&#xD;&#xA;And here's MyLocation class:&#xD;&#xA;&#xD;&#xA;    import java.util.Timer;&#xD;&#xA;    import java.util.TimerTask;&#xD;&#xA;    import android.content.Context;&#xD;&#xA;    import android.location.Location;&#xD;&#xA;    import android.location.LocationListener;&#xD;&#xA;    import android.location.LocationManager;&#xD;&#xA;    import android.os.Bundle;&#xD;&#xA;    &#xD;&#xA;    public class MyLocation {&#xD;&#xA;        Timer timer1;&#xD;&#xA;        LocationManager lm;&#xD;&#xA;        LocationResult locationResult;&#xD;&#xA;        boolean gps_enabled=false;&#xD;&#xA;        boolean network_enabled=false;&#xD;&#xA;        &#xD;&#xA;        public boolean getLocation(Context context, LocationResult result)&#xD;&#xA;        {&#xD;&#xA;    		//I use LocationResult callback class to pass location value from MyLocation to user code.&#xD;&#xA;            locationResult=result;&#xD;&#xA;            if(lm==null)&#xD;&#xA;                lm = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);&#xD;&#xA;            &#xD;&#xA;            //exceptions will be thrown if provider is not permitted.&#xD;&#xA;            try{gps_enabled=lm.isProviderEnabled(LocationManager.GPS_PROVIDER);}catch(Exception ex){}&#xD;&#xA;            try{network_enabled=lm.isProviderEnabled(LocationManager.NETWORK_PROVIDER);}catch(Exception ex){}&#xD;&#xA;            &#xD;&#xA;            //don't start listeners if no provider is enabled&#xD;&#xA;            if(!gps_enabled && !network_enabled)&#xD;&#xA;                return false;&#xD;&#xA;    &#xD;&#xA;            if(gps_enabled)&#xD;&#xA;                lm.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0, locationListenerGps);&#xD;&#xA;            if(network_enabled)&#xD;&#xA;                lm.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 0, 0, locationListenerNetwork);&#xD;&#xA;            timer1=new Timer();&#xD;&#xA;            timer1.schedule(new GetLastLocation(), 20000);&#xD;&#xA;            return true;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        LocationListener locationListenerGps = new LocationListener() {&#xD;&#xA;            public void onLocationChanged(Location location) {&#xD;&#xA;                timer1.cancel();&#xD;&#xA;                locationResult.gotLocation(location);&#xD;&#xA;                lm.removeUpdates(this);&#xD;&#xA;                lm.removeUpdates(locationListenerNetwork);&#xD;&#xA;            }&#xD;&#xA;            public void onProviderDisabled(String provider) {}&#xD;&#xA;            public void onProviderEnabled(String provider) {}&#xD;&#xA;            public void onStatusChanged(String provider, int status, Bundle extras) {}&#xD;&#xA;        };&#xD;&#xA;        &#xD;&#xA;        LocationListener locationListenerNetwork = new LocationListener() {&#xD;&#xA;            public void onLocationChanged(Location location) {&#xD;&#xA;                timer1.cancel();&#xD;&#xA;                locationResult.gotLocation(location);&#xD;&#xA;                lm.removeUpdates(this);&#xD;&#xA;                lm.removeUpdates(locationListenerGps);&#xD;&#xA;            }&#xD;&#xA;            public void onProviderDisabled(String provider) {}&#xD;&#xA;            public void onProviderEnabled(String provider) {}&#xD;&#xA;            public void onStatusChanged(String provider, int status, Bundle extras) {}&#xD;&#xA;        };&#xD;&#xA;        &#xD;&#xA;        class GetLastLocation extends TimerTask {&#xD;&#xA;            @Override&#xD;&#xA;            public void run() {&#xD;&#xA;                 lm.removeUpdates(locationListenerGps);&#xD;&#xA;                 lm.removeUpdates(locationListenerNetwork);&#xD;&#xA;                 &#xD;&#xA;                 Location net_loc=null, gps_loc=null;&#xD;&#xA;                 if(gps_enabled)&#xD;&#xA;                     gps_loc=lm.getLastKnownLocation(LocationManager.GPS_PROVIDER);&#xD;&#xA;                 if(network_enabled)&#xD;&#xA;                     net_loc=lm.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);&#xD;&#xA;                 &#xD;&#xA;                 //if there are both values use the latest one&#xD;&#xA;                 if(gps_loc!=null && net_loc!=null){&#xD;&#xA;                     if(gps_loc.getTime()>net_loc.getTime())&#xD;&#xA;                         locationResult.gotLocation(gps_loc);&#xD;&#xA;                     else&#xD;&#xA;                         locationResult.gotLocation(net_loc);&#xD;&#xA;                     return;&#xD;&#xA;                 }&#xD;&#xA;                 &#xD;&#xA;                 if(gps_loc!=null){&#xD;&#xA;                     locationResult.gotLocation(gps_loc);&#xD;&#xA;                     return;&#xD;&#xA;                 }&#xD;&#xA;                 if(net_loc!=null){&#xD;&#xA;                     locationResult.gotLocation(net_loc);&#xD;&#xA;                     return;&#xD;&#xA;                 }&#xD;&#xA;                 locationResult.gotLocation(null);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        public static abstract class LocationResult{&#xD;&#xA;            public abstract void gotLocation(Location location);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Somebody may also want to modify my logic. For example if you get update from Network provider don't stop listeners but continue waiting. GPS gives more accurate data so it's worth waiting for it. If timer elapses and you've got update from Network but not from GPS then you can use value provided from Network.";;Fixed syntax error
23073332;3145655;95313;5;b9a4ab4d-a92f-4750-9276-f87d501f9401;2012-04-09 10:32:35;"Here's what I do:&#xD;&#xA;&#xD;&#xA;1. First of all I check what providers are enabled. Some may be disabled on the device, some may be disabled in application manifest.&#xD;&#xA;2. If any provider is available I start location listeners and timeout timer. It's 20 seconds in my example, may not be enough for GPS so you can enlarge it.&#xD;&#xA;3. If I get update from location listener I use the provided value. I stop listeners and timer.&#xD;&#xA;4. If I don't get any updates and timer elapses I have to use last known values.&#xD;&#xA;5. I grab last known values from available providers and choose the most recent of them.&#xD;&#xA;&#xD;&#xA;Here's how I use my class:&#xD;&#xA;&#xD;&#xA;    LocationResult locationResult = new LocationResult(){&#xD;&#xA;    	@Override&#xD;&#xA;    	public void gotLocation(Location location){&#xD;&#xA;            //Got the location!&#xD;&#xA;    	}&#xD;&#xA;    };&#xD;&#xA;    MyLocation myLocation = new MyLocation();&#xD;&#xA;    myLocation.getLocation(this, locationResult);&#xD;&#xA;&#xD;&#xA;And here's MyLocation class:&#xD;&#xA;&#xD;&#xA;    import java.util.Timer;&#xD;&#xA;    import java.util.TimerTask;&#xD;&#xA;    import android.content.Context;&#xD;&#xA;    import android.location.Location;&#xD;&#xA;    import android.location.LocationListener;&#xD;&#xA;    import android.location.LocationManager;&#xD;&#xA;    import android.os.Bundle;&#xD;&#xA;    &#xD;&#xA;    public class MyLocation {&#xD;&#xA;        Timer timer1;&#xD;&#xA;        LocationManager lm;&#xD;&#xA;        LocationResult locationResult;&#xD;&#xA;        boolean gps_enabled=false;&#xD;&#xA;        boolean network_enabled=false;&#xD;&#xA;        &#xD;&#xA;        public boolean getLocation(Context context, LocationResult result)&#xD;&#xA;        {&#xD;&#xA;    		//I use LocationResult callback class to pass location value from MyLocation to user code.&#xD;&#xA;            locationResult=result;&#xD;&#xA;            if(lm==null)&#xD;&#xA;                lm = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);&#xD;&#xA;            &#xD;&#xA;            //exceptions will be thrown if provider is not permitted.&#xD;&#xA;            try{gps_enabled=lm.isProviderEnabled(LocationManager.GPS_PROVIDER);}catch(Exception ex){}&#xD;&#xA;            try{network_enabled=lm.isProviderEnabled(LocationManager.NETWORK_PROVIDER);}catch(Exception ex){}&#xD;&#xA;            &#xD;&#xA;            //don't start listeners if no provider is enabled&#xD;&#xA;            if(!gps_enabled && !network_enabled)&#xD;&#xA;                return false;&#xD;&#xA;    &#xD;&#xA;            if(gps_enabled)&#xD;&#xA;                lm.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0, locationListenerGps);&#xD;&#xA;            if(network_enabled)&#xD;&#xA;                lm.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 0, 0, locationListenerNetwork);&#xD;&#xA;            timer1=new Timer();&#xD;&#xA;            timer1.schedule(new GetLastLocation(), 20000);&#xD;&#xA;            return true;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        LocationListener locationListenerGps = new LocationListener() {&#xD;&#xA;            public void onLocationChanged(Location location) {&#xD;&#xA;                timer1.cancel();&#xD;&#xA;                locationResult.gotLocation(location);&#xD;&#xA;                lm.removeUpdates(this);&#xD;&#xA;                lm.removeUpdates(locationListenerNetwork);&#xD;&#xA;            }&#xD;&#xA;            public void onProviderDisabled(String provider) {}&#xD;&#xA;            public void onProviderEnabled(String provider) {}&#xD;&#xA;            public void onStatusChanged(String provider, int status, Bundle extras) {}&#xD;&#xA;        };&#xD;&#xA;        &#xD;&#xA;        LocationListener locationListenerNetwork = new LocationListener() {&#xD;&#xA;            public void onLocationChanged(Location location) {&#xD;&#xA;                timer1.cancel();&#xD;&#xA;                locationResult.gotLocation(location);&#xD;&#xA;                lm.removeUpdates(this);&#xD;&#xA;                lm.removeUpdates(locationListenerGps);&#xD;&#xA;            }&#xD;&#xA;            public void onProviderDisabled(String provider) {}&#xD;&#xA;            public void onProviderEnabled(String provider) {}&#xD;&#xA;            public void onStatusChanged(String provider, int status, Bundle extras) {}&#xD;&#xA;        };&#xD;&#xA;        &#xD;&#xA;        class GetLastLocation extends TimerTask {&#xD;&#xA;            @Override&#xD;&#xA;            public void run() {&#xD;&#xA;                 lm.removeUpdates(locationListenerGps);&#xD;&#xA;                 lm.removeUpdates(locationListenerNetwork);&#xD;&#xA;                 &#xD;&#xA;                 Location net_loc=null, gps_loc=null;&#xD;&#xA;                 if(gps_enabled)&#xD;&#xA;                     gps_loc=lm.getLastKnownLocation(LocationManager.GPS_PROVIDER);&#xD;&#xA;                 if(network_enabled)&#xD;&#xA;                     net_loc=lm.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);&#xD;&#xA;                 &#xD;&#xA;                 //if there are both values use the latest one&#xD;&#xA;                 if(gps_loc!=null && net_loc!=null){&#xD;&#xA;                     if(gps_loc.getTime()>net_loc.getTime())&#xD;&#xA;                         locationResult.gotLocation(gps_loc);&#xD;&#xA;                     else&#xD;&#xA;                         locationResult.gotLocation(net_loc);&#xD;&#xA;                     return;&#xD;&#xA;                 }&#xD;&#xA;                 &#xD;&#xA;                 if(gps_loc!=null){&#xD;&#xA;                     locationResult.gotLocation(gps_loc);&#xD;&#xA;                     return;&#xD;&#xA;                 }&#xD;&#xA;                 if(net_loc!=null){&#xD;&#xA;                     locationResult.gotLocation(net_loc);&#xD;&#xA;                     return;&#xD;&#xA;                 }&#xD;&#xA;                 locationResult.gotLocation(null);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        public static abstract class LocationResult{&#xD;&#xA;            public abstract void gotLocation(Location location);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Somebody may also want to modify my logic. For example if you get update from Network provider don't stop listeners but continue waiting. GPS gives more accurate data so it's worth waiting for it. If timer elapses and you've got update from Network but not from GPS then you can use value provided from Network.";;final removed
42687045;3145655;95313;5;4ec713cf-873d-4c99-86e7-5ed114696f15;2013-06-25 09:33:31;"Here's what I do:&#xD;&#xA;&#xD;&#xA;1. First of all I check what providers are enabled. Some may be disabled on the device, some may be disabled in application manifest.&#xD;&#xA;2. If any provider is available I start location listeners and timeout timer. It's 20 seconds in my example, may not be enough for GPS so you can enlarge it.&#xD;&#xA;3. If I get update from location listener I use the provided value. I stop listeners and timer.&#xD;&#xA;4. If I don't get any updates and timer elapses I have to use last known values.&#xD;&#xA;5. I grab last known values from available providers and choose the most recent of them.&#xD;&#xA;&#xD;&#xA;Here's how I use my class:&#xD;&#xA;&#xD;&#xA;    LocationResult locationResult = new LocationResult(){&#xD;&#xA;    	@Override&#xD;&#xA;    	public void gotLocation(Location location){&#xD;&#xA;            //Got the location!&#xD;&#xA;    	}&#xD;&#xA;    };&#xD;&#xA;    MyLocation myLocation = new MyLocation();&#xD;&#xA;    myLocation.getLocation(this, locationResult);&#xD;&#xA;&#xD;&#xA;And here's MyLocation class:&#xD;&#xA;&#xD;&#xA;    import java.util.Timer;&#xD;&#xA;    import java.util.TimerTask;&#xD;&#xA;    import android.content.Context;&#xD;&#xA;    import android.location.Location;&#xD;&#xA;    import android.location.LocationListener;&#xD;&#xA;    import android.location.LocationManager;&#xD;&#xA;    import android.os.Bundle;&#xD;&#xA;    &#xD;&#xA;    public class MyLocation {&#xD;&#xA;        Timer timer1;&#xD;&#xA;        LocationManager lm;&#xD;&#xA;        LocationResult locationResult;&#xD;&#xA;        boolean gps_enabled=false;&#xD;&#xA;        boolean network_enabled=false;&#xD;&#xA;        &#xD;&#xA;        public boolean getLocation(Context context, LocationResult result)&#xD;&#xA;        {&#xD;&#xA;    		//I use LocationResult callback class to pass location value from MyLocation to user code.&#xD;&#xA;            locationResult=result;&#xD;&#xA;            if(lm==null)&#xD;&#xA;                lm = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);&#xD;&#xA;            &#xD;&#xA;            //exceptions will be thrown if provider is not permitted.&#xD;&#xA;            try{gps_enabled=lm.isProviderEnabled(LocationManager.GPS_PROVIDER);}catch(Exception ex){}&#xD;&#xA;            try{network_enabled=lm.isProviderEnabled(LocationManager.NETWORK_PROVIDER);}catch(Exception ex){}&#xD;&#xA;            &#xD;&#xA;            //don't start listeners if no provider is enabled&#xD;&#xA;            if(!gps_enabled && !network_enabled)&#xD;&#xA;                return false;&#xD;&#xA;    &#xD;&#xA;            if(gps_enabled)&#xD;&#xA;                lm.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0, locationListenerGps);&#xD;&#xA;            if(network_enabled)&#xD;&#xA;                lm.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 0, 0, locationListenerNetwork);&#xD;&#xA;            timer1=new Timer();&#xD;&#xA;            timer1.schedule(new GetLastLocation(), 20000);&#xD;&#xA;            return true;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        LocationListener locationListenerGps = new LocationListener() {&#xD;&#xA;            public void onLocationChanged(Location location) {&#xD;&#xA;                timer1.cancel();&#xD;&#xA;                locationResult.gotLocation(location);&#xD;&#xA;                lm.removeUpdates(this);&#xD;&#xA;                lm.removeUpdates(locationListenerNetwork);&#xD;&#xA;            }&#xD;&#xA;            public void onProviderDisabled(String provider) {}&#xD;&#xA;            public void onProviderEnabled(String provider) {}&#xD;&#xA;            public void onStatusChanged(String provider, int status, Bundle extras) {}&#xD;&#xA;        };&#xD;&#xA;        &#xD;&#xA;        LocationListener locationListenerNetwork = new LocationListener() {&#xD;&#xA;            public void onLocationChanged(Location location) {&#xD;&#xA;                timer1.cancel();&#xD;&#xA;                locationResult.gotLocation(location);&#xD;&#xA;                lm.removeUpdates(this);&#xD;&#xA;                lm.removeUpdates(locationListenerGps);&#xD;&#xA;            }&#xD;&#xA;            public void onProviderDisabled(String provider) {}&#xD;&#xA;            public void onProviderEnabled(String provider) {}&#xD;&#xA;            public void onStatusChanged(String provider, int status, Bundle extras) {}&#xD;&#xA;        };&#xD;&#xA;        &#xD;&#xA;        class GetLastLocation extends TimerTask {&#xD;&#xA;            @Override&#xD;&#xA;            public void run() {&#xD;&#xA;                 lm.removeUpdates(locationListenerGps);&#xD;&#xA;                 lm.removeUpdates(locationListenerNetwork);&#xD;&#xA;                 &#xD;&#xA;                 Location net_loc=null, gps_loc=null;&#xD;&#xA;                 if(gps_enabled)&#xD;&#xA;                     gps_loc=lm.getLastKnownLocation(LocationManager.GPS_PROVIDER);&#xD;&#xA;                 if(network_enabled)&#xD;&#xA;                     net_loc=lm.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);&#xD;&#xA;                 &#xD;&#xA;                 //if there are both values use the latest one&#xD;&#xA;                 if(gps_loc!=null && net_loc!=null){&#xD;&#xA;                     if(gps_loc.getTime()>net_loc.getTime())&#xD;&#xA;                         locationResult.gotLocation(gps_loc);&#xD;&#xA;                     else&#xD;&#xA;                         locationResult.gotLocation(net_loc);&#xD;&#xA;                     return;&#xD;&#xA;                 }&#xD;&#xA;                 &#xD;&#xA;                 if(gps_loc!=null){&#xD;&#xA;                     locationResult.gotLocation(gps_loc);&#xD;&#xA;                     return;&#xD;&#xA;                 }&#xD;&#xA;                 if(net_loc!=null){&#xD;&#xA;                     locationResult.gotLocation(net_loc);&#xD;&#xA;                     return;&#xD;&#xA;                 }&#xD;&#xA;                 locationResult.gotLocation(null);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        public static abstract class LocationResult{&#xD;&#xA;            public abstract void gotLocation(Location location);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Somebody may also want to modify my logic. For example if you get update from Network provider don't stop listeners but continue waiting. GPS gives more accurate data so it's worth waiting for it. If timer elapses and you've got update from Network but not from GPS then you can use value provided from Network.&#xD;&#xA;&#xD;&#xA;One more approach is to use LocationClient http://developer.android.com/training/location/retrieve-current.html. But it requires Google Play Services apk to be installed on user device.";;Added LocationClient reference
