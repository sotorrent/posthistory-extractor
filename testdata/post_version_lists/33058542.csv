Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
101540750;33058542;1090079;2;de00dba1-eb84-4d2a-8fbf-c183a79f48fa;2015-10-10 20:16:19.0;"### You should not do that!&#xD;&#xA;&#xD;&#xA;The standard library does not really facilitate such a move because going from `std::unique_ptr` to `std::shared_ptr` is always safe (because of the semantics of the two) &mdash; whereas the opposite is dangerous since there might be more owners of the resource than the `std::shared_ptr` you would like to move from.&#xD;&#xA;&#xD;&#xA;------------&#xD;&#xA;&#xD;&#xA;### No, really &mdash; do not do that!&#xD;&#xA;&#xD;&#xA;I should probably tell you one more time, but I will assume that you are somewhat grown up and can stand accountable for your own decisions.&#xD;&#xA;&#xD;&#xA;-----------&#xD;&#xA;&#xD;&#xA;### Ey, come on.. sure there is a hack for this?&#xD;&#xA;&#xD;&#xA;If you would like to hack together a solution that would not be *undefined-behavior* unless the `std::unique_ptr` goes out of scope and you still have `std::shared_ptrs` that directly or indirectly end up using the resource.. you would probably end up with something like:&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    #include <memory>&#xD;&#xA;    &#xD;&#xA;<!-- -->&#xD;&#xA;&#xD;&#xA;    namespace hack {&#xD;&#xA;      struct conditional_deleter {&#xD;&#xA;        void  disable () { _do_delete = false; }&#xD;&#xA;    &#xD;&#xA;        template<class T>&#xD;&#xA;        void operator()(T* p) {&#xD;&#xA;          if (_do_delete)&#xD;&#xA;            delete p;&#xD;&#xA;        }   &#xD;&#xA;    &#xD;&#xA;        bool _do_delete = true;&#xD;&#xA;      };  &#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;<!-- -->&#xD;&#xA;&#xD;&#xA;    int main () {&#xD;&#xA;      std::unique_ptr<int> up (new int (123));&#xD;&#xA;      std::shared_ptr<int> sp (up.release (), hack::conditional_deleter {});&#xD;&#xA;      std::shared_ptr<int> sb (sp);&#xD;&#xA;&#xD;&#xA;      std::get_deleter<hack::conditional_deleter> (sp)->disable (); &#xD;&#xA;      std::unique_ptr<int> ub (sp.get ()); // see the name of this variable?&#xD;&#xA;    }                                      // can I get a ticket to UB-land, please?&#xD;&#xA;&#xD;&#xA;> ### WARNING&#xD;&#xA;> The above is far from recommended praxis, if you ever find yourself in a situation where you need such thing you should set fire to your workstation&mdash;probably your whole house&mdash;and work on a new program design.";;
101561280;33058542;1090079;5;7356e702-3b87-458e-a3cf-510095e22a6e;2015-10-11 09:48:28.0;"### You should not do that!&#xD;&#xA;&#xD;&#xA;The standard library does not really facilitate such a move, going from `std::unique_ptr` to `std::shared_ptr` is always safe (because of the semantics of the two) &mdash; but the opposite is dangerous since there might be more owners of the resource than the particular `std::shared_ptr` you would like to move from.&#xD;&#xA;&#xD;&#xA;------------&#xD;&#xA;&#xD;&#xA;### No, really &mdash; do not do that!&#xD;&#xA;&#xD;&#xA;I should probably tell you one more time, but I will assume that you are somewhat grown up and can stand accountable for your own decisions.&#xD;&#xA;&#xD;&#xA;-----------&#xD;&#xA;&#xD;&#xA;### Ey, come on.. sure there is a hack for this?&#xD;&#xA;&#xD;&#xA;If you would like to hack together a solution that would not be *undefined-behavior* unless the `std::unique_ptr` goes out of scope and you still have `std::shared_ptrs` that directly or indirectly end up using the resource.. you would probably end up with something like:&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    #include <memory>&#xD;&#xA;    &#xD;&#xA;<!-- -->&#xD;&#xA;&#xD;&#xA;    namespace hack {&#xD;&#xA;      struct conditional_deleter {&#xD;&#xA;        void  disable () { _do_delete = false; }&#xD;&#xA;    &#xD;&#xA;        template<class T>&#xD;&#xA;        void operator()(T* p) {&#xD;&#xA;          if (_do_delete)&#xD;&#xA;            delete p;&#xD;&#xA;        }   &#xD;&#xA;    &#xD;&#xA;        bool _do_delete = true;&#xD;&#xA;      };  &#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;<!-- -->&#xD;&#xA;&#xD;&#xA;    int main () {&#xD;&#xA;      std::unique_ptr<int> up (new int (123));&#xD;&#xA;      std::shared_ptr<int> sp (up.release (), hack::conditional_deleter {});&#xD;&#xA;      std::shared_ptr<int> sb (sp);&#xD;&#xA;&#xD;&#xA;      std::get_deleter<hack::conditional_deleter> (sp)->disable (); &#xD;&#xA;      std::unique_ptr<int> ub (sp.get ()); // see the name of this variable?&#xD;&#xA;    }                                      // can I get a ticket to UB-land, please?&#xD;&#xA;&#xD;&#xA;> ### WARNING&#xD;&#xA;> The above is far from recommended praxis, if you ever find yourself in a situation where you need such thing you should set fire to your workstation&mdash;probably your whole house&mdash;and work on a new program design.";;deleted 7 characters in body
