Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
522158;326440;3474;2;4320894b-887d-49b9-b4f9-6fffbdd5c762;2008-11-28 18:56:14;"In general, you should specify the character encoding to use when converting the bytes of a file to text. There are some special cases when you just want to use the platform default, but they are rare, and you should be able to explicitly justify why this is okay.&#xD;&#xA;&#xD;&#xA;Anyway, here's an efficient way to it:&#xD;&#xA;&#xD;&#xA;    private static String readFile(String path) throws IOException {&#xD;&#xA;      FileInputStream stream = FileInputStream(new File(path));&#xD;&#xA;      try {&#xD;&#xA;        FileChannel fc = new .getChannel();&#xD;&#xA;        MappedByteBuffer bb = fc.map(FileChannel.MapMode.READ_ONLY, 0, fc.size());&#xD;&#xA;        /* Instead of using default, pass in a decoder. */&#xD;&#xA;        return CharSet.defaultCharset().decode(bb).toString();&#xD;&#xA;      }&#xD;&#xA;      finally {&#xD;&#xA;        stream.close();&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;";;
522159;326440;3474;5;ece84de0-3535-47ac-be79-b84b0a413183;2008-11-28 19:05:55;"In general, you should specify the character encoding to use when converting the bytes of a file to text. There are some special cases when you just want to use the platform default, but they are rare, and you should be able to explicitly justify why this is okay.&#xD;&#xA;&#xD;&#xA;Anyway, here's an efficient way to it:&#xD;&#xA;&#xD;&#xA;    private static String readFile(String path) throws IOException {&#xD;&#xA;      FileInputStream stream = FileInputStream(new File(path));&#xD;&#xA;      try {&#xD;&#xA;        FileChannel fc = stream.getChannel();&#xD;&#xA;        MappedByteBuffer bb = fc.map(FileChannel.MapMode.READ_ONLY, 0, fc.size());&#xD;&#xA;        /* Instead of using default, pass in a decoder. */&#xD;&#xA;        return CharSet.defaultCharset().decode(bb).toString();&#xD;&#xA;      }&#xD;&#xA;      finally {&#xD;&#xA;        stream.close();&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;";;Fix a typo in code.
522160;326440;3474;5;185326f5-11c1-41c6-a14d-b2f98f6a29fb;2008-11-28 19:13:17;"In general, you should specify the character encoding to use when converting the bytes of a file to text. There are some special cases when you just want to use the platform default, but they are rare, and you should be able to explicitly justify why this is okay.&#xD;&#xA;&#xD;&#xA;Anyway, here's an efficient way to it:&#xD;&#xA;&#xD;&#xA;    private static String readFile(String path) throws IOException {&#xD;&#xA;      FileInputStream stream = new FileInputStream(new File(path));&#xD;&#xA;      try {&#xD;&#xA;        FileChannel fc = stream.getChannel();&#xD;&#xA;        MappedByteBuffer bb = fc.map(FileChannel.MapMode.READ_ONLY, 0, fc.size());&#xD;&#xA;        /* Instead of using default, pass in a decoder. */&#xD;&#xA;        return CharSet.defaultCharset().decode(bb).toString();&#xD;&#xA;      }&#xD;&#xA;      finally {&#xD;&#xA;        stream.close();&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;";;Fix another part of the same typo.
3890740;326440;3474;5;079c73bd-640b-49db-a9e3-b089d3ffe907;2009-12-21 03:52:08;"In general, you should specify the character encoding to use when converting the bytes of a file to text. There are some special cases when you just want to use the platform default, but they are rare, and you should be able to explicitly justify why this is okay.&#xD;&#xA;&#xD;&#xA;Anyway, here's an efficient way to it:&#xD;&#xA;&#xD;&#xA;    private static String readFile(String path) throws IOException {&#xD;&#xA;      FileInputStream stream = new FileInputStream(new File(path));&#xD;&#xA;      try {&#xD;&#xA;        FileChannel fc = stream.getChannel();&#xD;&#xA;        MappedByteBuffer bb = fc.map(FileChannel.MapMode.READ_ONLY, 0, fc.size());&#xD;&#xA;        /* Instead of using default, pass in a decoder. */&#xD;&#xA;        return Charset.defaultCharset().decode(bb).toString();&#xD;&#xA;      }&#xD;&#xA;      finally {&#xD;&#xA;        stream.close();&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;";;edited body
40278052;326440;3474;5;0cbeee87-efcd-47f6-b879-f10ba850dedb;2013-05-07 18:58:22;"In general, you should specify the character encoding to use when converting the bytes of a file to text. There are some special cases when you just want to use the platform default, but they are rare, and you should be able to explicitly justify why this is okay.&#xD;&#xA;&#xD;&#xA;Anyway, here's an efficient way to it:&#xD;&#xA;&#xD;&#xA;    private static String readFile(String path) throws IOException {&#xD;&#xA;      FileInputStream stream = new FileInputStream(new File(path));&#xD;&#xA;      try {&#xD;&#xA;        FileChannel fc = stream.getChannel();&#xD;&#xA;        MappedByteBuffer bb = fc.map(FileChannel.MapMode.READ_ONLY, 0, fc.size());&#xD;&#xA;        /* Instead of using default, pass in a decoder. */&#xD;&#xA;        return Charset.defaultCharset().decode(bb).toString();&#xD;&#xA;      }&#xD;&#xA;      finally {&#xD;&#xA;        stream.close();&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;---&#xD;&#xA;&#xD;&#xA;In Java 7, [a utility method has been added to read all ""lines"" from a file,][1] as a `List<String>`. This isn't exactly the same thing; some information is lost because the actual line terminators are discarded. It is, however, a robust and convenient implementation of an extremely common use case:&#xD;&#xA;&#xD;&#xA;    List<String> lines = &#xD;&#xA;      Files.readAllLines(Paths.get(""smallfile.txt""), StandardCharsets.UTF_8);&#xD;&#xA;&#xD;&#xA;  [1]: http://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html#readAllLines%28java.nio.file.Path,%20java.nio.charset.Charset%29";;added 558 characters in body
40414907;326440;3474;5;667dea6c-5c31-4709-aaf6-ddb652cdce10;2013-05-10 07:08:43;"Here's a compact, robust idiom for Java 7, wrapped up in method:&#xD;&#xA;&#xD;&#xA;    static String readFile(String path, Charset encoding) &#xD;&#xA;      throws IOException &#xD;&#xA;    {&#xD;&#xA;      byte[] encoded = Files.readAllBytes(Paths.get(path));&#xD;&#xA;      return encoding.decode(ByteBuffer.wrap(encoded)).toString();&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;This method can temporarily require memory several times the size of the file, because for a short time the raw file contents (a byte array), the decoded characters (a character buffer), and a copy of the character data (in the new `String` instance) all reside in memory at once. It is safest to apply to files that you know to be small relative to the available memory.&#xD;&#xA;&#xD;&#xA;One thing that is missing from the sample in the original post is the character encoding. There are some special cases the platform default is what you want, but they are rare, and you should be able justify your choice.&#xD;&#xA;&#xD;&#xA;The [`StandardCharsets`][1] class define some constants for the encodings required of all Java runtimes:&#xD;&#xA;&#xD;&#xA;    String content = readFile(""test.txt"", StandardCharsets.UTF_8);&#xD;&#xA;&#xD;&#xA;The platform default is available from [the `Charset` class][2] itself:&#xD;&#xA;&#xD;&#xA;    String content = readFile(""test.txt"", Charset.defaultCharset());&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;---&#xD;&#xA;Note: This answer largely replaces my Java 6 version. The utility of Java 7 safely simplifies the code, and the old answer, which used a mapped byte buffer, prevented the file that was read from being deleted until the mapped buffer was garbage collected. You can view the old version via the ""edited"" link on this answer.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://docs.oracle.com/javase/7/docs/api/java/nio/charset/StandardCharsets.html&#xD;&#xA;  [2]: http://docs.oracle.com/javase/7/docs/api/java/nio/charset/Charset.html#defaultCharset%28%29";;added 403 characters in body
40486052;326440;3474;5;cbb5f92a-9c7b-499b-b582-568b1afeed93;2013-05-11 18:43:04;"Read text from a file&#xD;&#xA;---------------------&#xD;&#xA;&#xD;&#xA;Here's a compact, robust idiom for Java 7, wrapped up in a utility method:&#xD;&#xA;&#xD;&#xA;    static String readFile(String path, Charset encoding) &#xD;&#xA;      throws IOException &#xD;&#xA;    {&#xD;&#xA;      byte[] encoded = Files.readAllBytes(Paths.get(path));&#xD;&#xA;      return encoding.decode(ByteBuffer.wrap(encoded)).toString();&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Memory utilization&#xD;&#xA;------------------&#xD;&#xA;&#xD;&#xA;This method can temporarily require memory several times the size of the file, because for a short time the raw file contents (a byte array), the decoded characters (a character buffer), and a copy of the character data (in the new `String` instance) all reside in memory at once. It is safest to apply to files that you know to be small relative to the available memory.&#xD;&#xA;&#xD;&#xA;For reading large files, you need a different design for your program, one that reads a chunk of text from a stream, processes it, and then moves on to the next, reusing the same fixed-sized memory block. Here, ""large"" depends on the computer specs. Nowadays, this threshold might be many gigabytes of RAM.&#xD;&#xA;&#xD;&#xA;Character encoding&#xD;&#xA;------------------&#xD;&#xA;&#xD;&#xA;One thing that is missing from the sample in the original post is the character encoding. There are some special cases where the platform default is what you want, but they are rare, and you should be able justify your choice.&#xD;&#xA;&#xD;&#xA;The [`StandardCharsets`][1] class define some constants for the encodings required of all Java runtimes:&#xD;&#xA;&#xD;&#xA;    String content = readFile(""test.txt"", StandardCharsets.UTF_8);&#xD;&#xA;&#xD;&#xA;The platform default is available from [the `Charset` class][2] itself:&#xD;&#xA;&#xD;&#xA;    String content = readFile(""test.txt"", Charset.defaultCharset());&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;---&#xD;&#xA;Note: This answer largely replaces my Java 6 version. The utility of Java 7 safely simplifies the code, and the old answer, which used a mapped byte buffer, prevented the file that was read from being deleted until the mapped buffer was garbage collected. You can view the old version via the ""edited"" link on this answer.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://docs.oracle.com/javase/7/docs/api/java/nio/charset/StandardCharsets.html&#xD;&#xA;  [2]: http://docs.oracle.com/javase/7/docs/api/java/nio/charset/Charset.html#defaultCharset%28%29";;added 10 characters in body
59731823;326440;3474;5;5da3e505-d708-4f22-9043-92ab6980d2ec;2014-03-06 18:08:46;"Read all text from a file&#xD;&#xA;-------------------------&#xD;&#xA;&#xD;&#xA;Here's a compact, robust idiom for Java 7, wrapped up in a utility method:&#xD;&#xA;&#xD;&#xA;    static String readFile(String path, Charset encoding) &#xD;&#xA;      throws IOException &#xD;&#xA;    {&#xD;&#xA;      byte[] encoded = Files.readAllBytes(Paths.get(path));&#xD;&#xA;      return encoding.decode(ByteBuffer.wrap(encoded)).toString();&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Read lines of text from a file&#xD;&#xA;------------------------------&#xD;&#xA;&#xD;&#xA;Java 7 added a [convenience method to read a file as lines of text,][1] represented as a `List<String>`. This approach is ""lossy"" because the line separators are stripped from the end of each line.&#xD;&#xA;&#xD;&#xA;    List<String> lines = Files.readAllLines(Paths.get(path), encoding);&#xD;&#xA;&#xD;&#xA;Memory utilization&#xD;&#xA;------------------&#xD;&#xA;&#xD;&#xA;The first method, that preserves line breaks, can temporarily require memory several times the size of the file, because for a short time the raw file contents (a byte array), the decoded characters (a character buffer), and a copy of the character data (in the new `String` instance) all reside in memory at once. It is safest to apply to files that you know to be small relative to the available memory.&#xD;&#xA;&#xD;&#xA;The second method, reading lines, is usually more memory efficient, because intermediate buffers only need to be large enough to decode one line of text at once. However, it's still not suitable for files that are very large relative to available memory.&#xD;&#xA;&#xD;&#xA;For reading large files, you need a different design for your program, one that reads a chunk of text from a stream, processes it, and then moves on to the next, reusing the same fixed-sized memory block. Here, ""large"" depends on the computer specs. Nowadays, this threshold might be many gigabytes of RAM.&#xD;&#xA;&#xD;&#xA;Character encoding&#xD;&#xA;------------------&#xD;&#xA;&#xD;&#xA;One thing that is missing from the sample in the original post is the character encoding. There are some special cases where the platform default is what you want, but they are rare, and you should be able justify your choice.&#xD;&#xA;&#xD;&#xA;The [`StandardCharsets`][2] class define some constants for the encodings required of all Java runtimes:&#xD;&#xA;&#xD;&#xA;    String content = readFile(""test.txt"", StandardCharsets.UTF_8);&#xD;&#xA;&#xD;&#xA;The platform default is available from [the `Charset` class][3] itself:&#xD;&#xA;&#xD;&#xA;    String content = readFile(""test.txt"", Charset.defaultCharset());&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;---&#xD;&#xA;Note: This answer largely replaces my Java 6 version. The utility of Java 7 safely simplifies the code, and the old answer, which used a mapped byte buffer, prevented the file that was read from being deleted until the mapped buffer was garbage collected. You can view the old version via the ""edited"" link on this answer.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html#readAllLines%28java.nio.file.Path,%20java.nio.charset.Charset%29&#xD;&#xA;  [2]: http://docs.oracle.com/javase/7/docs/api/java/nio/charset/StandardCharsets.html&#xD;&#xA;  [3]: http://docs.oracle.com/javase/7/docs/api/java/nio/charset/Charset.html#defaultCharset%28%29";;added 781 characters in body
62701439;326440;3474;5;ee7ed01e-4082-410c-a437-55bc12e99ef3;2014-04-12 00:35:03;"Read all text from a file&#xD;&#xA;-------------------------&#xD;&#xA;&#xD;&#xA;Here's a compact, robust idiom for Java 7, wrapped up in a utility method:&#xD;&#xA;&#xD;&#xA;    static String readFile(String path, Charset encoding) &#xD;&#xA;      throws IOException &#xD;&#xA;    {&#xD;&#xA;      byte[] encoded = Files.readAllBytes(Paths.get(path));&#xD;&#xA;      return new String(encoded, encoding);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Read lines of text from a file&#xD;&#xA;------------------------------&#xD;&#xA;&#xD;&#xA;Java 7 added a [convenience method to read a file as lines of text,][1] represented as a `List<String>`. This approach is ""lossy"" because the line separators are stripped from the end of each line.&#xD;&#xA;&#xD;&#xA;    List<String> lines = Files.readAllLines(Paths.get(path), encoding);&#xD;&#xA;&#xD;&#xA;Memory utilization&#xD;&#xA;------------------&#xD;&#xA;&#xD;&#xA;The first method, that preserves line breaks, can temporarily require memory several times the size of the file, because for a short time the raw file contents (a byte array), the decoded characters (a character buffer), and a copy of the character data (in the new `String` instance) all reside in memory at once. It is safest to apply to files that you know to be small relative to the available memory.&#xD;&#xA;&#xD;&#xA;The second method, reading lines, is usually more memory efficient, because intermediate buffers only need to be large enough to decode one line of text at once. However, it's still not suitable for files that are very large relative to available memory.&#xD;&#xA;&#xD;&#xA;For reading large files, you need a different design for your program, one that reads a chunk of text from a stream, processes it, and then moves on to the next, reusing the same fixed-sized memory block. Here, ""large"" depends on the computer specs. Nowadays, this threshold might be many gigabytes of RAM.&#xD;&#xA;&#xD;&#xA;Character encoding&#xD;&#xA;------------------&#xD;&#xA;&#xD;&#xA;One thing that is missing from the sample in the original post is the character encoding. There are some special cases where the platform default is what you want, but they are rare, and you should be able justify your choice.&#xD;&#xA;&#xD;&#xA;The [`StandardCharsets`][2] class define some constants for the encodings required of all Java runtimes:&#xD;&#xA;&#xD;&#xA;    String content = readFile(""test.txt"", StandardCharsets.UTF_8);&#xD;&#xA;&#xD;&#xA;The platform default is available from [the `Charset` class][3] itself:&#xD;&#xA;&#xD;&#xA;    String content = readFile(""test.txt"", Charset.defaultCharset());&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;---&#xD;&#xA;Note: This answer largely replaces my Java 6 version. The utility of Java 7 safely simplifies the code, and the old answer, which used a mapped byte buffer, prevented the file that was read from being deleted until the mapped buffer was garbage collected. You can view the old version via the ""edited"" link on this answer.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html#readAllLines%28java.nio.file.Path,%20java.nio.charset.Charset%29&#xD;&#xA;  [2]: http://docs.oracle.com/javase/7/docs/api/java/nio/charset/StandardCharsets.html&#xD;&#xA;  [3]: http://docs.oracle.com/javase/7/docs/api/java/nio/charset/Charset.html#defaultCharset%28%29";;deleted 23 characters in body
62701614;326440;3474;5;7aa6780c-effc-4430-bef5-57f9bc05c74b;2014-04-12 00:42:20;"Read all text from a file&#xD;&#xA;-------------------------&#xD;&#xA;&#xD;&#xA;Here's a compact, robust idiom for Java 7, wrapped up in a utility method:&#xD;&#xA;&#xD;&#xA;    static String readFile(String path, Charset encoding) &#xD;&#xA;      throws IOException &#xD;&#xA;    {&#xD;&#xA;      byte[] encoded = Files.readAllBytes(Paths.get(path));&#xD;&#xA;      return new String(encoded, encoding);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Read lines of text from a file&#xD;&#xA;------------------------------&#xD;&#xA;&#xD;&#xA;Java 7 added a [convenience method to read a file as lines of text,][1] represented as a `List<String>`. This approach is ""lossy"" because the line separators are stripped from the end of each line.&#xD;&#xA;&#xD;&#xA;    List<String> lines = Files.readAllLines(Paths.get(path), encoding);&#xD;&#xA;&#xD;&#xA;Memory utilization&#xD;&#xA;------------------&#xD;&#xA;&#xD;&#xA;The first method, that preserves line breaks, can temporarily require memory several times the size of the file, because for a short time the raw file contents (a byte array), and the decoded characters (each of which is 16 bits even if encoded as 8 bits in the file) reside in memory at once. It is safest to apply to files that you know to be small relative to the available memory.&#xD;&#xA;&#xD;&#xA;The second method, reading lines, is usually more memory efficient, because the input byte buffer for decoding doesn't need to contain the entire file. However, it's still not suitable for files that are very large relative to available memory.&#xD;&#xA;&#xD;&#xA;For reading large files, you need a different design for your program, one that reads a chunk of text from a stream, processes it, and then moves on to the next, reusing the same fixed-sized memory block. Here, ""large"" depends on the computer specs. Nowadays, this threshold might be many gigabytes of RAM.&#xD;&#xA;&#xD;&#xA;Character encoding&#xD;&#xA;------------------&#xD;&#xA;&#xD;&#xA;One thing that is missing from the sample in the original post is the character encoding. There are some special cases where the platform default is what you want, but they are rare, and you should be able justify your choice.&#xD;&#xA;&#xD;&#xA;The [`StandardCharsets`][2] class define some constants for the encodings required of all Java runtimes:&#xD;&#xA;&#xD;&#xA;    String content = readFile(""test.txt"", StandardCharsets.UTF_8);&#xD;&#xA;&#xD;&#xA;The platform default is available from [the `Charset` class][3] itself:&#xD;&#xA;&#xD;&#xA;    String content = readFile(""test.txt"", Charset.defaultCharset());&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;---&#xD;&#xA;Note: This answer largely replaces my Java 6 version. The utility of Java 7 safely simplifies the code, and the old answer, which used a mapped byte buffer, prevented the file that was read from being deleted until the mapped buffer was garbage collected. You can view the old version via the ""edited"" link on this answer.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html#readAllLines%28java.nio.file.Path,%20java.nio.charset.Charset%29&#xD;&#xA;  [2]: http://docs.oracle.com/javase/7/docs/api/java/nio/charset/StandardCharsets.html&#xD;&#xA;  [3]: http://docs.oracle.com/javase/7/docs/api/java/nio/charset/Charset.html#defaultCharset%28%29";;deleted 23 characters in body
84817726;326440;59087;5;ad64ac24-0039-42e1-96b7-3a4a3bc56866;2015-02-28 18:42:00;"Read all text from a file&#xD;&#xA;-------------------------&#xD;&#xA;&#xD;&#xA;Here's a compact, robust idiom for Java 7, wrapped up in a utility method:&#xD;&#xA;&#xD;&#xA;    import java.nio.file.Files;&#xD;&#xA;&#xD;&#xA;    static String readFile(String path, Charset encoding) throws IOException &#xD;&#xA;    {&#xD;&#xA;      byte[] encoded = Files.readAllBytes(Paths.get(path));&#xD;&#xA;      return new String(encoded, encoding);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Read lines of text from a file&#xD;&#xA;------------------------------&#xD;&#xA;&#xD;&#xA;Java 7 added a [convenience method to read a file as lines of text,][1] represented as a `List<String>`. This approach is ""lossy"" because the line separators are stripped from the end of each line.&#xD;&#xA;&#xD;&#xA;    List<String> lines = Files.readAllLines(Paths.get(path), encoding);&#xD;&#xA;&#xD;&#xA;Memory utilization&#xD;&#xA;------------------&#xD;&#xA;&#xD;&#xA;The first method, that preserves line breaks, can temporarily require memory several times the size of the file, because for a short time the raw file contents (a byte array), and the decoded characters (each of which is 16 bits even if encoded as 8 bits in the file) reside in memory at once. It is safest to apply to files that you know to be small relative to the available memory.&#xD;&#xA;&#xD;&#xA;The second method, reading lines, is usually more memory efficient, because the input byte buffer for decoding doesn't need to contain the entire file. However, it's still not suitable for files that are very large relative to available memory.&#xD;&#xA;&#xD;&#xA;For reading large files, you need a different design for your program, one that reads a chunk of text from a stream, processes it, and then moves on to the next, reusing the same fixed-sized memory block. Here, ""large"" depends on the computer specs. Nowadays, this threshold might be many gigabytes of RAM.&#xD;&#xA;&#xD;&#xA;Character encoding&#xD;&#xA;------------------&#xD;&#xA;&#xD;&#xA;One thing that is missing from the sample in the original post is the character encoding. There are some special cases where the platform default is what you want, but they are rare, and you should be able justify your choice.&#xD;&#xA;&#xD;&#xA;The [`StandardCharsets`][2] class define some constants for the encodings required of all Java runtimes:&#xD;&#xA;&#xD;&#xA;    String content = readFile(""test.txt"", StandardCharsets.UTF_8);&#xD;&#xA;&#xD;&#xA;The platform default is available from [the `Charset` class][3] itself:&#xD;&#xA;&#xD;&#xA;    String content = readFile(""test.txt"", Charset.defaultCharset());&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;---&#xD;&#xA;Note: This answer largely replaces my Java 6 version. The utility of Java 7 safely simplifies the code, and the old answer, which used a mapped byte buffer, prevented the file that was read from being deleted until the mapped buffer was garbage collected. You can view the old version via the ""edited"" link on this answer.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html#readAllLines%28java.nio.file.Path,%20java.nio.charset.Charset%29&#xD;&#xA;  [2]: http://docs.oracle.com/javase/7/docs/api/java/nio/charset/StandardCharsets.html&#xD;&#xA;  [3]: http://docs.oracle.com/javase/7/docs/api/java/nio/charset/Charset.html#defaultCharset%28%29";;added 27 characters in body
84930034;326440;3474;8;92cc156c-0db6-4f27-a298-f1d3443e02fc;2015-03-02 16:39:54;"Read all text from a file&#xD;&#xA;-------------------------&#xD;&#xA;&#xD;&#xA;Here's a compact, robust idiom for Java 7, wrapped up in a utility method:&#xD;&#xA;&#xD;&#xA;    static String readFile(String path, Charset encoding) &#xD;&#xA;      throws IOException &#xD;&#xA;    {&#xD;&#xA;      byte[] encoded = Files.readAllBytes(Paths.get(path));&#xD;&#xA;      return new String(encoded, encoding);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Read lines of text from a file&#xD;&#xA;------------------------------&#xD;&#xA;&#xD;&#xA;Java 7 added a [convenience method to read a file as lines of text,][1] represented as a `List<String>`. This approach is ""lossy"" because the line separators are stripped from the end of each line.&#xD;&#xA;&#xD;&#xA;    List<String> lines = Files.readAllLines(Paths.get(path), encoding);&#xD;&#xA;&#xD;&#xA;Memory utilization&#xD;&#xA;------------------&#xD;&#xA;&#xD;&#xA;The first method, that preserves line breaks, can temporarily require memory several times the size of the file, because for a short time the raw file contents (a byte array), and the decoded characters (each of which is 16 bits even if encoded as 8 bits in the file) reside in memory at once. It is safest to apply to files that you know to be small relative to the available memory.&#xD;&#xA;&#xD;&#xA;The second method, reading lines, is usually more memory efficient, because the input byte buffer for decoding doesn't need to contain the entire file. However, it's still not suitable for files that are very large relative to available memory.&#xD;&#xA;&#xD;&#xA;For reading large files, you need a different design for your program, one that reads a chunk of text from a stream, processes it, and then moves on to the next, reusing the same fixed-sized memory block. Here, ""large"" depends on the computer specs. Nowadays, this threshold might be many gigabytes of RAM.&#xD;&#xA;&#xD;&#xA;Character encoding&#xD;&#xA;------------------&#xD;&#xA;&#xD;&#xA;One thing that is missing from the sample in the original post is the character encoding. There are some special cases where the platform default is what you want, but they are rare, and you should be able justify your choice.&#xD;&#xA;&#xD;&#xA;The [`StandardCharsets`][2] class define some constants for the encodings required of all Java runtimes:&#xD;&#xA;&#xD;&#xA;    String content = readFile(""test.txt"", StandardCharsets.UTF_8);&#xD;&#xA;&#xD;&#xA;The platform default is available from [the `Charset` class][3] itself:&#xD;&#xA;&#xD;&#xA;    String content = readFile(""test.txt"", Charset.defaultCharset());&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;---&#xD;&#xA;Note: This answer largely replaces my Java 6 version. The utility of Java 7 safely simplifies the code, and the old answer, which used a mapped byte buffer, prevented the file that was read from being deleted until the mapped buffer was garbage collected. You can view the old version via the ""edited"" link on this answer.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html#readAllLines%28java.nio.file.Path,%20java.nio.charset.Charset%29&#xD;&#xA;  [2]: http://docs.oracle.com/javase/7/docs/api/java/nio/charset/StandardCharsets.html&#xD;&#xA;  [3]: http://docs.oracle.com/javase/7/docs/api/java/nio/charset/Charset.html#defaultCharset%28%29";;Rollback to [7aa6780c-effc-4430-bef5-57f9bc05c74b]
118153554;326440;719662;5;81625e81-df58-4835-86b0-50f45ecbc886;2016-05-16 01:24:18;"Read all text from a file&#xD;&#xA;-------------------------&#xD;&#xA;&#xD;&#xA;Here's a compact, robust idiom for Java 7, wrapped up in a utility method:&#xD;&#xA;&#xD;&#xA;    public static String readFile(String path, Charset encoding)&#xD;&#xA;        throws IOException&#xD;&#xA;    {&#xD;&#xA;      byte[] encoded = Files.readAllBytes(Paths.get(path));&#xD;&#xA;      return new String(encoded, encoding);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Read lines of text from a file&#xD;&#xA;------------------------------&#xD;&#xA;&#xD;&#xA;Java 7 added a [convenience method to read a file as lines of text,][1] represented as a `List<String>`. This approach is ""lossy"" because the line separators are stripped from the end of each line.&#xD;&#xA;&#xD;&#xA;    List<String> lines = Files.readAllLines(Paths.get(path), encoding);&#xD;&#xA;&#xD;&#xA;Memory utilization&#xD;&#xA;------------------&#xD;&#xA;&#xD;&#xA;The first method, that preserves line breaks, can temporarily require memory several times the size of the file, because for a short time the raw file contents (a byte array), and the decoded characters (each of which is 16 bits even if encoded as 8 bits in the file) reside in memory at once. It is safest to apply to files that you know to be small relative to the available memory.&#xD;&#xA;&#xD;&#xA;The second method, reading lines, is usually more memory efficient, because the input byte buffer for decoding doesn't need to contain the entire file. However, it's still not suitable for files that are very large relative to available memory.&#xD;&#xA;&#xD;&#xA;For reading large files, you need a different design for your program, one that reads a chunk of text from a stream, processes it, and then moves on to the next, reusing the same fixed-sized memory block. Here, ""large"" depends on the computer specs. Nowadays, this threshold might be many gigabytes of RAM.&#xD;&#xA;&#xD;&#xA;Character encoding&#xD;&#xA;------------------&#xD;&#xA;&#xD;&#xA;One thing that is missing from the sample in the original post is the character encoding. There are some special cases where the platform default is what you want, but they are rare, and you should be able justify your choice.&#xD;&#xA;&#xD;&#xA;The [`StandardCharsets`][2] class define some constants for the encodings required of all Java runtimes:&#xD;&#xA;&#xD;&#xA;    String content = readFile(""test.txt"", StandardCharsets.UTF_8);&#xD;&#xA;&#xD;&#xA;The platform default is available from [the `Charset` class][3] itself:&#xD;&#xA;&#xD;&#xA;    String content = readFile(""test.txt"", Charset.defaultCharset());&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;---&#xD;&#xA;Note: This answer largely replaces my Java 6 version. The utility of Java 7 safely simplifies the code, and the old answer, which used a mapped byte buffer, prevented the file that was read from being deleted until the mapped buffer was garbage collected. You can view the old version via the ""edited"" link on this answer.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html#readAllLines%28java.nio.file.Path,%20java.nio.charset.Charset%29&#xD;&#xA;  [2]: http://docs.oracle.com/javase/7/docs/api/java/nio/charset/StandardCharsets.html&#xD;&#xA;  [3]: http://docs.oracle.com/javase/7/docs/api/java/nio/charset/Charset.html#defaultCharset%28%29";;added 7 characters in body
118159104;326440;3474;8;f59a46ed-e226-4720-9670-a672cf8cf72a;2016-05-16 04:40:32;"Read all text from a file&#xD;&#xA;-------------------------&#xD;&#xA;&#xD;&#xA;Here's a compact, robust idiom for Java 7, wrapped up in a utility method:&#xD;&#xA;&#xD;&#xA;    static String readFile(String path, Charset encoding) &#xD;&#xA;      throws IOException &#xD;&#xA;    {&#xD;&#xA;      byte[] encoded = Files.readAllBytes(Paths.get(path));&#xD;&#xA;      return new String(encoded, encoding);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Read lines of text from a file&#xD;&#xA;------------------------------&#xD;&#xA;&#xD;&#xA;Java 7 added a [convenience method to read a file as lines of text,][1] represented as a `List<String>`. This approach is ""lossy"" because the line separators are stripped from the end of each line.&#xD;&#xA;&#xD;&#xA;    List<String> lines = Files.readAllLines(Paths.get(path), encoding);&#xD;&#xA;&#xD;&#xA;Memory utilization&#xD;&#xA;------------------&#xD;&#xA;&#xD;&#xA;The first method, that preserves line breaks, can temporarily require memory several times the size of the file, because for a short time the raw file contents (a byte array), and the decoded characters (each of which is 16 bits even if encoded as 8 bits in the file) reside in memory at once. It is safest to apply to files that you know to be small relative to the available memory.&#xD;&#xA;&#xD;&#xA;The second method, reading lines, is usually more memory efficient, because the input byte buffer for decoding doesn't need to contain the entire file. However, it's still not suitable for files that are very large relative to available memory.&#xD;&#xA;&#xD;&#xA;For reading large files, you need a different design for your program, one that reads a chunk of text from a stream, processes it, and then moves on to the next, reusing the same fixed-sized memory block. Here, ""large"" depends on the computer specs. Nowadays, this threshold might be many gigabytes of RAM.&#xD;&#xA;&#xD;&#xA;Character encoding&#xD;&#xA;------------------&#xD;&#xA;&#xD;&#xA;One thing that is missing from the sample in the original post is the character encoding. There are some special cases where the platform default is what you want, but they are rare, and you should be able justify your choice.&#xD;&#xA;&#xD;&#xA;The [`StandardCharsets`][2] class define some constants for the encodings required of all Java runtimes:&#xD;&#xA;&#xD;&#xA;    String content = readFile(""test.txt"", StandardCharsets.UTF_8);&#xD;&#xA;&#xD;&#xA;The platform default is available from [the `Charset` class][3] itself:&#xD;&#xA;&#xD;&#xA;    String content = readFile(""test.txt"", Charset.defaultCharset());&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;---&#xD;&#xA;Note: This answer largely replaces my Java 6 version. The utility of Java 7 safely simplifies the code, and the old answer, which used a mapped byte buffer, prevented the file that was read from being deleted until the mapped buffer was garbage collected. You can view the old version via the ""edited"" link on this answer.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html#readAllLines%28java.nio.file.Path,%20java.nio.charset.Charset%29&#xD;&#xA;  [2]: http://docs.oracle.com/javase/7/docs/api/java/nio/charset/StandardCharsets.html&#xD;&#xA;  [3]: http://docs.oracle.com/javase/7/docs/api/java/nio/charset/Charset.html#defaultCharset%28%29";;Rollback to [92cc156c-0db6-4f27-a298-f1d3443e02fc]
