Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
101318266;33003217;2854041;2;0007b91b-9b56-4509-a643-bd448fffb9d6;2015-10-07 22:06:07.0;"Here is an NSLayoutConstraint extension in Swift that makes setting a new multiplier pretty easy:

    import Foundation

    extension NSLayoutConstraint {
    
    func setMultiplier(multiplier:CGFloat) {
        
        let newConstraint = NSLayoutConstraint(
            item: firstItem,
            attribute: firstAttribute,
            relatedBy: relation,
            toItem: secondItem,
            attribute: secondAttribute,
            multiplier: multiplier,
            constant: constant)
        
        newConstraint.priority = priority
        
        NSLayoutConstraint.deactivateConstraints([self])
        NSLayoutConstraint.activateConstraints([newConstraint])
        }
    }

Demo usage:

    override func viewDidLoad() {
        let newMultiplier:CGFloat = 50
        myDemoConstrait.setMultiplier(newMultiplier)
        view.layoutIfNeeded()
    }

";;
101319072;33003217;2854041;5;8a9189fb-826e-473b-94fd-033eabe2c828;2015-10-07 22:23:42.0;"Here is an NSLayoutConstraint extension in Swift that makes setting a new multiplier pretty easy:

    import Foundation

    extension NSLayoutConstraint {
    
    func setMultiplier(multiplier:CGFloat) {
        
        let newConstraint = NSLayoutConstraint(
            item: firstItem,
            attribute: firstAttribute,
            relatedBy: relation,
            toItem: secondItem,
            attribute: secondAttribute,
            multiplier: multiplier,
            constant: constant)
        
        newConstraint.priority = priority
        
        NSLayoutConstraint.deactivateConstraints([self])
        NSLayoutConstraint.activateConstraints([newConstraint])
        }
    }

Demo usage:

    override func viewDidLoad() {
        let newMultiplier:CGFloat = 50
        myDemoConstrait.setMultiplier(newMultiplier)
        //If later in view lifecycle, you may need to call view.layoutIfNeeded() 
    }

";;added 52 characters in body
101397103;33003217;2854041;5;e7f4bd74-5c21-4f86-9e4a-af20b320d52e;2015-10-08 18:50:11.0;"Here is an NSLayoutConstraint extension in Swift that makes setting a new multiplier pretty easy:

    import Foundation

    extension NSLayoutConstraint {
    
    func setMultiplier(multiplier:CGFloat) {
        
        let newConstraint = NSLayoutConstraint(
            item: firstItem,
            attribute: firstAttribute,
            relatedBy: relation,
            toItem: secondItem,
            attribute: secondAttribute,
            multiplier: multiplier,
            constant: constant)
        
        newConstraint.priority = priority
        newConstraint.shouldBeArchived = constraint.shouldBeArchived
        newConstraint.identifier = constraint.identifier
        newConstraint.active = constraint.active
        
        NSLayoutConstraint.deactivateConstraints([self])
        NSLayoutConstraint.activateConstraints([newConstraint])
        }
    }

Demo usage:

    @IBOutlet weak var myDemoConstraint:NSLayoutConstraint!

    override func viewDidLoad() {
        let newMultiplier:CGFloat = 50
        myDemoConstraint.setMultiplier(newMultiplier)

        //If later in view lifecycle, you may need to call view.layoutIfNeeded() 
    }

";;fixed spelling, added better demo, improved extension
110107327;33003217;1589731;5;4fabb163-b5fa-4258-be40-6aa714d29a92;2016-02-05 00:54:22.0;"Here is an NSLayoutConstraint extension in Swift that makes setting a new multiplier pretty easy:

    import Foundation

    extension NSLayoutConstraint {
    
    func setMultiplier(multiplier:CGFloat) {
        
        let newConstraint = NSLayoutConstraint(
            item: firstItem,
            attribute: firstAttribute,
            relatedBy: relation,
            toItem: secondItem,
            attribute: secondAttribute,
            multiplier: multiplier,
            constant: constant)
        
        newConstraint.priority = priority
        newConstraint.shouldBeArchived = self.shouldBeArchived
        newConstraint.identifier = self.identifier
        newConstraint.active = self.active
        
        NSLayoutConstraint.deactivateConstraints([self])
        NSLayoutConstraint.activateConstraints([newConstraint])
        }
    }

Demo usage:

    @IBOutlet weak var myDemoConstraint:NSLayoutConstraint!

    override func viewDidLoad() {
        let newMultiplier:CGFloat = 50
        myDemoConstraint.setMultiplier(newMultiplier)

        //If later in view lifecycle, you may need to call view.layoutIfNeeded() 
    }

";;use of unresolved identifier 'constraint'
110176486;33003217;2854041;5;b25c3d4b-3c49-4925-9956-c982cab3b2ad;2016-02-05 19:49:48.0;"Here is an NSLayoutConstraint extension in Swift that makes setting a new multiplier pretty easy:

    import Foundation
    import UIKit


    extension NSLayoutConstraint {
    
    func setMultiplier(multiplier:CGFloat) {
        
        let newConstraint = NSLayoutConstraint(
            item: firstItem,
            attribute: firstAttribute,
            relatedBy: relation,
            toItem: secondItem,
            attribute: secondAttribute,
            multiplier: multiplier,
            constant: constant)
        
        newConstraint.priority = priority
        newConstraint.shouldBeArchived = self.shouldBeArchived
        newConstraint.identifier = self.identifier
        newConstraint.active = self.active
        
        NSLayoutConstraint.deactivateConstraints([self])
        NSLayoutConstraint.activateConstraints([newConstraint])
        }
    }

Demo usage:

    @IBOutlet weak var myDemoConstraint:NSLayoutConstraint!

    override func viewDidLoad() {
        let newMultiplier:CGFloat = 50
        myDemoConstraint.setMultiplier(newMultiplier)

        //If later in view lifecycle, you may need to call view.layoutIfNeeded() 
    }

";;added 20 characters in body
110176818;33003217;2854041;5;1a62419b-a646-4a50-9dcd-a583536e3e40;2016-02-05 19:55:45.0;"Here is an NSLayoutConstraint extension in Swift that makes setting a new multiplier pretty easy:

    import Foundation
    import UIKit


    extension NSLayoutConstraint {
    
    func setMultiplier(multiplier:CGFloat) -> NSLayoutConstraint {
        
        let newConstraint = NSLayoutConstraint(
            item: firstItem,
            attribute: firstAttribute,
            relatedBy: relation,
            toItem: secondItem,
            attribute: secondAttribute,
            multiplier: multiplier,
            constant: constant)
        
        newConstraint.priority = priority
        newConstraint.shouldBeArchived = self.shouldBeArchived
        newConstraint.identifier = self.identifier
        newConstraint.active = self.active
        
        NSLayoutConstraint.deactivateConstraints([self])
        NSLayoutConstraint.activateConstraints([newConstraint])
        return newConstraint
        }
    }

Demo usage:

    @IBOutlet weak var myDemoConstraint:NSLayoutConstraint!

    override func viewDidLoad() {
        let newMultiplier:CGFloat = 50
        myDemoConstraint = myDemoConstraint.setMultiplier(newMultiplier)

        //If later in view lifecycle, you may need to call view.layoutIfNeeded() 
    }

";;Outlet stores updated constraint
116247019;33003217;2854041;5;e3e489b5-4739-494c-9269-2c9ad0fda598;2016-04-21 07:43:24.0;"Here is an NSLayoutConstraint extension in Swift that makes setting a new multiplier pretty easy:

    import Foundation
    import UIKit


    extension NSLayoutConstraint {
    
    func setMultiplier(multiplier:CGFloat) -> NSLayoutConstraint {
        
        let newConstraint = NSLayoutConstraint(
            item: firstItem,
            attribute: firstAttribute,
            relatedBy: relation,
            toItem: secondItem,
            attribute: secondAttribute,
            multiplier: multiplier,
            constant: constant)
        
        newConstraint.priority = priority
        newConstraint.shouldBeArchived = self.shouldBeArchived
        newConstraint.identifier = self.identifier
        newConstraint.active = true
        
        NSLayoutConstraint.deactivateConstraints([self])
        NSLayoutConstraint.activateConstraints([newConstraint])
        return newConstraint
        }
    }

Demo usage:

    @IBOutlet weak var myDemoConstraint:NSLayoutConstraint!

    override func viewDidLoad() {
        let newMultiplier:CGFloat = 50
        myDemoConstraint = myDemoConstraint.setMultiplier(newMultiplier)

        //If later in view lifecycle, you may need to call view.layoutIfNeeded() 
    }

";;Fixed code causing compiler warning
131234092;33003217;3765457;5;64ea22a1-d6ee-4eef-8b43-80377900bcae;2016-11-10 09:25:33.0;"Here is an NSLayoutConstraint extension in Swift that makes setting a new multiplier pretty easy:

    import Foundation
    import UIKit


    extension NSLayoutConstraint {
    
    func setMultiplier(multiplier:CGFloat) -> NSLayoutConstraint {
        
        let newConstraint = NSLayoutConstraint(
            item: firstItem,
            attribute: firstAttribute,
            relatedBy: relation,
            toItem: secondItem,
            attribute: secondAttribute,
            multiplier: multiplier,
            constant: constant)
        
        newConstraint.priority = priority
        newConstraint.shouldBeArchived = self.shouldBeArchived
        newConstraint.identifier = self.identifier
        newConstraint.active = true
        
        NSLayoutConstraint.deactivateConstraints([self])
        NSLayoutConstraint.activateConstraints([newConstraint])
        return newConstraint
        }
    }

**In Swift 3.0**
     


    import Foundation
    import UIKit
    extension NSLayoutConstraint {
        /**
         Change multiplier constraint
         
         - parameter multiplier: CGFloat
         - returns: NSLayoutConstraint
        */
        func setMultiplier(multiplier:CGFloat) -> NSLayoutConstraint {
            
            let newConstraint = NSLayoutConstraint(
                item: firstItem,
                attribute: firstAttribute,
                relatedBy: relation,
                toItem: secondItem,
                attribute: secondAttribute,
                multiplier: multiplier,
                constant: constant)
            
            newConstraint.priority = priority
            newConstraint.shouldBeArchived = self.shouldBeArchived
            newConstraint.identifier = self.identifier
            newConstraint.isActive = true
            
            NSLayoutConstraint.deactivate([self])
            NSLayoutConstraint.activate([newConstraint])
            return newConstraint
        }
    }


Demo usage:

    @IBOutlet weak var myDemoConstraint:NSLayoutConstraint!

    override func viewDidLoad() {
        let newMultiplier:CGFloat = 50
        myDemoConstraint = myDemoConstraint.setMultiplier(newMultiplier)

        //If later in view lifecycle, you may need to call view.layoutIfNeeded() 
    }

";;added 1085 characters in body
135013651;33003217;5358806;5;07e4da06-4bbb-4032-bcc9-8b9b3b44dbfb;2017-01-01 19:13:47.0;"Here is an NSLayoutConstraint extension in Swift that makes setting a new multiplier pretty easy:

    import Foundation
    import UIKit


    extension NSLayoutConstraint {
    
    func setMultiplier(multiplier:CGFloat) -> NSLayoutConstraint {
        
        let newConstraint = NSLayoutConstraint(
            item: firstItem,
            attribute: firstAttribute,
            relatedBy: relation,
            toItem: secondItem,
            attribute: secondAttribute,
            multiplier: multiplier,
            constant: constant)
        
        newConstraint.priority = priority
        newConstraint.shouldBeArchived = self.shouldBeArchived
        newConstraint.identifier = self.identifier
        newConstraint.active = true
        
        NSLayoutConstraint.deactivateConstraints([self])
        NSLayoutConstraint.activateConstraints([newConstraint])
        return newConstraint
        }
    }

**In Swift 3.0**
     


    import Foundation
    import UIKit
    extension NSLayoutConstraint {
        /**
         Change multiplier constraint
         
         - parameter multiplier: CGFloat
         - returns: NSLayoutConstraint
        */
        func setMultiplier(multiplier:CGFloat) -> NSLayoutConstraint {
            
            NSLayoutConstraint.deactivate([self])

            let newConstraint = NSLayoutConstraint(
                item: firstItem,
                attribute: firstAttribute,
                relatedBy: relation,
                toItem: secondItem,
                attribute: secondAttribute,
                multiplier: multiplier,
                constant: constant)
            
            newConstraint.priority = priority
            newConstraint.shouldBeArchived = self.shouldBeArchived
            newConstraint.identifier = self.identifier
            
            NSLayoutConstraint.activate([newConstraint])
            return newConstraint
        }
    }


Demo usage:

    @IBOutlet weak var myDemoConstraint:NSLayoutConstraint!

    override func viewDidLoad() {
        let newMultiplier:CGFloat = 50
        myDemoConstraint = myDemoConstraint.setMultiplier(newMultiplier)

        //If later in view lifecycle, you may need to call view.layoutIfNeeded() 
    }
";;based on tzaloga's comment. he is right man. thank you.
135013653;33003217;1033581;5;4275c41a-652b-4ed7-8d63-d242cd2ffe43;2017-01-01 19:13:47.0;"Here is an NSLayoutConstraint extension in Swift that makes setting a new multiplier pretty easy:

    import Foundation
    import UIKit


    extension NSLayoutConstraint {
    
    func setMultiplier(multiplier:CGFloat) -> NSLayoutConstraint {
        
        NSLayoutConstraint.deactivateConstraints([self])
        
        let newConstraint = NSLayoutConstraint(
            item: firstItem,
            attribute: firstAttribute,
            relatedBy: relation,
            toItem: secondItem,
            attribute: secondAttribute,
            multiplier: multiplier,
            constant: constant)
        
        newConstraint.priority = priority
        newConstraint.shouldBeArchived = self.shouldBeArchived
        newConstraint.identifier = self.identifier
        
        NSLayoutConstraint.activateConstraints([newConstraint])
        return newConstraint
        }
    }

**In Swift 3.0**
     


    import Foundation
    import UIKit
    extension NSLayoutConstraint {
        /**
         Change multiplier constraint
         
         - parameter multiplier: CGFloat
         - returns: NSLayoutConstraint
        */
        func setMultiplier(multiplier:CGFloat) -> NSLayoutConstraint {
            
            NSLayoutConstraint.deactivate([self])

            let newConstraint = NSLayoutConstraint(
                item: firstItem,
                attribute: firstAttribute,
                relatedBy: relation,
                toItem: secondItem,
                attribute: secondAttribute,
                multiplier: multiplier,
                constant: constant)
            
            newConstraint.priority = priority
            newConstraint.shouldBeArchived = self.shouldBeArchived
            newConstraint.identifier = self.identifier
            
            NSLayoutConstraint.activate([newConstraint])
            return newConstraint
        }
    }


Demo usage:

    @IBOutlet weak var myDemoConstraint:NSLayoutConstraint!

    override func viewDidLoad() {
        let newMultiplier:CGFloat = 50
        myDemoConstraint = myDemoConstraint.setMultiplier(newMultiplier)

        //If later in view lifecycle, you may need to call view.layoutIfNeeded() 
    }
";;based on tzaloga's comment. he is right. extending the edit to Swift 2 as well.
136755937;33003217;294884;5;e274ebb3-98a7-490b-89ef-272e88228ed9;2017-01-24 20:25:48.0;"Here is an NSLayoutConstraint extension in Swift that makes setting a new multiplier pretty easy:

    import Foundation
    import UIKit


    extension NSLayoutConstraint {
    
    func setMultiplier(multiplier:CGFloat) -> NSLayoutConstraint {
        
        NSLayoutConstraint.deactivateConstraints([self])
        
        let newConstraint = NSLayoutConstraint(
            item: firstItem,
            attribute: firstAttribute,
            relatedBy: relation,
            toItem: secondItem,
            attribute: secondAttribute,
            multiplier: multiplier,
            constant: constant)
        
        newConstraint.priority = priority
        newConstraint.shouldBeArchived = self.shouldBeArchived
        newConstraint.identifier = self.identifier
        
        NSLayoutConstraint.activateConstraints([newConstraint])
        return newConstraint
        }
    }

**In Swift 3.0**
     


    import Foundation
    import UIKit
    extension NSLayoutConstraint {
        /**
         Change multiplier constraint
         
         - parameter multiplier: CGFloat
         - returns: NSLayoutConstraint
        */
        func setMultiplier(multiplier:CGFloat) -> NSLayoutConstraint {
            
            NSLayoutConstraint.deactivate([self])

            let newConstraint = NSLayoutConstraint(
                item: firstItem,
                attribute: firstAttribute,
                relatedBy: relation,
                toItem: secondItem,
                attribute: secondAttribute,
                multiplier: multiplier,
                constant: constant)
            
            newConstraint.priority = priority
            newConstraint.shouldBeArchived = self.shouldBeArchived
            newConstraint.identifier = self.identifier
            
            NSLayoutConstraint.activate([newConstraint])
            return newConstraint
        }
    }


Demo usage:

    @IBOutlet weak var myDemoConstraint:NSLayoutConstraint!

    override func viewDidLoad() {
        let newMultiplier:CGFloat = 0.80
        myDemoConstraint = myDemoConstraint.setMultiplier(newMultiplier)

        //If later in view lifecycle, you may need to call view.layoutIfNeeded() 
    }
";;added 2 characters in body
