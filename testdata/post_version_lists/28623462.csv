Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
84190978;28623462;211665;2;b832aebe-6230-4b00-8d09-ba617d2aef49;2015-02-20 07:12:49.0;"This (untested) script should display your process stdout:&#xD;&#xA;&#xD;&#xA;    dtrace -qn ""syscall::write:entry /pid == $pid && arg0 == 1 /&#xD;&#xA;        { printf(""%s"",copyinstr(arg1)); }""&#xD;&#xA;&#xD;&#xA;`pid` should be set to the process id of the java application to trace, replace `1` by `2` if you want to trace `stderr` vs `stdin`.";;
84243472;28623462;211665;5;63cb4335-fc2b-4bba-bd42-6557ba20e909;2015-02-20 20:31:33.0;"This script should display a given process stdout:&#xD;&#xA;&#xD;&#xA;    #!/bin/ksh&#xD;&#xA;    pid=$1&#xD;&#xA;    dtrace -qn ""syscall::write:entry /pid == $pid && arg0 == 1 /&#xD;&#xA;      { printf(\\""%s\\"",copyinstr(arg1)); }""&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;You should should pass the process id of the java application to trace as its first argument, eg. `$(pgrep -f ""java -jar SomeFile.jar"")`.&#xD;&#xA;&#xD;&#xA;Replace `arg0 == 1` by `arg0 == 2` if you want to trace `stderr` vs `stdin`.";;added 63 characters in body
84271070;28623462;211665;5;5e9913d1-12b3-436d-a7c7-14d3d6dfc91f;2015-02-21 06:09:57.0;"This script should display a given process `stdout`:&#xD;&#xA;&#xD;&#xA;    #!/bin/ksh&#xD;&#xA;    pid=$1&#xD;&#xA;    dtrace -qn ""syscall::write:entry /pid == $pid && arg0 == 1 /&#xD;&#xA;      { printf(\\""%s\\"",copyinstr(arg1)); }""&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;You should should pass the process id of the java application to trace as its first argument, eg. `$(pgrep -f ""java -jar SomeFile.jar"")`.&#xD;&#xA;&#xD;&#xA;Replace `arg0 == 1` by `arg0 == 2` if you want to trace `stderr` vs `stdin`.&#xD;&#xA;&#xD;&#xA;Here is another method that will show all output from your process, and detailed one for both `stdout` and `stderr` (3799 is your target process pid):&#xD;&#xA;&#xD;&#xA;    truss -w1,2 -t write -p 3799";;added 185 characters in body
84271570;28623462;211665;5;1b572cfe-4c38-4342-b24a-c4e3a31bb0aa;2015-02-21 06:28:40.0;"This script should display a given process `stdout`:&#xD;&#xA;&#xD;&#xA;    #!/bin/ksh&#xD;&#xA;    pid=$1&#xD;&#xA;    dtrace -qn ""syscall::write:entry /pid == $pid && arg0 == 1 /&#xD;&#xA;      { printf(\\""%s\\"",copyinstr(arg1)); }""&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;You should should pass the process id of the java application to trace as its first argument, eg. `$(pgrep -f ""java -jar SomeFile.jar"")`.&#xD;&#xA;&#xD;&#xA;Replace `arg0 == 1` by `arg0 == 2` if you want to trace `stderr` vs `stdin`.&#xD;&#xA;&#xD;&#xA;Here is another method that will show all output from your process, and a full detailed one for both `stdout` and `stderr` (3799 is your target process pid):&#xD;&#xA;&#xD;&#xA;    truss -w1,2 -t write -p 3799";;added 7 characters in body
84378069;28623462;211665;5;eaa874d6-adc4-4fce-b9c2-9c39075ded27;2015-02-23 09:21:01.0;"Yes, it is possible to snoop any process output with Solaris native tools.&#xD;&#xA;&#xD;&#xA;One way would be using `dtrace` which allows tracing processes even when they are already grabbed by a debugger or similar tool.&#xD;&#xA;&#xD;&#xA;This dtrace script will display a given process `stdout`:&#xD;&#xA;&#xD;&#xA;    #!/bin/ksh&#xD;&#xA;    pid=$1&#xD;&#xA;    dtrace -qn ""syscall::write:entry /pid == $pid && arg0 == 1 /&#xD;&#xA;      { printf(\\""%s\\"",copyinstr(arg1)); }""&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;You should should pass the process id of the java application to trace as its first argument, eg. `$(pgrep -f ""java -jar SomeFile.jar"")`.&#xD;&#xA;&#xD;&#xA;Replace `arg0 == 1` by `arg0 == 2` if you want to trace `stderr` vs `stdin`.&#xD;&#xA;&#xD;&#xA;Another native way is to use the `truss` command. The following script will show all writes from your process to any file descriptors, and will include a full detailed trace for both `stdout` and `stderr` (3799 is your target process pid):&#xD;&#xA;&#xD;&#xA;    truss -w1,2 -t write -p 3799";;added 297 characters in body
84378728;28623462;211665;5;57aa5613-5fc0-49ed-93ea-2de6e1a12c96;2015-02-23 09:29:43.0;"Yes, it is possible to snoop any process output with Solaris native tools.&#xD;&#xA;&#xD;&#xA;One way would be using `dtrace` which allows tracing processes even when they are already grabbed by a debugger or similar tool.&#xD;&#xA;&#xD;&#xA;This dtrace script will display a given process `stdout`:&#xD;&#xA;&#xD;&#xA;    #!/bin/ksh&#xD;&#xA;    pid=$1&#xD;&#xA;    dtrace -qn ""syscall::write:entry /pid == $pid && arg0 == 1 /&#xD;&#xA;      { printf(\\""%s\\"",copyinstr(arg1)); }""&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;You should should pass the process id of the java application to trace as its first argument, eg. `$(pgrep -f ""java -jar SomeFile.jar"")`.&#xD;&#xA;&#xD;&#xA;Replace `arg0 == 1` by `arg0 == 2` if you want to trace `stderr` vs `stdin`.&#xD;&#xA;&#xD;&#xA;Should you want to see non displayable characters (in octal), you might use this slightly modified version:&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    #!/bin/ksh&#xD;&#xA;    pid=$1&#xD;&#xA;    dtrace -qn ""syscall::write:entry /pid == $pid && arg0 == 1 /&#xD;&#xA;      { printf(\\""%s\\"",copyinstr(arg1)); }"" | od -c&#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;Another native way is to use the `truss` command. The following script will show all writes from your process to any file descriptors, and will include a full detailed trace for both `stdout` and `stderr` (3799 is your target process pid):&#xD;&#xA;&#xD;&#xA;    truss -w1,2 -t write -p 3799";;added 265 characters in body
84414790;28623462;211665;5;4e419270-dc02-4f03-8799-e27dfad0f187;2015-02-23 17:57:16.0;"Yes, it is possible to snoop any process output with Solaris native tools.&#xD;&#xA;&#xD;&#xA;One way would be using `dtrace` which allows tracing processes even when they are already grabbed by a debugger or similar tool.&#xD;&#xA;&#xD;&#xA;This `dtrace` script will display a given process `stdout`:&#xD;&#xA;&#xD;&#xA;    #!/bin/ksh&#xD;&#xA;    pid=$1&#xD;&#xA;    dtrace -qn ""syscall::write:entry /pid == $pid && arg0 == 1 /&#xD;&#xA;      { printf(\\""%s\\"",copyinstr(arg1)); }""&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;You should should pass the process id of the java application to trace as its first argument, eg. `$(pgrep -f ""java -jar SomeFile.jar"")`.&#xD;&#xA;&#xD;&#xA;Replace `arg0 == 1` by `arg0 == 2` if you want to trace `stderr` vs `stdin`.&#xD;&#xA;&#xD;&#xA;Should you want to see non displayable characters (in octal), you might use this slightly modified version:&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    #!/bin/ksh&#xD;&#xA;    pid=$1&#xD;&#xA;    dtrace -qn ""syscall::write:entry /pid == $pid && arg0 == 1 /&#xD;&#xA;      { printf(\\""%s\\"",copyinstr(arg1)); }"" | od -c&#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;Another native way is to use the `truss` command. The following script will show all writes from your process to any file descriptors, and will include a full detailed trace for both `stdout` and `stderr` (3799 is your target process pid):&#xD;&#xA;&#xD;&#xA;    truss -w1,2 -t write -p 3799&#xD;&#xA;&#xD;&#xA;-----&#xD;&#xA;dtrace:&#xD;&#xA;http://docs.oracle.com/cd/E18752_01/html/819-5488/gcgkk.html&#xD;&#xA;&#xD;&#xA;truss:&#xD;&#xA;http://docs.oracle.com/cd/E36784_01/html/E36870/truss-1.html#scrolltoc";;added 164 characters in body
