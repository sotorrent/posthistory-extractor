Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
15386586;7016109;863791;2;404e434d-53da-4d7c-bbec-87856f066eac;2011-08-10 18:48:55.0;"Just to give little update before putting my question....&#xD;&#xA;&#xD;&#xA;I've been able to come up with some additional features on the jqgrid that I'm using (after going through many forums) including: copy-paste back and forth from Excel to jqgrid, edit cell on keypress and dblclick, copy and paste multiple cells from one block to another on the same grid using mouse selection (from here http://stackoverflow.com/questions/1821074/using-javascript-to-sum-selected-cells-in-ie6)&#xD;&#xA;&#xD;&#xA;Most of the copy paste features works on IE only as of now. I save all the changes together on ""Save"" button click so all the updates on the cells are on screen only until user hits the ""Save"" button.&#xD;&#xA;&#xD;&#xA;Although, things are still in flux right now, I'd like to have the implementation design on paper now than later. I'm looking for an easy way to UNDO only the LAST change. I've been thinking of using jQuery's ""data()"" and ""removeData()"" methods to implement this but if there is anything already existing in jqgrid framework that would help, I would like to know. Any suggestions??&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    <style type=""text/css"">&#xD;&#xA;        .sel {background-color: #96B9DC !important; }&#xD;&#xA;        .altered {}&#xD;&#xA;    </style>&#xD;&#xA;&#xD;&#xA;    <div style=""width:100%; background-color:#FFF; border:1px solid #000;""><input id=""btnsavechanges"" value=""Save Changes"" style=""width:120px;"" class=""formbutton ui-corner-all"" type=""button"" onclick=""getChanges(); return false;"" /></div>&#xD;&#xA;    <table id=""grd_asset"" width=""100%"" onSelectStart=""return false;""></table>&#xD;&#xA;    <div id=""pfrmac"" style='width:100%;'></div>&#xD;&#xA;    <input type=""hidden"" id=""hidSelected"" value="""" />&#xD;&#xA;&#xD;&#xA;    <!-- copy content from the grid cells -->&#xD;&#xA;    <input type=""hidden"" id=""hidCopiedText"" value="""" />&#xD;&#xA;&#xD;&#xA;    <!-- Start and End of cell selection -->&#xD;&#xA;    <input type=""hidden"" id=""hidStartCell"" value="""" />&#xD;&#xA;    <input type=""hidden"" id=""hidEndCell"" value="""" />&#xD;&#xA;&#xD;&#xA;    <!-- Start and End of last modified cell(s) -->&#xD;&#xA;    <input type=""hidden"" id=""hidModStartCell"" value="""" />&#xD;&#xA;    <input type=""hidden"" id=""hidModEndCell"" value="""" />&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    <script type=""text/javascript"">&#xD;&#xA;&#xD;&#xA;        var selICol; //iCol of selected cell&#xD;&#xA;        var selIRow; //iRow of selected cell&#xD;&#xA;&#xD;&#xA;        /*************************************************/&#xD;&#xA;        /**************** Grid Utilities  ****************/&#xD;&#xA;        /*************************************************/&#xD;&#xA;        FnGrid = function () {&#xD;&#xA;            this.GridColumns = function () {&#xD;&#xA;                return assetGrid.jqGrid('getGridParam', 'colModel');&#xD;&#xA;            }&#xD;&#xA;            this.GetSelCells = function () {&#xD;&#xA;                return assetGrid.find(""td.sel"");&#xD;&#xA;            }&#xD;&#xA;            this.ClearSelection = function () {&#xD;&#xA;                assetGrid.find(""td"").removeClass(""sel"");&#xD;&#xA;            }&#xD;&#xA;            this.ClearSavedHistory = function () {&#xD;&#xA;                assetGrid.removeData();&#xD;&#xA;            }&#xD;&#xA;            this.ClearMarkedChanges = function () {&#xD;&#xA;                assetGrid.find(""tr"").removeClass(""altered"");&#xD;&#xA;            }&#xD;&#xA;            this.GetRowCells = function (cell) {&#xD;&#xA;                return cell.parent().children(""td"")&#xD;&#xA;            }&#xD;&#xA;            this.GetRowId = function (cell) {&#xD;&#xA;                var row = cell.closest('tr.jqgrow');&#xD;&#xA;                return row.attr('id');&#xD;&#xA;            }&#xD;&#xA;            this.GetRowIndex = function (cell) {&#xD;&#xA;                var cellrow = cell.parent();&#xD;&#xA;                return cellrow.parent().children(""tr"").index(cellrow);&#xD;&#xA;            }&#xD;&#xA;            this.GetColIndex = function (cell) {&#xD;&#xA;                return cell.parent().children(""td"").index(cell);&#xD;&#xA;            }&#xD;&#xA;            this.IsInEditMode = function () {&#xD;&#xA;                var RecordsInEditMode = assetGrid.find(""tr[editable='1'"");&#xD;&#xA;                return (RecordsInEditMode && RecordsInEditMode.length > 0);&#xD;&#xA;            }&#xD;&#xA;            this.HandleEditMode = function (cell, e) {&#xD;&#xA;                var ctrl = e.ctrlKey;&#xD;&#xA;                var alt = e.altKey;&#xD;&#xA;&#xD;&#xA;                var keyCode = (e.keyCode ? e.keyCode : e.which);&#xD;&#xA;                if (keyCode) {&#xD;&#xA;                    if (keyCode >= 32 && keyCode <= 126 && !ctrl && !alt) {&#xD;&#xA;&#xD;&#xA;                        // switch the cell to edit mode if not already&#xD;&#xA;                        if (!($(cell).hasClass(""edit-cell""))) {&#xD;&#xA;                            assetGrid.editCell(this.GetRowIndex($(cell)), this.GetColIndex($(cell)), true);&#xD;&#xA;                            // transfer focus to the input&#xD;&#xA;                            var inp = $(cell).children(""input,select,textarea"")&#xD;&#xA;                            if (inp) {&#xD;&#xA;                                $(inp[0]).val('');&#xD;&#xA;                                inp.focus();&#xD;&#xA;                            }&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;                return true;&#xD;&#xA;            }&#xD;&#xA;            this.HandleInputNavigation = function (ele, evt) {&#xD;&#xA;                evt = window.event || evt;&#xD;&#xA;&#xD;&#xA;                switch (evt.keyCode) {&#xD;&#xA;                    // down arrow                   &#xD;&#xA;                    case 40:&#xD;&#xA;                        if (!$(ele).parent().hasClass(""altered""))&#xD;&#xA;                            $(ele).parent().addClass(""altered"");&#xD;&#xA;&#xD;&#xA;                        irow = this.GetRowIndex($(ele).parent());&#xD;&#xA;                        icol = this.GetColIndex($(ele).parent())&#xD;&#xA;                        var prevcell = irow + "","" + icol;&#xD;&#xA;                        $(""#hidModStartCell"").val(prevcell);&#xD;&#xA;                        $(""#hidModEndCell"").val(prevcell);&#xD;&#xA;&#xD;&#xA;                        downele = $(ele).parent()&#xD;&#xA;                                .parent()&#xD;&#xA;                                .next()&#xD;&#xA;                                .children(""td"")[this.GetColIndex($(ele).parent())];&#xD;&#xA;&#xD;&#xA;                        this.ClearSelection();&#xD;&#xA;                        assetGrid.editCell(this.GetRowIndex($(downele)), this.GetColIndex($(downele)), true);&#xD;&#xA;                        break;&#xD;&#xA;&#xD;&#xA;                    // up arrow                   &#xD;&#xA;                    case 38:&#xD;&#xA;                        if (!$(ele).parent().hasClass(""altered""))&#xD;&#xA;                            $(ele).parent().addClass(""altered"");&#xD;&#xA;&#xD;&#xA;                        irow = this.GetRowIndex($(ele).parent());&#xD;&#xA;                        icol = this.GetColIndex($(ele).parent())&#xD;&#xA;                        var prevcell = irow + "","" + icol;&#xD;&#xA;                        $(""#hidModStartCell"").val(prevcell);&#xD;&#xA;                        $(""#hidModEndCell"").val(prevcell);&#xD;&#xA;&#xD;&#xA;                        topele = $(ele).parent()&#xD;&#xA;                                .parent()&#xD;&#xA;                                .prev()&#xD;&#xA;                                .children(""td"")[this.GetColIndex($(ele).parent())];&#xD;&#xA;&#xD;&#xA;                        if (this.GetRowIndex($(topele)) <= 0) break;&#xD;&#xA;&#xD;&#xA;                        this.ClearSelection();&#xD;&#xA;                        assetGrid.editCell(this.GetRowIndex($(topele)), this.GetColIndex($(topele)), true);&#xD;&#xA;                        break;&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        var autocomp = new AutoCompleteRequest();&#xD;&#xA;        var lastSel = """";&#xD;&#xA;        var assetGrid = $('#grd_asset');&#xD;&#xA;        var start = null;&#xD;&#xA;        var fnassetgrid = new FnGrid();&#xD;&#xA;        var lastSel = -1;&#xD;&#xA;&#xD;&#xA;        function selectTo(cell) {&#xD;&#xA;            if (start == null)&#xD;&#xA;                return;&#xD;&#xA;            fnassetgrid.ClearSelection();&#xD;&#xA;            var stop = $(cell);&#xD;&#xA;            var tbl = start.closest(""table"");&#xD;&#xA;            var rs = tbl.children(""tbody"").children(""tr"");&#xD;&#xA;            var r0 = rs.index(start.parent()), c0 = fnassetgrid.GetColIndex(start);&#xD;&#xA;            var r1 = rs.index(stop.parent()), c1 = fnassetgrid.GetColIndex(stop);&#xD;&#xA;            var concat = """";&#xD;&#xA;            for (var i = r0; i <= r1; i++) {&#xD;&#xA;                var cells = $(rs.get(i)).children(""td"");&#xD;&#xA;                for (var j = c0; j <= c1; j++) {&#xD;&#xA;                    var cell = $(cells.get(j));&#xD;&#xA;                    cell.addClass(""sel"");&#xD;&#xA;                    concat += cell.html() + ""\\t"";&#xD;&#xA;                }&#xD;&#xA;                if (concat.lastIndexOf(""\\t"") == concat.length - 1)&#xD;&#xA;                    concat = concat.substring(0, concat.lastIndexOf(""\\t""));&#xD;&#xA;&#xD;&#xA;                concat += ""\\n"";&#xD;&#xA;            }&#xD;&#xA;            $(""#hidSelected"").val(concat.trim());&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        $(document).ready(function () {&#xD;&#xA;            /*************************************************/&#xD;&#xA;            /******************* THE GRID  *******************/&#xD;&#xA;            /*************************************************/&#xD;&#xA;            assetGrid.jqGrid({&#xD;&#xA;                datatype: function (pdata) {&#xD;&#xA;                    getData(pdata);&#xD;&#xA;                },&#xD;&#xA;                colNames: [' ', 'AssetId', 'Item#', 'Qty', 'Equip#', 'Year', 'Make', 'Model', 'Serial#', 'Class', 'IsLot', 'Cond', 'FLV', 'OLV', 'LVIP', 'FMV_R', 'FMV_E', 'FMV_I', 'FMV_ICU', 'Description'],&#xD;&#xA;                colModel: [&#xD;&#xA;                    { name: 'ctrls', width: 80, fixed: true, sortable: false, resize: false, formatter: 'actions',&#xD;&#xA;                        formatoptions: { keys: true }&#xD;&#xA;                    },&#xD;&#xA;   		            { name: 'AssetID', label: 'AssetID', width: 65, key: true, hidden: true },&#xD;&#xA;   		            { name: 'Sequence', label: 'Item#', width: 50, align: ""right"", sorttype: 'int', sortable: true, editoptions: { dataEvents: [{ type: 'keydown', fn: function (e) { fnassetgrid.HandleInputNavigation(this, e); } }]} },&#xD;&#xA;   		            { name: 'Quantity', label: 'Qty', width: 40, align: ""right"", sorttype: 'int', sortable: true, editoptions: { dataEvents: [{ type: 'keydown', fn: function (e) { fnassetgrid.HandleInputNavigation(this, e); } }]} },&#xD;&#xA;   		            { name: 'EquipmentNum', label: 'Equip#', width: 80, editable: true, editoptions: { dataEvents: [{ type: 'keydown', fn: function (e) { fnassetgrid.HandleInputNavigation(this, e); } }]} },&#xD;&#xA;   		            { name: 'ManufacturedYear', label: 'Year', width: 70, editable: true, edittype: 'text', editoptions: { size: 18, editrules: { url: false }, dataEvents: [{ type: 'keydown', fn: function (e) { fnassetgrid.HandleInputNavigation(this, e); } }]} },&#xD;&#xA;   		            { name: 'Make', label: 'Make', width: 105, editable: true, edittype: 'text', editoptions: {&#xD;&#xA;   		                size: 18,&#xD;&#xA;   		                dataEvents: [{&#xD;&#xA;   		                    type: 'focus',&#xD;&#xA;   		                    fn: function (e) {&#xD;&#xA;   		                        $(this).autocomplete({&#xD;&#xA;   		                            source: autocomp.source,&#xD;&#xA;   		                            delay: autocomp.delay,&#xD;&#xA;   		                            minLength: autocomp.minLength&#xD;&#xA;   		                        });&#xD;&#xA;&#xD;&#xA;   		                        $(this).bind(""autocompleteopen"", autocomp.open);&#xD;&#xA;   		                        $(this).bind(""autocompleteclose"", autocomp.close);&#xD;&#xA;   		                    }&#xD;&#xA;   		                }]&#xD;&#xA;   		            }&#xD;&#xA;   		            },&#xD;&#xA;                    { name: 'SerialNum', label: 'Serial#', width: 105, editable: true, edittype: 'text', editoptions: { size: 18, dataEvents: [{ type: 'keydown', fn: function (e) { fnassetgrid.HandleInputNavigation(this, e); } }]} },&#xD;&#xA;                    { name: 'Description', label: 'Description', fixed: false, editable: true, edittype: 'textarea', editoptions: { rows: ""10"", cols: ""40""} }&#xD;&#xA;   	            ],&#xD;&#xA;                rowNum: 10, /* no of recs in a grid */&#xD;&#xA;                width: 1330,&#xD;&#xA;                rowList: [10, 20, 30], /* array to construct a select box element in the pager */&#xD;&#xA;                pager: '#pfrmac',&#xD;&#xA;                sortname: 'AssetID', /* initial sorting column */&#xD;&#xA;                viewrecords: true,  /* Defines whether we want to display the number of total records from the query in the pager bar */&#xD;&#xA;                pginput: false,&#xD;&#xA;                sortorder: ""desc"",&#xD;&#xA;                cellEdit: true,&#xD;&#xA;                jsonReader: {&#xD;&#xA;                    root: function (obj) {&#xD;&#xA;                        return obj.SearchResultSet;&#xD;&#xA;                    },&#xD;&#xA;                    page: function (obj) { return 1; },&#xD;&#xA;                    total: function (obj) { return 1; },&#xD;&#xA;                    records: function (obj) {&#xD;&#xA;                        return obj.ItemCount;&#xD;&#xA;                    },&#xD;&#xA;                    id: ""AssetID"",&#xD;&#xA;                    repeatitems: false&#xD;&#xA;                },&#xD;&#xA;                loadonce: true,&#xD;&#xA;                caption: ""Asset list"",&#xD;&#xA;                height: '100%',&#xD;&#xA;                cellsubmit: 'clientArray',&#xD;&#xA;                beforeEditCell: function (rowid, cellname, value, iRow, iCol) {&#xD;&#xA;                    selICol = iCol;&#xD;&#xA;                    selIRow = iRow;&#xD;&#xA;&#xD;&#xA;                    // if the row should not be editable than simply turn the cells back to read only mode &#xD;&#xA;                    //assetGrid.editCell(iRow, iCol, false);&#xD;&#xA;                    //assetGrid.restoreCell(iRow,iCol);&#xD;&#xA;                },&#xD;&#xA;                gridComplete: function () {&#xD;&#xA;                    rowindex = 1;&#xD;&#xA;                    rows = assetGrid.find(""tr"");&#xD;&#xA;&#xD;&#xA;                    if (rows && rows.length > 1) {&#xD;&#xA;                        for (i = 1; i < rows.length; i++) {&#xD;&#xA;                            $(rows[i]).find(""td"").each(function (evt) {&#xD;&#xA;                                evt = window.event || evt;&#xD;&#xA;&#xD;&#xA;                                start = $(this);&#xD;&#xA;                                colindex = fnassetgrid.GetColIndex(start);&#xD;&#xA;                                if (colindex > 0) {&#xD;&#xA;                                    $(this).click(function () {&#xD;&#xA;                                        return false;&#xD;&#xA;                                    }).dblclick(function () {&#xD;&#xA;                                        if (!($(this).hasClass(""edit-cell""))) {&#xD;&#xA;                                            assetGrid.editCell(fnassetgrid.GetRowIndex($(this)), fnassetgrid.GetColIndex($(this)), true);&#xD;&#xA;                                            // transfer focus to the input&#xD;&#xA;                                            var inp = $(this).children(""input,select,textarea"")&#xD;&#xA;                                            if (inp) {&#xD;&#xA;                                                $(inp[0]).val('');&#xD;&#xA;                                                inp.focus();&#xD;&#xA;                                            }&#xD;&#xA;                                        }&#xD;&#xA;                                        else&#xD;&#xA;                                            return true;&#xD;&#xA;                                    }).mousedown(function () {&#xD;&#xA;                                        if (fnassetgrid.IsInEditMode())&#xD;&#xA;                                            return true;&#xD;&#xA;                                        start = $(this);&#xD;&#xA;                                        selectTo(this);&#xD;&#xA;                                        return false;&#xD;&#xA;                                    }).mouseover(function () {&#xD;&#xA;                                        selectTo(this);&#xD;&#xA;                                    }).mouseup(function () {&#xD;&#xA;                                        selectTo(this);&#xD;&#xA;                                        $(""#hidEndCell"").val(fnassetgrid.GetColIndex($(this)));&#xD;&#xA;                                        start = null;&#xD;&#xA;                                    }).keypress(function (e) {&#xD;&#xA;                                        fnassetgrid.HandleEditMode(this, e);&#xD;&#xA;                                    });&#xD;&#xA;                                }&#xD;&#xA;                            });&#xD;&#xA;                            rowindex++;&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;            });&#xD;&#xA;&#xD;&#xA;            //$(""#grd_asset"").jqGrid('navGrid','#pfrmac',{edit:false,add:false,del:false});&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;            $(""body"").mouseup(function () {&#xD;&#xA;                start = null;&#xD;&#xA;            });&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;            /*************************************************/&#xD;&#xA;            /*********** Global KEYUP integration  ***********/&#xD;&#xA;            /*************************************************/&#xD;&#xA;            $(assetGrid).keyup(function (e) {&#xD;&#xA;                var ctrl = e.ctrlKey&#xD;&#xA;                var key = e.charCode || e.keyCode || 0;&#xD;&#xA;&#xD;&#xA;                if ((ctrl && key == 88) /* CUT */ || (ctrl && key == 67) /* COPY */ || (ctrl && key == 86) /* PASTE */ || (ctrl && key == 90) /* UNDO */) {&#xD;&#xA;&#xD;&#xA;                    if ((ctrl && key == 88) /* CUT */ || (ctrl && key == 67) /* COPY */) {&#xD;&#xA;                        CopyToClipboard(""hidSelected"");&#xD;&#xA;&#xD;&#xA;                        var selectedCells = fnassetgrid.GetSelCells();&#xD;&#xA;&#xD;&#xA;                        if (selectedCells && selectedCells.length > 0) {&#xD;&#xA;                            $(""#hidStartCell"").val(fnassetgrid.GetRowIndex($(selectedCells[0])) + "","" + fnassetgrid.GetColIndex($(selectedCells[0])));&#xD;&#xA;                            $(""#hidEndCell"").val(fnassetgrid.GetRowIndex($(selectedCells[selectedCells.length - 1])) + "","" + fnassetgrid.GetColIndex($(selectedCells[selectedCells.length - 1])));&#xD;&#xA;                            $(""#hidCopiedText"").val($(""#hidSelected"").val());&#xD;&#xA;                        }&#xD;&#xA;                        else {&#xD;&#xA;                            $(""#hidStartCell"").val('');&#xD;&#xA;                            $(""#hidEndCell"").val('');&#xD;&#xA;                        }&#xD;&#xA;&#xD;&#xA;                        if (ctrl && key == 88) /* CUT */{&#xD;&#xA;                            assetGrid.find(""td.sel"").each(function () {&#xD;&#xA;                                row = $(this).closest('tr.jqgrow');&#xD;&#xA;                                rowId = row.attr('id');&#xD;&#xA;                                assetGrid.setCell(rowId, (fnassetgrid.GridColumns())[fnassetgrid.GetColIndex($(this))].name, '', '', '', true);&#xD;&#xA;                            });&#xD;&#xA;                            fnassetgrid.ClearSelection();&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                    else if (ctrl && key == 86) /* PASTE */{&#xD;&#xA;                        var clipboardata = getClipboardData();&#xD;&#xA;                        if (get_objtype(clipboardata) != ""[object String]"") {&#xD;&#xA;                            alert(""The data you are pasting either is empty or incompatible"");&#xD;&#xA;                            return false;&#xD;&#xA;                        }&#xD;&#xA;&#xD;&#xA;                        pasteinfo(assetGrid, clipboardata);&#xD;&#xA;                    }&#xD;&#xA;                    else if ((ctrl && key == 90) /* UNDO */) {&#xD;&#xA;                        if ($(""#hidModStartCell"").val() !== undefined && $(""#hidModStartCell"").val() != '' && $(""#hidModEndCell"").val() !== undefined && $(""#hidModEndCell"").val() != '') {&#xD;&#xA;                            startcell = $(""#hidModStartCell"").val().split(',');&#xD;&#xA;                            startrow = startcell[0] - 0;&#xD;&#xA;                            startcol = startcell[1] - 0;&#xD;&#xA;&#xD;&#xA;                            endcell = $(""#hidModEndCell"").val().split(',');&#xD;&#xA;                            endrow = endcell[0] - 0;&#xD;&#xA;                            endcol = endcell[1] - 0;&#xD;&#xA;&#xD;&#xA;                            for (i = startrow; i <= endrow; i++) {&#xD;&#xA;                                for (j = startcol; j <= endcol; j++) {&#xD;&#xA;                                    assetGrid.restoreCell(i, j);&#xD;&#xA;                                }&#xD;&#xA;                            }&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                    return false; // prevent bubbling&#xD;&#xA;                }&#xD;&#xA;                else&#xD;&#xA;                    return true; // let it bubble&#xD;&#xA;            });&#xD;&#xA;        });&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        /********************************************************************/&#xD;&#xA;        /*********** Method to retrieve Project Asset information ***********/&#xD;&#xA;        /********************************************************************/&#xD;&#xA;        function getData(pdata) {&#xD;&#xA;            $.ajax({&#xD;&#xA;                type: ""POST"",&#xD;&#xA;                contentType: ""application/json; charset=utf-8"",&#xD;&#xA;                url: '../api/Internalservices.asmx/GetProjectAssets',&#xD;&#xA;                data: ""{ projectid: '"" + getQuerystring('projectid', '') + ""', page: '"" + pdata.page +&#xD;&#xA;                        ""', pageSize: '"" + pdata.rows + ""', sortIndex: '"" + pdata.sidx +&#xD;&#xA;                        ""', sortDirection: '"" + pdata.sord + ""'}"",&#xD;&#xA;                dataType: ""json"",&#xD;&#xA;                success: function (jsondata, stat) {&#xD;&#xA;                    var thegrid = assetGrid[0];&#xD;&#xA;                    if (jsondata.hasOwnProperty('d'))&#xD;&#xA;                        jsondata = jsondata.d;&#xD;&#xA;&#xD;&#xA;                    thegrid.addJSONData(jsondata);&#xD;&#xA;                }&#xD;&#xA;            });&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        /********************************************************************/&#xD;&#xA;        /*********** Method to retrieve and submit altered asset information ***********/&#xD;&#xA;        /********************************************************************/&#xD;&#xA;        function getChanges() {&#xD;&#xA;            var editedxml = ""<?xml version='1.0' encoding='utf-8' ?\\>\\n"";&#xD;&#xA;            editedxml += ""<ASSETS>\\n"";&#xD;&#xA;            assetGrid.find(""tr.altered"").each(function () {&#xD;&#xA;                editedxml += ""<ASSET>\\n"";&#xD;&#xA;                $(this).children(""td"").each(function () {&#xD;&#xA;                    colindex = fnassetgrid.GetColIndex($(this));                    &#xD;&#xA;                    if (colindex > 0) {&#xD;&#xA;                        editedxml += ""<"" + (fnassetgrid.GridColumns())[colindex].name.toUpperCase() + "">"" + $(this).text().trim() + ""</"" + (fnassetgrid.GridColumns())[colindex].name.toUpperCase() + "">\\n"";&#xD;&#xA;                    }&#xD;&#xA;                })&#xD;&#xA;                editedxml += ""</ASSET>\\n"";&#xD;&#xA;            })&#xD;&#xA;            editedxml += ""</ASSETS>"";&#xD;&#xA;&#xD;&#xA;            fnassetgrid.ClearMarkedChanges();&#xD;&#xA;            &#xD;&#xA;            //TBD: submit XML to an AJAX service&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        var _browserPasteData = null;&#xD;&#xA;        function getClipboardData() {&#xD;&#xA;            if (_browserPasteData) // Safari/Chrome logic&#xD;&#xA;                return _browserPasteData;&#xD;&#xA;            if (window.clipboardData) // IE logic&#xD;&#xA;            {&#xD;&#xA;                return window.clipboardData.getData(""Text"");&#xD;&#xA;            }&#xD;&#xA;            else if (typeof (netscape) != ""undefined"") // Firefox logic&#xD;&#xA;            {&#xD;&#xA;                netscape.security.PrivilegeManager.enablePrivilege('UniversalXPConnect');&#xD;&#xA;                var clip = Components.classes[""@mozilla.org/widget/clipboard;1""].createInstance(Components.interfaces.nsIClipboard);&#xD;&#xA;                var trans = Components.classes[""@mozilla.org/widget/transferable;1""].createInstance(Components.interfaces.nsITransferable);&#xD;&#xA;                trans.addDataFlavor(""text/unicode"");&#xD;&#xA;                clip.getData(trans, clip.kGlobalClipboard);&#xD;&#xA;                var str = new Object();&#xD;&#xA;                var len = new Object();&#xD;&#xA;                trans.getTransferData(""text/unicode"", str, len);&#xD;&#xA;                if (str)&#xD;&#xA;                    return str.value.QueryInterface(Components.interfaces.nsISupportsString).toString();&#xD;&#xA;            }&#xD;&#xA;            return null;&#xD;&#xA;        }&#xD;&#xA;        // In Safari/Chrome the clipboard data can only be accessed&#xD;&#xA;        // from the onpaste event. In this sample the event is handled &#xD;&#xA;        // off the body element: <body onpaste=""browserPaste(event)"">&#xD;&#xA;        function browserPaste(e) {&#xD;&#xA;            _browserPasteData = e.clipboardData && e.clipboardData.getData ?&#xD;&#xA;                e.clipboardData.getData('text/plain') : null;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        function pasteinfo(objGrid, info) {&#xD;&#xA;            selectedCells = fnassetgrid.GetSelCells();&#xD;&#xA;            firstcell = $(selectedCells[0]);&#xD;&#xA;            firstselectedcolindex = fnassetgrid.GetColIndex(firstcell);&#xD;&#xA;            rowcellscount = fnassetgrid.GetRowCells(firstcell).length;&#xD;&#xA;&#xD;&#xA;            if (firstselectedcolindex == 0) {&#xD;&#xA;                alert(""You cannot paste into an non-editable column"");&#xD;&#xA;                return false;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            if (selectedCells && selectedCells.length > 0) {&#xD;&#xA;                // if the clipboard info is from the asset grid&#xD;&#xA;                if (info && info == $(""#hidCopiedText"").val()) {&#xD;&#xA;                    // last copied source cell&#xD;&#xA;                    hidStartCell = -1;&#xD;&#xA;                    if ($(""#hidStartCell"").val() != '' && $(""#hidStartCell"").val().split(',').length > 1) {&#xD;&#xA;                        hidStartCell = $(""#hidStartCell"").val().split(',')[1];&#xD;&#xA;                    }&#xD;&#xA;&#xD;&#xA;                    if (firstselectedcolindex != hidStartCell) {&#xD;&#xA;                        if (!confirm(""The data you are pasting comes from a different set of \\ncolumns than those that you are pasting into.\\n\\nAre you sure you want to paste into these columns?""))&#xD;&#xA;                            return false;&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;&#xD;&#xA;                $(""#hidModStartCell"").val(fnassetgrid.GetRowIndex(firstcell) + "","" + firstselectedcolindex);&#xD;&#xA;&#xD;&#xA;                var prevcell = null;&#xD;&#xA;                datarows = info.split(""\\n"");&#xD;&#xA;                if (datarows && datarows.length > 0) {&#xD;&#xA;                    currentrow = firstcell.parent();&#xD;&#xA;                    currentcell = firstcell;&#xD;&#xA;                    for (i = 0; i < datarows.length && currentrow.length > 0; ++i) {&#xD;&#xA;                        datarows[i] = datarows[i].split(""\\t"");&#xD;&#xA;                        var row = null;&#xD;&#xA;                        var rowId = null;&#xD;&#xA;                        var rowindex = null;&#xD;&#xA;                        for (j = 0; j < datarows[i].length && currentcell != null; ++j) {&#xD;&#xA;                            // mark the row as altered&#xD;&#xA;                            if (!currentcell.parent().hasClass(""altered""))&#xD;&#xA;                                currentcell.parent().addClass(""altered"");&#xD;&#xA;                            // for each outer iteration get the rowid&#xD;&#xA;                            if (row == null) {&#xD;&#xA;                                row = (currentcell).closest('tr.jqgrow');&#xD;&#xA;                                rowId = row.attr('id');&#xD;&#xA;                            }                            &#xD;&#xA;                            assetGrid.setCell(rowId, (fnassetgrid.GridColumns())[fnassetgrid.GetColIndex(currentcell)].name, datarows[i][j], '', '', true);&#xD;&#xA;                            prevcell = currentcell;&#xD;&#xA;                            currentcell = currentcell.next();&#xD;&#xA;                        }&#xD;&#xA;&#xD;&#xA;                        currentrow = currentrow.next();&#xD;&#xA;                        currentcell = $(currentrow.children(""td"")[firstselectedcolindex]);&#xD;&#xA;                    }                    &#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            if (prevcell != null)&#xD;&#xA;                $(""#hidModEndCell"").val(fnassetgrid.GetRowIndex(prevcell) + "","" + fnassetgrid.GetColIndex(prevcell));&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;    </script>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Many Thanks in advance!&#xD;&#xA;&#xD;&#xA;";;
15388755;7016109;863791;5;a5a0d493-c91c-42a4-afbe-89830f2c5ed8;2011-08-10 20:02:35.0;"Just to give little update before putting my question....&#xD;&#xA;&#xD;&#xA;I've been able to come up with some additional features on the jqgrid that I'm using (after going through many forums) including: copy-paste back and forth from Excel to jqgrid, edit cell on keypress and dblclick, copy and paste multiple cells from one block to another on the same grid using mouse selection (from here http://stackoverflow.com/questions/1821074/using-javascript-to-sum-selected-cells-in-ie6)&#xD;&#xA;&#xD;&#xA;Most of the copy paste features works on IE only as of now. I save all the changes together on ""Save"" button click so all the updates on the cells are on screen only until user hits the ""Save"" button.&#xD;&#xA;&#xD;&#xA;Although, things are still in flux right now, I'd like to have the implementation design on paper now than later. I'm looking for an easy way to UNDO only the LAST change. I've been thinking of using jQuery's ""data()"" and ""removeData()"" methods to implement this but if there is anything already existing in jqgrid framework that would help, I would like to know. Any suggestions??&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    <style type=""text/css"">&#xD;&#xA;        .sel {background-color: #96B9DC !important; }&#xD;&#xA;        .altered {}&#xD;&#xA;    </style>&#xD;&#xA;&#xD;&#xA;    <div style=""width:100%; background-color:#FFF; border:1px solid #000;""><input id=""btnsavechanges"" value=""Save Changes"" style=""width:120px;"" class=""formbutton ui-corner-all"" type=""button"" onclick=""getChanges(); return false;"" /></div>&#xD;&#xA;    <table id=""grd_asset"" width=""100%"" onSelectStart=""return false;""></table>&#xD;&#xA;    <div id=""pfrmac"" style='width:100%;'></div>&#xD;&#xA;    <input type=""hidden"" id=""hidSelected"" value="""" />&#xD;&#xA;&#xD;&#xA;    <!-- copy content from the grid cells -->&#xD;&#xA;    <input type=""hidden"" id=""hidCopiedText"" value="""" />&#xD;&#xA;&#xD;&#xA;    <!-- Start and End of cell selection -->&#xD;&#xA;    <input type=""hidden"" id=""hidStartCell"" value="""" />&#xD;&#xA;    <input type=""hidden"" id=""hidEndCell"" value="""" />&#xD;&#xA;&#xD;&#xA;    <!-- Start and End of last modified cell(s) -->&#xD;&#xA;    <input type=""hidden"" id=""hidModStartCell"" value="""" />&#xD;&#xA;    <input type=""hidden"" id=""hidModEndCell"" value="""" />&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    <script type=""text/javascript"">&#xD;&#xA;&#xD;&#xA;        var selICol; //iCol of selected cell&#xD;&#xA;        var selIRow; //iRow of selected cell&#xD;&#xA;&#xD;&#xA;        /*************************************************/&#xD;&#xA;        /**************** Grid Utilities  ****************/&#xD;&#xA;        /*************************************************/&#xD;&#xA;        FnGrid = function () {&#xD;&#xA;            this.GridColumns = function () {&#xD;&#xA;                return assetGrid.jqGrid('getGridParam', 'colModel');&#xD;&#xA;            }&#xD;&#xA;            this.GetSelCells = function () {&#xD;&#xA;                return assetGrid.find(""td.sel"");&#xD;&#xA;            }&#xD;&#xA;            this.ClearSelection = function () {&#xD;&#xA;                assetGrid.find(""td"").removeClass(""sel"");&#xD;&#xA;            }&#xD;&#xA;            this.ClearSavedHistory = function () {&#xD;&#xA;                assetGrid.removeData();&#xD;&#xA;            }&#xD;&#xA;            this.ClearMarkedChanges = function () {&#xD;&#xA;                assetGrid.find(""tr"").removeClass(""altered"");&#xD;&#xA;            }&#xD;&#xA;            this.GetRowCells = function (cell) {&#xD;&#xA;                return cell.parent().children(""td"")&#xD;&#xA;            }&#xD;&#xA;            this.GetRowId = function (cell) {&#xD;&#xA;                var row = cell.closest('tr.jqgrow');&#xD;&#xA;                return row.attr('id');&#xD;&#xA;            }&#xD;&#xA;            this.GetRowIndex = function (cell) {&#xD;&#xA;                var cellrow = cell.parent();&#xD;&#xA;                return cellrow.parent().children(""tr"").index(cellrow);&#xD;&#xA;            }&#xD;&#xA;            this.GetColIndex = function (cell) {&#xD;&#xA;                return cell.parent().children(""td"").index(cell);&#xD;&#xA;            }&#xD;&#xA;            this.IsInEditMode = function () {&#xD;&#xA;                var RecordsInEditMode = assetGrid.find(""tr[editable='1'"");&#xD;&#xA;                return (RecordsInEditMode && RecordsInEditMode.length > 0);&#xD;&#xA;            }&#xD;&#xA;            this.HandleEditMode = function (cell, e) {&#xD;&#xA;                var ctrl = e.ctrlKey;&#xD;&#xA;                var alt = e.altKey;&#xD;&#xA;&#xD;&#xA;                var keyCode = (e.keyCode ? e.keyCode : e.which);&#xD;&#xA;                if (keyCode) {&#xD;&#xA;                    if (keyCode >= 32 && keyCode <= 126 && !ctrl && !alt) {&#xD;&#xA;&#xD;&#xA;                        // switch the cell to edit mode if not already&#xD;&#xA;                        if (!($(cell).hasClass(""edit-cell""))) {&#xD;&#xA;                            assetGrid.editCell(this.GetRowIndex($(cell)), this.GetColIndex($(cell)), true);&#xD;&#xA;                            // transfer focus to the input&#xD;&#xA;                            var inp = $(cell).children(""input,select,textarea"")&#xD;&#xA;                            if (inp) {&#xD;&#xA;                                $(inp[0]).val('');&#xD;&#xA;                                inp.focus();&#xD;&#xA;                            }&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;                return true;&#xD;&#xA;            }&#xD;&#xA;            this.HandleInputNavigation = function (ele, evt) {&#xD;&#xA;                evt = window.event || evt;&#xD;&#xA;&#xD;&#xA;                switch (evt.keyCode) {&#xD;&#xA;                    // down arrow                   &#xD;&#xA;                    case 40:&#xD;&#xA;                        if (!$(ele).parent().hasClass(""altered""))&#xD;&#xA;                            $(ele).parent().addClass(""altered"");&#xD;&#xA;&#xD;&#xA;                        irow = this.GetRowIndex($(ele).parent());&#xD;&#xA;                        icol = this.GetColIndex($(ele).parent())&#xD;&#xA;                        var prevcell = irow + "","" + icol;&#xD;&#xA;                        $(""#hidModStartCell"").val(prevcell);&#xD;&#xA;                        $(""#hidModEndCell"").val(prevcell);&#xD;&#xA;&#xD;&#xA;                        downele = $(ele).parent()&#xD;&#xA;                                .parent()&#xD;&#xA;                                .next()&#xD;&#xA;                                .children(""td"")[this.GetColIndex($(ele).parent())];&#xD;&#xA;&#xD;&#xA;                        this.ClearSelection();&#xD;&#xA;                        assetGrid.editCell(this.GetRowIndex($(downele)), this.GetColIndex($(downele)), true);&#xD;&#xA;                        break;&#xD;&#xA;&#xD;&#xA;                    // up arrow                   &#xD;&#xA;                    case 38:&#xD;&#xA;                        if (!$(ele).parent().hasClass(""altered""))&#xD;&#xA;                            $(ele).parent().addClass(""altered"");&#xD;&#xA;&#xD;&#xA;                        irow = this.GetRowIndex($(ele).parent());&#xD;&#xA;                        icol = this.GetColIndex($(ele).parent())&#xD;&#xA;                        var prevcell = irow + "","" + icol;&#xD;&#xA;                        $(""#hidModStartCell"").val(prevcell);&#xD;&#xA;                        $(""#hidModEndCell"").val(prevcell);&#xD;&#xA;&#xD;&#xA;                        topele = $(ele).parent()&#xD;&#xA;                                .parent()&#xD;&#xA;                                .prev()&#xD;&#xA;                                .children(""td"")[this.GetColIndex($(ele).parent())];&#xD;&#xA;&#xD;&#xA;                        if (this.GetRowIndex($(topele)) <= 0) break;&#xD;&#xA;&#xD;&#xA;                        this.ClearSelection();&#xD;&#xA;                        assetGrid.editCell(this.GetRowIndex($(topele)), this.GetColIndex($(topele)), true);&#xD;&#xA;                        break;&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        var autocomp = new AutoCompleteRequest();&#xD;&#xA;        var lastSel = """";&#xD;&#xA;        var assetGrid = $('#grd_asset');&#xD;&#xA;        var start = null;&#xD;&#xA;        var fnassetgrid = new FnGrid();&#xD;&#xA;        var lastSel = -1;&#xD;&#xA;&#xD;&#xA;        function selectTo(cell) {&#xD;&#xA;            if (start == null)&#xD;&#xA;                return;&#xD;&#xA;            fnassetgrid.ClearSelection();&#xD;&#xA;            var stop = $(cell);&#xD;&#xA;            var tbl = start.closest(""table"");&#xD;&#xA;            var rs = tbl.children(""tbody"").children(""tr"");&#xD;&#xA;            var r0 = rs.index(start.parent()), c0 = fnassetgrid.GetColIndex(start);&#xD;&#xA;            var r1 = rs.index(stop.parent()), c1 = fnassetgrid.GetColIndex(stop);&#xD;&#xA;            var concat = """";&#xD;&#xA;            for (var i = r0; i <= r1; i++) {&#xD;&#xA;                var cells = $(rs.get(i)).children(""td"");&#xD;&#xA;                for (var j = c0; j <= c1; j++) {&#xD;&#xA;                    var cell = $(cells.get(j));&#xD;&#xA;                    cell.addClass(""sel"");&#xD;&#xA;                    concat += cell.html() + ""\\t"";&#xD;&#xA;                }&#xD;&#xA;                if (concat.lastIndexOf(""\\t"") == concat.length - 1)&#xD;&#xA;                    concat = concat.substring(0, concat.lastIndexOf(""\\t""));&#xD;&#xA;&#xD;&#xA;                concat += ""\\n"";&#xD;&#xA;            }&#xD;&#xA;            $(""#hidSelected"").val(concat.trim());&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        $(document).ready(function () {&#xD;&#xA;            /*************************************************/&#xD;&#xA;            /******************* THE GRID  *******************/&#xD;&#xA;            /*************************************************/&#xD;&#xA;            assetGrid.jqGrid({&#xD;&#xA;                datatype: function (pdata) {&#xD;&#xA;                    getData(pdata);&#xD;&#xA;                },&#xD;&#xA;                colNames: [' ', 'AssetId', 'Item#', 'Qty', 'Equip#', 'Year', 'Make', 'Model', 'Serial#', 'Class', 'IsLot', 'Cond', 'FLV', 'OLV', 'LVIP', 'FMV_R', 'FMV_E', 'FMV_I', 'FMV_ICU', 'Description'],&#xD;&#xA;                colModel: [&#xD;&#xA;                    { name: 'ctrls', width: 80, fixed: true, sortable: false, resize: false, formatter: 'actions',&#xD;&#xA;                        formatoptions: { keys: true }&#xD;&#xA;                    },&#xD;&#xA;   		            { name: 'AssetID', label: 'AssetID', width: 65, key: true, hidden: true },&#xD;&#xA;   		            { name: 'Sequence', label: 'Item#', width: 50, align: ""right"", sorttype: 'int', sortable: true, editoptions: { dataEvents: [{ type: 'keydown', fn: function (e) { fnassetgrid.HandleInputNavigation(this, e); } }]} },&#xD;&#xA;   		            { name: 'Quantity', label: 'Qty', width: 40, align: ""right"", sorttype: 'int', sortable: true, editoptions: { dataEvents: [{ type: 'keydown', fn: function (e) { fnassetgrid.HandleInputNavigation(this, e); } }]} },&#xD;&#xA;   		            { name: 'EquipmentNum', label: 'Equip#', width: 80, editable: true, editoptions: { dataEvents: [{ type: 'keydown', fn: function (e) { fnassetgrid.HandleInputNavigation(this, e); } }]} },&#xD;&#xA;   		            { name: 'ManufacturedYear', label: 'Year', width: 70, editable: true, edittype: 'text', editoptions: { size: 18, editrules: { url: false }, dataEvents: [{ type: 'keydown', fn: function (e) { fnassetgrid.HandleInputNavigation(this, e); } }]} },&#xD;&#xA;   		            { name: 'Make', label: 'Make', width: 105, editable: true, edittype: 'text', editoptions: {&#xD;&#xA;   		                size: 18,&#xD;&#xA;   		                dataEvents: [{&#xD;&#xA;   		                    type: 'focus',&#xD;&#xA;   		                    fn: function (e) {&#xD;&#xA;   		                        $(this).autocomplete({&#xD;&#xA;   		                            source: autocomp.source,&#xD;&#xA;   		                            delay: autocomp.delay,&#xD;&#xA;   		                            minLength: autocomp.minLength&#xD;&#xA;   		                        });&#xD;&#xA;&#xD;&#xA;   		                        $(this).bind(""autocompleteopen"", autocomp.open);&#xD;&#xA;   		                        $(this).bind(""autocompleteclose"", autocomp.close);&#xD;&#xA;   		                    }&#xD;&#xA;   		                }]&#xD;&#xA;   		            }&#xD;&#xA;   		            },&#xD;&#xA;                    { name: 'SerialNum', label: 'Serial#', width: 105, editable: true, edittype: 'text', editoptions: { size: 18, dataEvents: [{ type: 'keydown', fn: function (e) { fnassetgrid.HandleInputNavigation(this, e); } }]} },&#xD;&#xA;                    { name: 'Description', label: 'Description', fixed: false, editable: true, edittype: 'textarea', editoptions: { rows: ""10"", cols: ""40""} }&#xD;&#xA;   	            ],&#xD;&#xA;                rowNum: 10, /* no of recs in a grid */&#xD;&#xA;                width: 1330,&#xD;&#xA;                rowList: [10, 20, 30], /* array to construct a select box element in the pager */&#xD;&#xA;                pager: '#pfrmac',&#xD;&#xA;                sortname: 'AssetID', /* initial sorting column */&#xD;&#xA;                viewrecords: true,  /* Defines whether we want to display the number of total records from the query in the pager bar */&#xD;&#xA;                pginput: false,&#xD;&#xA;                sortorder: ""desc"",&#xD;&#xA;                cellEdit: true,&#xD;&#xA;                jsonReader: {&#xD;&#xA;                    root: function (obj) {&#xD;&#xA;                        return obj.SearchResultSet;&#xD;&#xA;                    },&#xD;&#xA;                    page: function (obj) { return 1; },&#xD;&#xA;                    total: function (obj) { return 1; },&#xD;&#xA;                    records: function (obj) {&#xD;&#xA;                        return obj.ItemCount;&#xD;&#xA;                    },&#xD;&#xA;                    id: ""AssetID"",&#xD;&#xA;                    repeatitems: false&#xD;&#xA;                },&#xD;&#xA;                loadonce: true,&#xD;&#xA;                caption: ""Asset list"",&#xD;&#xA;                height: '100%',&#xD;&#xA;                cellsubmit: 'clientArray',&#xD;&#xA;                beforeEditCell: function (rowid, cellname, value, iRow, iCol) {&#xD;&#xA;                    selICol = iCol;&#xD;&#xA;                    selIRow = iRow;&#xD;&#xA;&#xD;&#xA;                    // if the row should not be editable than simply turn the cells back to read only mode &#xD;&#xA;                    //assetGrid.editCell(iRow, iCol, false);&#xD;&#xA;                    //assetGrid.restoreCell(iRow,iCol);&#xD;&#xA;                },&#xD;&#xA;                gridComplete: function () {&#xD;&#xA;                    rowindex = 1;&#xD;&#xA;                    rows = assetGrid.find(""tr"");&#xD;&#xA;&#xD;&#xA;                    if (rows && rows.length > 1) {&#xD;&#xA;                        for (i = 1; i < rows.length; i++) {&#xD;&#xA;                            $(rows[i]).find(""td"").each(function (evt) {&#xD;&#xA;                                evt = window.event || evt;&#xD;&#xA;&#xD;&#xA;                                start = $(this);&#xD;&#xA;                                colindex = fnassetgrid.GetColIndex(start);&#xD;&#xA;                                if (colindex > 0) {&#xD;&#xA;                                    $(this).click(function () {&#xD;&#xA;                                        return false;&#xD;&#xA;                                    }).dblclick(function () {&#xD;&#xA;                                        if (!($(this).hasClass(""edit-cell""))) {&#xD;&#xA;                                            assetGrid.editCell(fnassetgrid.GetRowIndex($(this)), fnassetgrid.GetColIndex($(this)), true);&#xD;&#xA;                                            // transfer focus to the input&#xD;&#xA;                                            var inp = $(this).children(""input,select,textarea"")&#xD;&#xA;                                            if (inp) {&#xD;&#xA;                                                $(inp[0]).val('');&#xD;&#xA;                                                inp.focus();&#xD;&#xA;                                            }&#xD;&#xA;                                        }&#xD;&#xA;                                        else&#xD;&#xA;                                            return true;&#xD;&#xA;                                    }).mousedown(function () {&#xD;&#xA;                                        if (fnassetgrid.IsInEditMode())&#xD;&#xA;                                            return true;&#xD;&#xA;                                        start = $(this);&#xD;&#xA;                                        selectTo(this);&#xD;&#xA;                                        return false;&#xD;&#xA;                                    }).mouseover(function () {&#xD;&#xA;                                        selectTo(this);&#xD;&#xA;                                    }).mouseup(function () {&#xD;&#xA;                                        selectTo(this);&#xD;&#xA;                                        $(""#hidEndCell"").val(fnassetgrid.GetColIndex($(this)));&#xD;&#xA;                                        start = null;&#xD;&#xA;                                    }).keypress(function (e) {&#xD;&#xA;                                        fnassetgrid.HandleEditMode(this, e);&#xD;&#xA;                                    });&#xD;&#xA;                                }&#xD;&#xA;                            });&#xD;&#xA;                            rowindex++;&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;            });&#xD;&#xA;&#xD;&#xA;            //$(""#grd_asset"").jqGrid('navGrid','#pfrmac',{edit:false,add:false,del:false});&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;            $(""body"").mouseup(function () {&#xD;&#xA;                start = null;&#xD;&#xA;            });&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;            /*************************************************/&#xD;&#xA;            /*********** Global KEYUP integration  ***********/&#xD;&#xA;            /*************************************************/&#xD;&#xA;            $(assetGrid).keyup(function (e) {&#xD;&#xA;                var ctrl = e.ctrlKey&#xD;&#xA;                var key = e.charCode || e.keyCode || 0;&#xD;&#xA;&#xD;&#xA;                if ((ctrl && key == 88) /* CUT */ || (ctrl && key == 67) /* COPY */ || (ctrl && key == 86) /* PASTE */ || (ctrl && key == 90) /* UNDO */) {&#xD;&#xA;&#xD;&#xA;                    if ((ctrl && key == 88) /* CUT */ || (ctrl && key == 67) /* COPY */) {&#xD;&#xA;                        CopyToClipboard(""hidSelected"");&#xD;&#xA;&#xD;&#xA;                        var selectedCells = fnassetgrid.GetSelCells();&#xD;&#xA;&#xD;&#xA;                        if (selectedCells && selectedCells.length > 0) {&#xD;&#xA;                            $(""#hidStartCell"").val(fnassetgrid.GetRowIndex($(selectedCells[0])) + "","" + fnassetgrid.GetColIndex($(selectedCells[0])));&#xD;&#xA;                            $(""#hidEndCell"").val(fnassetgrid.GetRowIndex($(selectedCells[selectedCells.length - 1])) + "","" + fnassetgrid.GetColIndex($(selectedCells[selectedCells.length - 1])));&#xD;&#xA;                            $(""#hidCopiedText"").val($(""#hidSelected"").val());&#xD;&#xA;                        }&#xD;&#xA;                        else {&#xD;&#xA;                            $(""#hidStartCell"").val('');&#xD;&#xA;                            $(""#hidEndCell"").val('');&#xD;&#xA;                        }&#xD;&#xA;&#xD;&#xA;                        if (ctrl && key == 88) /* CUT */{&#xD;&#xA;                            assetGrid.find(""td.sel"").each(function () {&#xD;&#xA;                                row = $(this).closest('tr.jqgrow');&#xD;&#xA;                                rowId = row.attr('id');&#xD;&#xA;                                assetGrid.setCell(rowId, (fnassetgrid.GridColumns())[fnassetgrid.GetColIndex($(this))].name, '', '', '', true);&#xD;&#xA;                            });&#xD;&#xA;                            fnassetgrid.ClearSelection();&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                    else if (ctrl && key == 86) /* PASTE */{&#xD;&#xA;                        var clipboardata = getClipboardData();&#xD;&#xA;                        if (get_objtype(clipboardata) != ""[object String]"") {&#xD;&#xA;                            alert(""The data you are pasting either is empty or incompatible"");&#xD;&#xA;                            return false;&#xD;&#xA;                        }&#xD;&#xA;&#xD;&#xA;                        pasteinfo(assetGrid, clipboardata);&#xD;&#xA;                    }&#xD;&#xA;                    else if ((ctrl && key == 90) /* UNDO */) {&#xD;&#xA;                        if ($(""#hidModStartCell"").val() !== undefined && $(""#hidModStartCell"").val() != '' && $(""#hidModEndCell"").val() !== undefined && $(""#hidModEndCell"").val() != '') {&#xD;&#xA;                            startcell = $(""#hidModStartCell"").val().split(',');&#xD;&#xA;                            startrow = startcell[0] - 0;&#xD;&#xA;                            startcol = startcell[1] - 0;&#xD;&#xA;&#xD;&#xA;                            endcell = $(""#hidModEndCell"").val().split(',');&#xD;&#xA;                            endrow = endcell[0] - 0;&#xD;&#xA;                            endcol = endcell[1] - 0;&#xD;&#xA;&#xD;&#xA;                            for (i = startrow; i <= endrow; i++) {&#xD;&#xA;                                for (j = startcol; j <= endcol; j++) {&#xD;&#xA;                                    assetGrid.restoreCell(i, j);&#xD;&#xA;                                }&#xD;&#xA;                            }&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                    return false; // prevent bubbling&#xD;&#xA;                }&#xD;&#xA;                else&#xD;&#xA;                    return true; // let it bubble&#xD;&#xA;            });&#xD;&#xA;        });&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        /********************************************************************/&#xD;&#xA;        /*********** Method to retrieve Project Asset information ***********/&#xD;&#xA;        /********************************************************************/&#xD;&#xA;        function getData(pdata) {&#xD;&#xA;            $.ajax({&#xD;&#xA;                type: ""POST"",&#xD;&#xA;                contentType: ""application/json; charset=utf-8"",&#xD;&#xA;                url: '../api/Internalservices.asmx/GetProjectAssets',&#xD;&#xA;                data: ""{ projectid: '"" + getQuerystring('projectid', '') + ""', page: '"" + pdata.page +&#xD;&#xA;                        ""', pageSize: '"" + pdata.rows + ""', sortIndex: '"" + pdata.sidx +&#xD;&#xA;                        ""', sortDirection: '"" + pdata.sord + ""'}"",&#xD;&#xA;                dataType: ""json"",&#xD;&#xA;                success: function (jsondata, stat) {&#xD;&#xA;                    var thegrid = assetGrid[0];&#xD;&#xA;                    if (jsondata.hasOwnProperty('d'))&#xD;&#xA;                        jsondata = jsondata.d;&#xD;&#xA;&#xD;&#xA;                    thegrid.addJSONData(jsondata);&#xD;&#xA;                }&#xD;&#xA;            });&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        /********************************************************************/&#xD;&#xA;        /*********** Method to retrieve and submit altered asset information ***********/&#xD;&#xA;        /********************************************************************/&#xD;&#xA;        function getChanges() {&#xD;&#xA;            var editedxml = ""<?xml version='1.0' encoding='utf-8' ?\\>\\n"";&#xD;&#xA;            editedxml += ""<ASSETS>\\n"";&#xD;&#xA;            assetGrid.find(""tr.altered"").each(function () {&#xD;&#xA;                editedxml += ""<ASSET>\\n"";&#xD;&#xA;                $(this).children(""td"").each(function () {&#xD;&#xA;                    colindex = fnassetgrid.GetColIndex($(this));                    &#xD;&#xA;                    if (colindex > 0) {&#xD;&#xA;                        editedxml += ""<"" + (fnassetgrid.GridColumns())[colindex].name.toUpperCase() + "">"" + $(this).text().trim() + ""</"" + (fnassetgrid.GridColumns())[colindex].name.toUpperCase() + "">\\n"";&#xD;&#xA;                    }&#xD;&#xA;                })&#xD;&#xA;                editedxml += ""</ASSET>\\n"";&#xD;&#xA;            })&#xD;&#xA;            editedxml += ""</ASSETS>"";&#xD;&#xA;&#xD;&#xA;            fnassetgrid.ClearMarkedChanges();&#xD;&#xA;            &#xD;&#xA;            //TBD: submit XML to an AJAX service&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        var _browserPasteData = null;&#xD;&#xA;        function getClipboardData() {&#xD;&#xA;            if (_browserPasteData) // Safari/Chrome logic&#xD;&#xA;                return _browserPasteData;&#xD;&#xA;            if (window.clipboardData) // IE logic&#xD;&#xA;            {&#xD;&#xA;                return window.clipboardData.getData(""Text"");&#xD;&#xA;            }&#xD;&#xA;            else if (typeof (netscape) != ""undefined"") // Firefox logic&#xD;&#xA;            {&#xD;&#xA;                netscape.security.PrivilegeManager.enablePrivilege('UniversalXPConnect');&#xD;&#xA;                var clip = Components.classes[""@mozilla.org/widget/clipboard;1""].createInstance(Components.interfaces.nsIClipboard);&#xD;&#xA;                var trans = Components.classes[""@mozilla.org/widget/transferable;1""].createInstance(Components.interfaces.nsITransferable);&#xD;&#xA;                trans.addDataFlavor(""text/unicode"");&#xD;&#xA;                clip.getData(trans, clip.kGlobalClipboard);&#xD;&#xA;                var str = new Object();&#xD;&#xA;                var len = new Object();&#xD;&#xA;                trans.getTransferData(""text/unicode"", str, len);&#xD;&#xA;                if (str)&#xD;&#xA;                    return str.value.QueryInterface(Components.interfaces.nsISupportsString).toString();&#xD;&#xA;            }&#xD;&#xA;            return null;&#xD;&#xA;        }&#xD;&#xA;        // In Safari/Chrome the clipboard data can only be accessed&#xD;&#xA;        // from the onpaste event. In this sample the event is handled &#xD;&#xA;        // off the body element: <body onpaste=""browserPaste(event)"">&#xD;&#xA;        function browserPaste(e) {&#xD;&#xA;            _browserPasteData = e.clipboardData && e.clipboardData.getData ?&#xD;&#xA;                e.clipboardData.getData('text/plain') : null;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        function pasteinfo(objGrid, info) {&#xD;&#xA;            selectedCells = fnassetgrid.GetSelCells();&#xD;&#xA;            firstcell = $(selectedCells[0]);&#xD;&#xA;            firstselectedcolindex = fnassetgrid.GetColIndex(firstcell);&#xD;&#xA;            rowcellscount = fnassetgrid.GetRowCells(firstcell).length;&#xD;&#xA;&#xD;&#xA;            if (firstselectedcolindex == 0) {&#xD;&#xA;                alert(""You cannot paste into an non-editable column"");&#xD;&#xA;                return false;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            if (selectedCells && selectedCells.length > 0) {&#xD;&#xA;                // if the clipboard info is from the asset grid&#xD;&#xA;                if (info && info == $(""#hidCopiedText"").val()) {&#xD;&#xA;                    // last copied source cell&#xD;&#xA;                    hidStartCell = -1;&#xD;&#xA;                    if ($(""#hidStartCell"").val() != '' && $(""#hidStartCell"").val().split(',').length > 1) {&#xD;&#xA;                        hidStartCell = $(""#hidStartCell"").val().split(',')[1];&#xD;&#xA;                    }&#xD;&#xA;&#xD;&#xA;                    if (firstselectedcolindex != hidStartCell) {&#xD;&#xA;                        if (!confirm(""The data you are pasting comes from a different set of \\ncolumns than those that you are pasting into.\\n\\nAre you sure you want to paste into these columns?""))&#xD;&#xA;                            return false;&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;&#xD;&#xA;                $(""#hidModStartCell"").val(fnassetgrid.GetRowIndex(firstcell) + "","" + firstselectedcolindex);&#xD;&#xA;&#xD;&#xA;                var prevcell = null;&#xD;&#xA;                datarows = info.split(""\\n"");&#xD;&#xA;                if (datarows && datarows.length > 0) {&#xD;&#xA;                    currentrow = firstcell.parent();&#xD;&#xA;                    currentcell = firstcell;&#xD;&#xA;                    for (i = 0; i < datarows.length && currentrow.length > 0; ++i) {&#xD;&#xA;                        if (datarows[i] == '') break;&#xD;&#xA;                        datarows[i] = datarows[i].split(""\\t"");&#xD;&#xA;                        var row = null;&#xD;&#xA;                        var rowId = null;&#xD;&#xA;                        var rowindex = null;&#xD;&#xA;                        for (j = 0; j < datarows[i].length && currentcell != null; ++j) {&#xD;&#xA;                            // mark the row as altered&#xD;&#xA;                            if (!currentcell.parent().hasClass(""altered""))&#xD;&#xA;                                currentcell.parent().addClass(""altered"");&#xD;&#xA;                            // for each outer iteration get the rowid&#xD;&#xA;                            if (row == null) {&#xD;&#xA;                                row = (currentcell).closest('tr.jqgrow');&#xD;&#xA;                                rowId = row.attr('id');&#xD;&#xA;                            }                            &#xD;&#xA;                            assetGrid.setCell(rowId, (fnassetgrid.GridColumns())[fnassetgrid.GetColIndex(currentcell)].name, datarows[i][j], '', '', true);&#xD;&#xA;                            prevcell = currentcell;&#xD;&#xA;                            currentcell = currentcell.next();&#xD;&#xA;                        }&#xD;&#xA;&#xD;&#xA;                        currentrow = currentrow.next();&#xD;&#xA;                        currentcell = $(currentrow.children(""td"")[firstselectedcolindex]);&#xD;&#xA;                    }                    &#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            if (prevcell != null)&#xD;&#xA;                $(""#hidModEndCell"").val(fnassetgrid.GetRowIndex(prevcell) + "","" + fnassetgrid.GetColIndex(prevcell));&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;    </script>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Many Thanks in advance!&#xD;&#xA;&#xD;&#xA;";;added 55 characters in body
15391982;7016109;863791;5;82ba2f85-d0f7-4ffe-9dcf-3e479f01e37a;2011-08-10 21:58:00.0;"Just to give little update before putting my question....&#xD;&#xA;&#xD;&#xA;I've been able to come up with some additional features on the jqgrid that I'm using (after going through many forums) including: copy-paste back and forth from Excel to jqgrid, edit cell on keypress and dblclick, copy and paste multiple cells from one block to another on the same grid using mouse selection (from here http://stackoverflow.com/questions/1821074/using-javascript-to-sum-selected-cells-in-ie6)&#xD;&#xA;&#xD;&#xA;Most of the copy paste features works on IE only as of now. I save all the changes together on ""Save"" button click so all the updates on the cells are on screen only until user hits the ""Save"" button.&#xD;&#xA;&#xD;&#xA;Although, things are still in flux right now, I'd like to have the implementation design on paper now than later. I'm looking for an easy way to UNDO only the LAST change. I've been thinking of using jQuery's ""data()"" and ""removeData()"" methods to implement this but if there is anything already existing in jqgrid framework that would help, I would like to know. Any suggestions??&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    <style type=""text/css"">&#xD;&#xA;        .sel {background-color: #96B9DC !important; }&#xD;&#xA;        .altered {}&#xD;&#xA;    </style>&#xD;&#xA;&#xD;&#xA;    <div style=""width:100%; background-color:#FFF; border:1px solid #000;""><input id=""btnsavechanges"" value=""Save Changes"" style=""width:120px;"" class=""formbutton ui-corner-all"" type=""button"" onclick=""getChanges(); return false;"" /></div>&#xD;&#xA;    <table id=""grd_asset"" width=""100%"" onSelectStart=""return false;""></table>&#xD;&#xA;    <div id=""pfrmac"" style='width:100%;'></div>&#xD;&#xA;    <input type=""hidden"" id=""hidSelected"" value="""" />&#xD;&#xA;&#xD;&#xA;    <!-- copy content from the grid cells -->&#xD;&#xA;    <input type=""hidden"" id=""hidCopiedText"" value="""" />&#xD;&#xA;&#xD;&#xA;    <!-- Start and End of cell selection -->&#xD;&#xA;    <input type=""hidden"" id=""hidStartCell"" value="""" />&#xD;&#xA;    <input type=""hidden"" id=""hidEndCell"" value="""" />&#xD;&#xA;&#xD;&#xA;    <!-- Start and End of last modified cell(s) -->&#xD;&#xA;    <input type=""hidden"" id=""hidModStartCell"" value="""" />&#xD;&#xA;    <input type=""hidden"" id=""hidModEndCell"" value="""" />&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    <script type=""text/javascript"">&#xD;&#xA;&#xD;&#xA;        var selICol; //iCol of selected cell&#xD;&#xA;        var selIRow; //iRow of selected cell&#xD;&#xA;&#xD;&#xA;        /*************************************************/&#xD;&#xA;        /**************** Grid Utilities  ****************/&#xD;&#xA;        /*************************************************/&#xD;&#xA;        FnGrid = function () {&#xD;&#xA;            this.GridColumns = function () {&#xD;&#xA;                return assetGrid.jqGrid('getGridParam', 'colModel');&#xD;&#xA;            }&#xD;&#xA;            this.GetSelCells = function () {&#xD;&#xA;                return assetGrid.find(""td.sel"");&#xD;&#xA;            }&#xD;&#xA;            this.ClearSelection = function () {&#xD;&#xA;                assetGrid.find(""td"").removeClass(""sel"");&#xD;&#xA;            }&#xD;&#xA;            this.ClearSavedHistory = function () {&#xD;&#xA;                assetGrid.removeData();&#xD;&#xA;            }&#xD;&#xA;            this.ClearMarkedChanges = function () {&#xD;&#xA;                assetGrid.find(""tr"").removeClass(""altered"");&#xD;&#xA;            }&#xD;&#xA;            this.GetRowCells = function (cell) {&#xD;&#xA;                return cell.parent().children(""td"")&#xD;&#xA;            }&#xD;&#xA;            this.GetRowId = function (cell) {&#xD;&#xA;                var row = cell.closest('tr.jqgrow');&#xD;&#xA;                return row.attr('id');&#xD;&#xA;            }&#xD;&#xA;            this.GetRowIndex = function (cell) {&#xD;&#xA;                var cellrow = cell.parent();&#xD;&#xA;                return cellrow.parent().children(""tr"").index(cellrow);&#xD;&#xA;            }&#xD;&#xA;            this.GetColIndex = function (cell) {&#xD;&#xA;                return cell.parent().children(""td"").index(cell);&#xD;&#xA;            }&#xD;&#xA;            this.IsInEditMode = function () {&#xD;&#xA;                var RecordsInEditMode = assetGrid.find(""tr[editable='1'"");&#xD;&#xA;                return (RecordsInEditMode && RecordsInEditMode.length > 0);&#xD;&#xA;            }&#xD;&#xA;            this.HandleEditMode = function (cell, e) {&#xD;&#xA;                var ctrl = e.ctrlKey;&#xD;&#xA;                var alt = e.altKey;&#xD;&#xA;&#xD;&#xA;                var keyCode = (e.keyCode ? e.keyCode : e.which);&#xD;&#xA;                if (keyCode) {&#xD;&#xA;                    if (keyCode >= 32 && keyCode <= 126 && !ctrl && !alt) {&#xD;&#xA;&#xD;&#xA;                        // switch the cell to edit mode if not already&#xD;&#xA;                        if (!($(cell).hasClass(""edit-cell""))) {&#xD;&#xA;                            assetGrid.editCell(this.GetRowIndex($(cell)), this.GetColIndex($(cell)), true);&#xD;&#xA;                            // transfer focus to the input&#xD;&#xA;                            var inp = $(cell).children(""input,select,textarea"")&#xD;&#xA;                            if (inp) {&#xD;&#xA;                                $(inp[0]).val('');&#xD;&#xA;                                inp.focus();&#xD;&#xA;                            }&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;                return true;&#xD;&#xA;            }&#xD;&#xA;            this.HandleInputNavigation = function (ele, evt) {&#xD;&#xA;                evt = window.event || evt;&#xD;&#xA;&#xD;&#xA;                switch (evt.keyCode) {&#xD;&#xA;                    // down arrow                   &#xD;&#xA;                    case 40:&#xD;&#xA;                        if (!$(ele).parent().hasClass(""altered""))&#xD;&#xA;                            $(ele).parent().addClass(""altered"");&#xD;&#xA;&#xD;&#xA;                        irow = this.GetRowIndex($(ele).parent());&#xD;&#xA;                        icol = this.GetColIndex($(ele).parent())&#xD;&#xA;                        var prevcell = irow + "","" + icol;&#xD;&#xA;                        $(""#hidModStartCell"").val(prevcell);&#xD;&#xA;                        $(""#hidModEndCell"").val(prevcell);&#xD;&#xA;&#xD;&#xA;                        downele = $(ele).parent()&#xD;&#xA;                                .parent()&#xD;&#xA;                                .next()&#xD;&#xA;                                .children(""td"")[this.GetColIndex($(ele).parent())];&#xD;&#xA;&#xD;&#xA;                        this.ClearSelection();&#xD;&#xA;                        assetGrid.editCell(this.GetRowIndex($(downele)), this.GetColIndex($(downele)), true);&#xD;&#xA;                        break;&#xD;&#xA;&#xD;&#xA;                    // up arrow                   &#xD;&#xA;                    case 38:&#xD;&#xA;                        if (!$(ele).parent().hasClass(""altered""))&#xD;&#xA;                            $(ele).parent().addClass(""altered"");&#xD;&#xA;&#xD;&#xA;                        irow = this.GetRowIndex($(ele).parent());&#xD;&#xA;                        icol = this.GetColIndex($(ele).parent())&#xD;&#xA;                        var prevcell = irow + "","" + icol;&#xD;&#xA;                        $(""#hidModStartCell"").val(prevcell);&#xD;&#xA;                        $(""#hidModEndCell"").val(prevcell);&#xD;&#xA;&#xD;&#xA;                        topele = $(ele).parent()&#xD;&#xA;                                .parent()&#xD;&#xA;                                .prev()&#xD;&#xA;                                .children(""td"")[this.GetColIndex($(ele).parent())];&#xD;&#xA;&#xD;&#xA;                        if (this.GetRowIndex($(topele)) <= 0) break;&#xD;&#xA;&#xD;&#xA;                        this.ClearSelection();&#xD;&#xA;                        assetGrid.editCell(this.GetRowIndex($(topele)), this.GetColIndex($(topele)), true);&#xD;&#xA;                        break;&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        var autocomp = new AutoCompleteRequest();&#xD;&#xA;        var lastSel = """";&#xD;&#xA;        var assetGrid = $('#grd_asset');&#xD;&#xA;        var start = null;&#xD;&#xA;        var fnassetgrid = new FnGrid();&#xD;&#xA;        var lastSel = -1;&#xD;&#xA;&#xD;&#xA;        function selectTo(cell) {&#xD;&#xA;            if (start == null)&#xD;&#xA;                return;&#xD;&#xA;            fnassetgrid.ClearSelection();&#xD;&#xA;            var stop = $(cell);&#xD;&#xA;            var tbl = start.closest(""table"");&#xD;&#xA;            var rs = tbl.children(""tbody"").children(""tr"");&#xD;&#xA;            var r0 = rs.index(start.parent()), c0 = fnassetgrid.GetColIndex(start);&#xD;&#xA;            var r1 = rs.index(stop.parent()), c1 = fnassetgrid.GetColIndex(stop);&#xD;&#xA;            var concat = """";&#xD;&#xA;            for (var i = r0; i <= r1; i++) {&#xD;&#xA;                var cells = $(rs.get(i)).children(""td"");&#xD;&#xA;                for (var j = c0; j <= c1; j++) {&#xD;&#xA;                    var cell = $(cells.get(j));&#xD;&#xA;                    cell.addClass(""sel"");&#xD;&#xA;                    concat += cell.html() + ""\\t"";&#xD;&#xA;                }&#xD;&#xA;                if (concat.lastIndexOf(""\\t"") == concat.length - 1)&#xD;&#xA;                    concat = concat.substring(0, concat.lastIndexOf(""\\t""));&#xD;&#xA;&#xD;&#xA;                concat += ""\\n"";&#xD;&#xA;            }&#xD;&#xA;            $(""#hidSelected"").val(concat.trim());&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        $(document).ready(function () {&#xD;&#xA;            /*************************************************/&#xD;&#xA;            /******************* THE GRID  *******************/&#xD;&#xA;            /*************************************************/&#xD;&#xA;            assetGrid.jqGrid({&#xD;&#xA;                datatype: function (pdata) {&#xD;&#xA;                    getData(pdata);&#xD;&#xA;                },&#xD;&#xA;                colNames: [' ', 'AssetId', 'Item#', 'Qty', 'Equip#', 'Year', 'Make', 'Model', 'Serial#', 'Class', 'IsLot', 'Cond', 'FLV', 'OLV', 'LVIP', 'FMV_R', 'FMV_E', 'FMV_I', 'FMV_ICU', 'Description'],&#xD;&#xA;                colModel: [&#xD;&#xA;                    { name: 'ctrls', width: 80, fixed: true, sortable: false, resize: false, formatter: 'actions',&#xD;&#xA;                        formatoptions: { keys: true }&#xD;&#xA;                    },&#xD;&#xA;   		            { name: 'AssetID', label: 'AssetID', width: 65, key: true, hidden: true },&#xD;&#xA;   		            { name: 'Sequence', label: 'Item#', width: 50, align: ""right"", sorttype: 'int', sortable: true, editoptions: { dataEvents: [{ type: 'keydown', fn: function (e) { fnassetgrid.HandleInputNavigation(this, e); } }]} },&#xD;&#xA;   		            { name: 'Quantity', label: 'Qty', width: 40, align: ""right"", sorttype: 'int', sortable: true, editoptions: { dataEvents: [{ type: 'keydown', fn: function (e) { fnassetgrid.HandleInputNavigation(this, e); } }]} },&#xD;&#xA;   		            { name: 'EquipmentNum', label: 'Equip#', width: 80, editable: true, editoptions: { dataEvents: [{ type: 'keydown', fn: function (e) { fnassetgrid.HandleInputNavigation(this, e); } }]} },&#xD;&#xA;   		            { name: 'ManufacturedYear', label: 'Year', width: 70, editable: true, edittype: 'text', editoptions: { size: 18, editrules: { url: false }, dataEvents: [{ type: 'keydown', fn: function (e) { fnassetgrid.HandleInputNavigation(this, e); } }]} },&#xD;&#xA;   		            { name: 'Make', label: 'Make', width: 105, editable: true, edittype: 'text', editoptions: {&#xD;&#xA;   		                size: 18,&#xD;&#xA;   		                dataEvents: [{&#xD;&#xA;   		                    type: 'focus',&#xD;&#xA;   		                    fn: function (e) {&#xD;&#xA;   		                        $(this).autocomplete({&#xD;&#xA;   		                            source: autocomp.source,&#xD;&#xA;   		                            delay: autocomp.delay,&#xD;&#xA;   		                            minLength: autocomp.minLength&#xD;&#xA;   		                        });&#xD;&#xA;&#xD;&#xA;   		                        $(this).bind(""autocompleteopen"", autocomp.open);&#xD;&#xA;   		                        $(this).bind(""autocompleteclose"", autocomp.close);&#xD;&#xA;   		                    }&#xD;&#xA;   		                }]&#xD;&#xA;   		            }&#xD;&#xA;   		            },&#xD;&#xA;                    { name: 'SerialNum', label: 'Serial#', width: 105, editable: true, edittype: 'text', editoptions: { size: 18, dataEvents: [{ type: 'keydown', fn: function (e) { fnassetgrid.HandleInputNavigation(this, e); } }]} },&#xD;&#xA;                    { name: 'Description', label: 'Description', fixed: false, editable: true, edittype: 'textarea', editoptions: { rows: ""10"", cols: ""40""} }&#xD;&#xA;   	            ],&#xD;&#xA;                rowNum: 10, /* no of recs in a grid */&#xD;&#xA;                width: 1330,&#xD;&#xA;                rowList: [10, 20, 30], /* array to construct a select box element in the pager */&#xD;&#xA;                pager: '#pfrmac',&#xD;&#xA;                sortname: 'AssetID', /* initial sorting column */&#xD;&#xA;                viewrecords: true,  /* Defines whether we want to display the number of total records from the query in the pager bar */&#xD;&#xA;                pginput: false,&#xD;&#xA;                sortorder: ""desc"",&#xD;&#xA;                cellEdit: true,&#xD;&#xA;                jsonReader: {&#xD;&#xA;                    root: function (obj) {&#xD;&#xA;                        return obj.SearchResultSet;&#xD;&#xA;                    },&#xD;&#xA;                    page: function (obj) { return 1; },&#xD;&#xA;                    total: function (obj) { return 1; },&#xD;&#xA;                    records: function (obj) {&#xD;&#xA;                        return obj.ItemCount;&#xD;&#xA;                    },&#xD;&#xA;                    id: ""AssetID"",&#xD;&#xA;                    repeatitems: false&#xD;&#xA;                },&#xD;&#xA;                loadonce: true,&#xD;&#xA;                caption: ""Asset list"",&#xD;&#xA;                height: '100%',&#xD;&#xA;                cellsubmit: 'clientArray',&#xD;&#xA;                beforeEditCell: function (rowid, cellname, value, iRow, iCol) {&#xD;&#xA;                    selICol = iCol;&#xD;&#xA;                    selIRow = iRow;&#xD;&#xA;&#xD;&#xA;                    // if the row should not be editable than simply turn the cells back to read only mode &#xD;&#xA;                    //assetGrid.editCell(iRow, iCol, false);&#xD;&#xA;                    //assetGrid.restoreCell(iRow,iCol);&#xD;&#xA;                },&#xD;&#xA;                gridComplete: function () {&#xD;&#xA;                    rowindex = 1;&#xD;&#xA;                    rows = assetGrid.find(""tr"");&#xD;&#xA;&#xD;&#xA;                    if (rows && rows.length > 1) {&#xD;&#xA;                        for (i = 1; i < rows.length; i++) {&#xD;&#xA;                            $(rows[i]).find(""td"").each(function (evt) {&#xD;&#xA;                                evt = window.event || evt;&#xD;&#xA;&#xD;&#xA;                                start = $(this);&#xD;&#xA;                                colindex = fnassetgrid.GetColIndex(start);&#xD;&#xA;                                if (colindex > 0) {&#xD;&#xA;                                    $(this).click(function () {&#xD;&#xA;                                        if (!($(this).hasClass(""edit-cell"")))&#xD;&#xA;                                            return false;&#xD;&#xA;                                    }).dblclick(function () {&#xD;&#xA;                                        if (!($(this).hasClass(""edit-cell""))) {&#xD;&#xA;                                            assetGrid.editCell(fnassetgrid.GetRowIndex($(this)), fnassetgrid.GetColIndex($(this)), true);&#xD;&#xA;                                            // transfer focus to the input&#xD;&#xA;                                            var inp = $(this).children(""input,select,textarea"")&#xD;&#xA;                                            if (inp) {&#xD;&#xA;                                                $(inp[0]).val('');&#xD;&#xA;                                                inp.focus();&#xD;&#xA;                                            }&#xD;&#xA;                                        }&#xD;&#xA;                                        else&#xD;&#xA;                                            return true;&#xD;&#xA;                                    }).mousedown(function () {&#xD;&#xA;                                        if (fnassetgrid.IsInEditMode())&#xD;&#xA;                                            return true;&#xD;&#xA;                                        start = $(this);&#xD;&#xA;                                        selectTo(this);&#xD;&#xA;                                        return false;&#xD;&#xA;                                    }).mouseover(function () {&#xD;&#xA;                                        selectTo(this);&#xD;&#xA;                                    }).mouseup(function () {&#xD;&#xA;                                        selectTo(this);&#xD;&#xA;                                        $(""#hidEndCell"").val(fnassetgrid.GetColIndex($(this)));&#xD;&#xA;                                        start = null;&#xD;&#xA;                                    }).keypress(function (e) {&#xD;&#xA;                                        fnassetgrid.HandleEditMode(this, e);&#xD;&#xA;                                    });&#xD;&#xA;                                }&#xD;&#xA;                            });&#xD;&#xA;                            rowindex++;&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;            });&#xD;&#xA;&#xD;&#xA;            //$(""#grd_asset"").jqGrid('navGrid','#pfrmac',{edit:false,add:false,del:false});&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;            $(""body"").mouseup(function () {&#xD;&#xA;                start = null;&#xD;&#xA;            });&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;            /*************************************************/&#xD;&#xA;            /*********** Global KEYUP integration  ***********/&#xD;&#xA;            /*************************************************/&#xD;&#xA;            $(assetGrid).keyup(function (e) {&#xD;&#xA;                var ctrl = e.ctrlKey&#xD;&#xA;                var key = e.charCode || e.keyCode || 0;&#xD;&#xA;&#xD;&#xA;                if ((ctrl && key == 88) /* CUT */ || (ctrl && key == 67) /* COPY */ || (ctrl && key == 86) /* PASTE */ || (ctrl && key == 90) /* UNDO */) {&#xD;&#xA;&#xD;&#xA;                    if ((ctrl && key == 88) /* CUT */ || (ctrl && key == 67) /* COPY */) {&#xD;&#xA;                        CopyToClipboard(""hidSelected"");&#xD;&#xA;&#xD;&#xA;                        var selectedCells = fnassetgrid.GetSelCells();&#xD;&#xA;&#xD;&#xA;                        if (selectedCells && selectedCells.length > 0) {&#xD;&#xA;                            $(""#hidStartCell"").val(fnassetgrid.GetRowIndex($(selectedCells[0])) + "","" + fnassetgrid.GetColIndex($(selectedCells[0])));&#xD;&#xA;                            $(""#hidEndCell"").val(fnassetgrid.GetRowIndex($(selectedCells[selectedCells.length - 1])) + "","" + fnassetgrid.GetColIndex($(selectedCells[selectedCells.length - 1])));&#xD;&#xA;                            $(""#hidCopiedText"").val($(""#hidSelected"").val());&#xD;&#xA;                        }&#xD;&#xA;                        else {&#xD;&#xA;                            $(""#hidStartCell"").val('');&#xD;&#xA;                            $(""#hidEndCell"").val('');&#xD;&#xA;                        }&#xD;&#xA;&#xD;&#xA;                        if (ctrl && key == 88) /* CUT */{&#xD;&#xA;                            assetGrid.find(""td.sel"").each(function () {&#xD;&#xA;                                row = $(this).closest('tr.jqgrow');&#xD;&#xA;                                rowId = row.attr('id');&#xD;&#xA;                                assetGrid.setCell(rowId, (fnassetgrid.GridColumns())[fnassetgrid.GetColIndex($(this))].name, '', '', '', true);&#xD;&#xA;                            });&#xD;&#xA;                            fnassetgrid.ClearSelection();&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                    else if (ctrl && key == 86) /* PASTE */{&#xD;&#xA;                        var clipboardata = getClipboardData();&#xD;&#xA;                        if (get_objtype(clipboardata) != ""[object String]"") {&#xD;&#xA;                            alert(""The data you are pasting either is empty or incompatible"");&#xD;&#xA;                            return false;&#xD;&#xA;                        }&#xD;&#xA;&#xD;&#xA;                        pasteinfo(assetGrid, clipboardata);&#xD;&#xA;                    }&#xD;&#xA;                    else if ((ctrl && key == 90) /* UNDO */) {&#xD;&#xA;                        if ($(""#hidModStartCell"").val() !== undefined && $(""#hidModStartCell"").val() != '' && $(""#hidModEndCell"").val() !== undefined && $(""#hidModEndCell"").val() != '') {&#xD;&#xA;                            startcell = $(""#hidModStartCell"").val().split(',');&#xD;&#xA;                            startrow = startcell[0] - 0;&#xD;&#xA;                            startcol = startcell[1] - 0;&#xD;&#xA;&#xD;&#xA;                            endcell = $(""#hidModEndCell"").val().split(',');&#xD;&#xA;                            endrow = endcell[0] - 0;&#xD;&#xA;                            endcol = endcell[1] - 0;&#xD;&#xA;&#xD;&#xA;                            for (i = startrow; i <= endrow; i++) {&#xD;&#xA;                                for (j = startcol; j <= endcol; j++) {&#xD;&#xA;                                    assetGrid.restoreCell(i, j);&#xD;&#xA;                                }&#xD;&#xA;                            }&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                    return false; // prevent bubbling&#xD;&#xA;                }&#xD;&#xA;                else&#xD;&#xA;                    return true; // let it bubble&#xD;&#xA;            });&#xD;&#xA;        });&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        /********************************************************************/&#xD;&#xA;        /*********** Method to retrieve Project Asset information ***********/&#xD;&#xA;        /********************************************************************/&#xD;&#xA;        function getData(pdata) {&#xD;&#xA;            $.ajax({&#xD;&#xA;                type: ""POST"",&#xD;&#xA;                contentType: ""application/json; charset=utf-8"",&#xD;&#xA;                url: '../api/Internalservices.asmx/GetProjectAssets',&#xD;&#xA;                data: ""{ projectid: '"" + getQuerystring('projectid', '') + ""', page: '"" + pdata.page +&#xD;&#xA;                        ""', pageSize: '"" + pdata.rows + ""', sortIndex: '"" + pdata.sidx +&#xD;&#xA;                        ""', sortDirection: '"" + pdata.sord + ""'}"",&#xD;&#xA;                dataType: ""json"",&#xD;&#xA;                success: function (jsondata, stat) {&#xD;&#xA;                    var thegrid = assetGrid[0];&#xD;&#xA;                    if (jsondata.hasOwnProperty('d'))&#xD;&#xA;                        jsondata = jsondata.d;&#xD;&#xA;&#xD;&#xA;                    thegrid.addJSONData(jsondata);&#xD;&#xA;                }&#xD;&#xA;            });&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        /********************************************************************/&#xD;&#xA;        /*********** Method to retrieve and submit altered asset information ***********/&#xD;&#xA;        /********************************************************************/&#xD;&#xA;        function getChanges() {&#xD;&#xA;            var editedxml = ""<?xml version='1.0' encoding='utf-8' ?\\>\\n"";&#xD;&#xA;            editedxml += ""<ASSETS>\\n"";&#xD;&#xA;            assetGrid.find(""tr.altered"").each(function () {&#xD;&#xA;                editedxml += ""<ASSET>\\n"";&#xD;&#xA;                $(this).children(""td"").each(function () {&#xD;&#xA;                    colindex = fnassetgrid.GetColIndex($(this));                    &#xD;&#xA;                    if (colindex > 0) {&#xD;&#xA;                        editedxml += ""<"" + (fnassetgrid.GridColumns())[colindex].name.toUpperCase() + "">"" + $(this).text().trim() + ""</"" + (fnassetgrid.GridColumns())[colindex].name.toUpperCase() + "">\\n"";&#xD;&#xA;                    }&#xD;&#xA;                })&#xD;&#xA;                editedxml += ""</ASSET>\\n"";&#xD;&#xA;            })&#xD;&#xA;            editedxml += ""</ASSETS>"";&#xD;&#xA;&#xD;&#xA;            fnassetgrid.ClearMarkedChanges();&#xD;&#xA;            &#xD;&#xA;            //TBD: submit XML to an AJAX service&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        var _browserPasteData = null;&#xD;&#xA;        function getClipboardData() {&#xD;&#xA;            if (_browserPasteData) // Safari/Chrome logic&#xD;&#xA;                return _browserPasteData;&#xD;&#xA;            if (window.clipboardData) // IE logic&#xD;&#xA;            {&#xD;&#xA;                return window.clipboardData.getData(""Text"");&#xD;&#xA;            }&#xD;&#xA;            else if (typeof (netscape) != ""undefined"") // Firefox logic&#xD;&#xA;            {&#xD;&#xA;                netscape.security.PrivilegeManager.enablePrivilege('UniversalXPConnect');&#xD;&#xA;                var clip = Components.classes[""@mozilla.org/widget/clipboard;1""].createInstance(Components.interfaces.nsIClipboard);&#xD;&#xA;                var trans = Components.classes[""@mozilla.org/widget/transferable;1""].createInstance(Components.interfaces.nsITransferable);&#xD;&#xA;                trans.addDataFlavor(""text/unicode"");&#xD;&#xA;                clip.getData(trans, clip.kGlobalClipboard);&#xD;&#xA;                var str = new Object();&#xD;&#xA;                var len = new Object();&#xD;&#xA;                trans.getTransferData(""text/unicode"", str, len);&#xD;&#xA;                if (str)&#xD;&#xA;                    return str.value.QueryInterface(Components.interfaces.nsISupportsString).toString();&#xD;&#xA;            }&#xD;&#xA;            return null;&#xD;&#xA;        }&#xD;&#xA;        // In Safari/Chrome the clipboard data can only be accessed&#xD;&#xA;        // from the onpaste event. In this sample the event is handled &#xD;&#xA;        // off the body element: <body onpaste=""browserPaste(event)"">&#xD;&#xA;        function browserPaste(e) {&#xD;&#xA;            _browserPasteData = e.clipboardData && e.clipboardData.getData ?&#xD;&#xA;                e.clipboardData.getData('text/plain') : null;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        function pasteinfo(objGrid, info) {&#xD;&#xA;            selectedCells = fnassetgrid.GetSelCells();&#xD;&#xA;            firstcell = $(selectedCells[0]);&#xD;&#xA;            firstselectedcolindex = fnassetgrid.GetColIndex(firstcell);&#xD;&#xA;            rowcellscount = fnassetgrid.GetRowCells(firstcell).length;&#xD;&#xA;&#xD;&#xA;            if (firstselectedcolindex == 0) {&#xD;&#xA;                alert(""You cannot paste into an non-editable column"");&#xD;&#xA;                return false;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            if (selectedCells && selectedCells.length > 0) {&#xD;&#xA;                // if the clipboard info is from the asset grid&#xD;&#xA;                if (info && info == $(""#hidCopiedText"").val()) {&#xD;&#xA;                    // last copied source cell&#xD;&#xA;                    hidStartCell = -1;&#xD;&#xA;                    if ($(""#hidStartCell"").val() != '' && $(""#hidStartCell"").val().split(',').length > 1) {&#xD;&#xA;                        hidStartCell = $(""#hidStartCell"").val().split(',')[1];&#xD;&#xA;                    }&#xD;&#xA;&#xD;&#xA;                    if (firstselectedcolindex != hidStartCell) {&#xD;&#xA;                        if (!confirm(""The data you are pasting comes from a different set of \\ncolumns than those that you are pasting into.\\n\\nAre you sure you want to paste into these columns?""))&#xD;&#xA;                            return false;&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;&#xD;&#xA;                $(""#hidModStartCell"").val(fnassetgrid.GetRowIndex(firstcell) + "","" + firstselectedcolindex);&#xD;&#xA;&#xD;&#xA;                var prevcell = null;&#xD;&#xA;                datarows = info.split(""\\n"");&#xD;&#xA;                if (datarows && datarows.length > 0) {&#xD;&#xA;                    currentrow = firstcell.parent();&#xD;&#xA;                    currentcell = firstcell;&#xD;&#xA;                    for (i = 0; i < datarows.length && currentrow.length > 0; ++i) {&#xD;&#xA;                        if (datarows[i] == '') break;&#xD;&#xA;                        datarows[i] = datarows[i].split(""\\t"");&#xD;&#xA;                        var row = null;&#xD;&#xA;                        var rowId = null;&#xD;&#xA;                        var rowindex = null;&#xD;&#xA;                        for (j = 0; j < datarows[i].length && currentcell != null; ++j) {&#xD;&#xA;                            // mark the row as altered&#xD;&#xA;                            if (!currentcell.parent().hasClass(""altered""))&#xD;&#xA;                                currentcell.parent().addClass(""altered"");&#xD;&#xA;                            // for each outer iteration get the rowid&#xD;&#xA;                            if (row == null) {&#xD;&#xA;                                row = (currentcell).closest('tr.jqgrow');&#xD;&#xA;                                rowId = row.attr('id');&#xD;&#xA;                            }                            &#xD;&#xA;                            assetGrid.setCell(rowId, (fnassetgrid.GridColumns())[fnassetgrid.GetColIndex(currentcell)].name, datarows[i][j], '', '', true);&#xD;&#xA;                            prevcell = currentcell;&#xD;&#xA;                            currentcell = currentcell.next();&#xD;&#xA;                        }&#xD;&#xA;&#xD;&#xA;                        currentrow = currentrow.next();&#xD;&#xA;                        currentcell = $(currentrow.children(""td"")[firstselectedcolindex]);&#xD;&#xA;                    }                    &#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            if (prevcell != null)&#xD;&#xA;                $(""#hidModEndCell"").val(fnassetgrid.GetRowIndex(prevcell) + "","" + fnassetgrid.GetColIndex(prevcell));&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;    </script>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Many Thanks in advance!&#xD;&#xA;&#xD;&#xA;";;added 83 characters in body
16341926;7016109;863791;5;74d1359d-2747-4762-83c1-1ace204030d4;2011-09-13 17:13:53.0;"Just to give little update before putting my question....&#xD;&#xA;&#xD;&#xA;I've been able to come up with some additional features on the jqgrid that I'm using (after going through many forums) including: copy-paste back and forth from Excel to jqgrid, edit cell on keypress and dblclick, copy and paste multiple cells from one block to another on the same grid using mouse selection (from here http://stackoverflow.com/questions/1821074/using-javascript-to-sum-selected-cells-in-ie6)&#xD;&#xA;&#xD;&#xA;Most of the copy paste features works on IE only as of now. I save all the changes together on ""Save"" button click so all the updates on the cells are on screen only until user hits the ""Save"" button.&#xD;&#xA;&#xD;&#xA;Although, things are still in flux right now, I'd like to have the implementation design on paper now than later. I'm looking for an easy way to UNDO only the LAST change. I've been thinking of using jQuery's ""data()"" and ""removeData()"" methods to implement this but if there is anything already existing in jqgrid framework that would help, I would like to know. Any suggestions??&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    <style type=""text/css"">&#xD;&#xA;        .sel {background-color: #96B9DC !important; }&#xD;&#xA;        .altered {}&#xD;&#xA;    </style>&#xD;&#xA;&#xD;&#xA;    <div style=""width:100%; background-color:#FFF; border:1px solid #000;""><input id=""btnsavechanges"" value=""Save Changes"" style=""width:120px;"" class=""formbutton ui-corner-all"" type=""button"" onclick=""getChanges(); return false;"" /></div>&#xD;&#xA;    <table id=""grd_asset"" width=""100%"" onSelectStart=""return false;""></table>&#xD;&#xA;    <div id=""pfrmac"" style='width:100%;'></div>&#xD;&#xA;    <input type=""hidden"" id=""hidSelected"" value="""" />&#xD;&#xA;&#xD;&#xA;    <!-- copy content from the grid cells -->&#xD;&#xA;    <input type=""hidden"" id=""hidCopiedText"" value="""" />&#xD;&#xA;&#xD;&#xA;    <!-- Start and End of cell selection -->&#xD;&#xA;    <input type=""hidden"" id=""hidStartCell"" value="""" />&#xD;&#xA;    <input type=""hidden"" id=""hidEndCell"" value="""" />&#xD;&#xA;&#xD;&#xA;    <!-- Start and End of last modified cell(s) -->&#xD;&#xA;    <input type=""hidden"" id=""hidModStartCell"" value="""" />&#xD;&#xA;    <input type=""hidden"" id=""hidModEndCell"" value="""" />&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    <script type=""text/javascript"">&#xD;&#xA;        /*************************************************/&#xD;&#xA;        /**************** Grid Utilities  ****************/&#xD;&#xA;        /*************************************************/&#xD;&#xA;        FnGrid = function () {&#xD;&#xA;            this.GridColumns = function () {&#xD;&#xA;                return assetGrid.jqGrid('getGridParam', 'colModel');&#xD;&#xA;            }&#xD;&#xA;            this.GetSelCells = function () {&#xD;&#xA;                return assetGrid.find(""td.sel"");&#xD;&#xA;            }&#xD;&#xA;            this.ClearSelection = function () {&#xD;&#xA;                assetGrid.find(""td"").removeClass(""sel"");&#xD;&#xA;            }&#xD;&#xA;            this.ClearSavedHistory = function () {&#xD;&#xA;                assetGrid.removeData();&#xD;&#xA;            }&#xD;&#xA;            this.ClearMarkedChanges = function () {&#xD;&#xA;                assetGrid.find(""tr"").removeClass(""altered"");&#xD;&#xA;            }&#xD;&#xA;            this.GetRowCells = function (cell) {&#xD;&#xA;                return cell.parent().children(""td"")&#xD;&#xA;            }&#xD;&#xA;            this.GetRowId = function (cell) {&#xD;&#xA;                var row = cell.closest('tr.jqgrow');&#xD;&#xA;                return row.attr('id');&#xD;&#xA;            }&#xD;&#xA;            this.GetRowIndex = function (cell) {&#xD;&#xA;                var cellrow = cell.parent();&#xD;&#xA;                return cellrow.parent().children(""tr"").index(cellrow);&#xD;&#xA;            }&#xD;&#xA;            this.GetColIndex = function (cell) {&#xD;&#xA;                return cell.parent().children(""td"").index(cell);&#xD;&#xA;            }&#xD;&#xA;            this.IsInEditMode = function () {&#xD;&#xA;                var RecordsInEditMode = assetGrid.find(""tr[editable='1'"");&#xD;&#xA;                return (RecordsInEditMode && RecordsInEditMode.length > 0);&#xD;&#xA;            }&#xD;&#xA;            this.HandleEditMode = function (cell, e) {&#xD;&#xA;                var ctrl = e.ctrlKey;&#xD;&#xA;                var alt = e.altKey;&#xD;&#xA;&#xD;&#xA;                var keyCode = (e.keyCode ? e.keyCode : e.which);&#xD;&#xA;                if (keyCode) {&#xD;&#xA;                    if (keyCode >= 32 && keyCode <= 126 && !ctrl && !alt) {&#xD;&#xA;&#xD;&#xA;                        // switch the cell to edit mode if not already&#xD;&#xA;                        if (!($(cell).hasClass(""edit-cell""))) {&#xD;&#xA;                            assetGrid.editCell(this.GetRowIndex($(cell)), this.GetColIndex($(cell)), true);&#xD;&#xA;                            // transfer focus to the input&#xD;&#xA;                            var inp = $(cell).children(""input,select,textarea"")&#xD;&#xA;                            if (inp) inp.focus();&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;                return true;&#xD;&#xA;            }&#xD;&#xA;            this.HandleInputNavigation = function (ele, evt) {&#xD;&#xA;                evt = window.event || evt;&#xD;&#xA;&#xD;&#xA;                switch (evt.keyCode) {&#xD;&#xA;                    // down arrow                   &#xD;&#xA;                    case 40:&#xD;&#xA;                        if (!$(ele).parent().hasClass(""altered""))&#xD;&#xA;                            $(ele).parent().addClass(""altered"");&#xD;&#xA;&#xD;&#xA;                        irow = this.GetRowIndex($(ele).parent());&#xD;&#xA;                        icol = this.GetColIndex($(ele).parent())&#xD;&#xA;                        var prevcell = irow + "","" + icol;&#xD;&#xA;                        $(""#hidModStartCell"").val(prevcell);&#xD;&#xA;                        $(""#hidModEndCell"").val(prevcell);&#xD;&#xA;&#xD;&#xA;                        downele = $(ele).parent()&#xD;&#xA;                                .parent()&#xD;&#xA;                                .next()&#xD;&#xA;                                .children(""td"")[this.GetColIndex($(ele).parent())];&#xD;&#xA;&#xD;&#xA;                        this.ClearSelection();&#xD;&#xA;                        assetGrid.editCell(this.GetRowIndex($(downele)), this.GetColIndex($(downele)), true);&#xD;&#xA;                        break;&#xD;&#xA;&#xD;&#xA;                    // up arrow                   &#xD;&#xA;                    case 38:&#xD;&#xA;                        if (!$(ele).parent().hasClass(""altered""))&#xD;&#xA;                            $(ele).parent().addClass(""altered"");&#xD;&#xA;&#xD;&#xA;                        irow = this.GetRowIndex($(ele).parent());&#xD;&#xA;                        icol = this.GetColIndex($(ele).parent())&#xD;&#xA;                        var prevcell = irow + "","" + icol;&#xD;&#xA;                        $(""#hidModStartCell"").val(prevcell);&#xD;&#xA;                        $(""#hidModEndCell"").val(prevcell);&#xD;&#xA;&#xD;&#xA;                        topele = $(ele).parent()&#xD;&#xA;                                .parent()&#xD;&#xA;                                .prev()&#xD;&#xA;                                .children(""td"")[this.GetColIndex($(ele).parent())];&#xD;&#xA;&#xD;&#xA;                        if (this.GetRowIndex($(topele)) <= 0) break;&#xD;&#xA;&#xD;&#xA;                        this.ClearSelection();&#xD;&#xA;                        assetGrid.editCell(this.GetRowIndex($(topele)), this.GetColIndex($(topele)), true);&#xD;&#xA;                        break;&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        var autocomp = new AutoCompleteRequest();&#xD;&#xA;        var lastSel = """";&#xD;&#xA;        var assetGrid = $('#grd_asset');&#xD;&#xA;        var start = null;&#xD;&#xA;        var fnassetgrid = new FnGrid();&#xD;&#xA;        var lastSel = -1;&#xD;&#xA;&#xD;&#xA;        function selectTo(cell) {&#xD;&#xA;            if (start == null)&#xD;&#xA;                return;&#xD;&#xA;            fnassetgrid.ClearSelection();&#xD;&#xA;            var stop = $(cell);&#xD;&#xA;            var tbl = start.closest(""table"");&#xD;&#xA;            var rs = tbl.children(""tbody"").children(""tr"");&#xD;&#xA;            var r0 = rs.index(start.parent()), c0 = fnassetgrid.GetColIndex(start);&#xD;&#xA;            var r1 = rs.index(stop.parent()), c1 = fnassetgrid.GetColIndex(stop);&#xD;&#xA;            var concat = """";&#xD;&#xA;            for (var i = r0; i <= r1; i++) {&#xD;&#xA;                var cells = $(rs.get(i)).children(""td"");&#xD;&#xA;                var rowid = 0;&#xD;&#xA;                for (var j = c0; j <= c1; j++) {&#xD;&#xA;                    var cell = $(cells.get(j));&#xD;&#xA;                    if (rowid == 0) rowid = fnassetgrid.GetRowId(cell);&#xD;&#xA;                    if (cell.is("":hidden"")) continue;&#xD;&#xA;                    cell.addClass(""sel"");&#xD;&#xA;                    concat += assetGrid.getCell(rowid, j) + ""\\t"";&#xD;&#xA;                }&#xD;&#xA;                if (concat.lastIndexOf(""\\t"") == concat.length - 1)&#xD;&#xA;                    concat = concat.substring(0, concat.lastIndexOf(""\\t""));&#xD;&#xA;&#xD;&#xA;                concat += escape(""\\r\\n"");&#xD;&#xA;            }&#xD;&#xA;            $(""#hidSelected"").val(concat.trim());&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        $(document).ready(function () {&#xD;&#xA;            /*************************************************/&#xD;&#xA;            /******************* THE GRID  *******************/&#xD;&#xA;            /*************************************************/&#xD;&#xA;            assetGrid.jqGrid({&#xD;&#xA;                ajaxGridOptions: { contentType: ""application/json; charset=utf-8"", type: ""POST"" },&#xD;&#xA;                url: '../api/Internalservices.asmx/GetProjectAssets',&#xD;&#xA;                datatype: 'json',&#xD;&#xA;                serializeGridData: function (postData) {&#xD;&#xA;                    if (postData.searchField === undefined) postData.searchField = null;&#xD;&#xA;                    if (postData.searchString === undefined) postData.searchString = null;&#xD;&#xA;                    if (postData.searchOper === undefined) postData.searchOper = null;&#xD;&#xA;                    if (postData.filters === undefined) postData.filters = null;&#xD;&#xA;                    return JSON.stringify(postData);&#xD;&#xA;                },&#xD;&#xA;                colNames: [' ', 'AssetId', 'Item#', 'Make', 'Description'],&#xD;&#xA;                colModel: [&#xD;&#xA;                    { name: 'ctrls', width: 80, fixed: true, sortable: false, resize: false, formatter: 'actions',&#xD;&#xA;                        formatoptions: { keys: true }&#xD;&#xA;                    },&#xD;&#xA;   		            { name: 'AssetID', label: 'AssetID', width: 65, key: true, hidden: true },&#xD;&#xA;   		            { name: 'Sequence', label: 'Item#', width: 50, align: ""right"", sorttype: 'int', sortable: true, editoptions: { dataEvents: [{ type: 'keydown', fn: function (e) { fnassetgrid.HandleInputNavigation(this, e); } }]} },&#xD;&#xA;   		            { name: 'Make', label: 'Make', width: 105, editable: true, edittype: 'text', editoptions: {&#xD;&#xA;   		                size: 18,&#xD;&#xA;   		                dataEvents: [{&#xD;&#xA;   		                    type: 'focus',&#xD;&#xA;   		                    fn: function (e) {&#xD;&#xA;   		                        $(this).autocomplete({&#xD;&#xA;   		                            source: autocomp.source,&#xD;&#xA;   		                            delay: autocomp.delay,&#xD;&#xA;   		                            minLength: autocomp.minLength&#xD;&#xA;   		                        });&#xD;&#xA;&#xD;&#xA;   		                        $(this).bind(""autocompleteopen"", autocomp.open);&#xD;&#xA;   		                        $(this).bind(""autocompleteclose"", autocomp.close);&#xD;&#xA;   		                    }&#xD;&#xA;   		                }]&#xD;&#xA;   		            }&#xD;&#xA;   		            },&#xD;&#xA;                    { name: 'Description', label: 'Description', fixed: false, editable: true, edittype: 'textarea', unformat: unfrmttextarea, editoptions: { rows: ""10"", cols: ""40""} }&#xD;&#xA;   	            ],&#xD;&#xA;                rowNum: 10, /* no of recs in a grid */&#xD;&#xA;                width: 1330,&#xD;&#xA;                rowList: [10, 20, 30], /* array to construct a select box element in the pager */&#xD;&#xA;                pager: '#pfrmac',&#xD;&#xA;                sortname: 'AssetID', /* initial sorting column */&#xD;&#xA;                viewrecords: true,  /* display the number of total records on the pager bar */&#xD;&#xA;                pginput: true,&#xD;&#xA;                sortorder: ""desc"",&#xD;&#xA;                cellEdit: true,&#xD;&#xA;                shrinkToFit: true,&#xD;&#xA;                jsonReader: {&#xD;&#xA;                    root: function (obj) { return obj.d.SearchResultSet; },&#xD;&#xA;                    page: function (obj) { return obj.d.PageNum; }, // current page of the query&#xD;&#xA;                    total: function (obj) { return obj.d.TotalPages; }, // total pages for the query&#xD;&#xA;                    records: function (obj) { return obj.d.TotalNoOfSearchResultItems; },&#xD;&#xA;                    id: ""AssetID"",&#xD;&#xA;                    repeatitems: false,&#xD;&#xA;                    userdata: function (obj) {&#xD;&#xA;                        extendUserSession();&#xD;&#xA;                        return { ""Error"": obj.d.Error, ""SearchResultSet"": obj.d.SearchResultSet }&#xD;&#xA;                    }&#xD;&#xA;                },&#xD;&#xA;                loadonce: false,&#xD;&#xA;                caption: ""Asset list"",&#xD;&#xA;                height: '100%',&#xD;&#xA;                cellsubmit: 'clientArray',&#xD;&#xA;                beforeSaveCell: function (rowid, cellname, value, iRow, iCol) {&#xD;&#xA;                    savedrow = assetGrid.getGridParam('savedRow');&#xD;&#xA;                    if (savedrow && savedrow.length > 0) {&#xD;&#xA;                        if (savedrow[0].id == iRow && savedrow[0].ic == iCol && savedrow[0].v != value) {&#xD;&#xA;                            tr = $('#' + rowid);&#xD;&#xA;                            if (tr && !tr.hasClass(""altered"")) {&#xD;&#xA;                                tr.addClass(""altered"");&#xD;&#xA;                                there_are_unsaved_changes = 1;&#xD;&#xA;                            }&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                },&#xD;&#xA;                loadComplete: function (data) {&#xD;&#xA;                    if (assetGrid.getGridParam('userData').Error && assetGrid.getGridParam('userData').Error != '')&#xD;&#xA;                        alert(""Error: "" + assetGrid.getGridParam('userData').Error);&#xD;&#xA;                },&#xD;&#xA;                gridComplete: function () {&#xD;&#xA;                    rowindex = 1;&#xD;&#xA;                    rows = assetGrid.find(""tr"");&#xD;&#xA;&#xD;&#xA;                    if (rows && rows.length > 1) {&#xD;&#xA;                        for (i = 1; i < rows.length; i++) {&#xD;&#xA;                            $(rows[i]).find(""td"").each(function (evt) {&#xD;&#xA;                                evt = window.event || evt;&#xD;&#xA;&#xD;&#xA;                                start = $(this);&#xD;&#xA;                                colindex = fnassetgrid.GetColIndex(start);&#xD;&#xA;                                if (colindex > 0) {&#xD;&#xA;                                    $(this).click(function () {&#xD;&#xA;                                        if (!($(this).hasClass(""edit-cell"")))&#xD;&#xA;                                            return false;&#xD;&#xA;                                    }).dblclick(function () {&#xD;&#xA;                                        if (!($(this).hasClass(""edit-cell""))) {&#xD;&#xA;                                            fnassetgrid.PutCellInEdit(this, fnassetgrid.GetRowIndex($(this)), fnassetgrid.GetColIndex($(this)), true);&#xD;&#xA;                                            return;&#xD;&#xA;                                        }&#xD;&#xA;                                        else&#xD;&#xA;                                            return true;&#xD;&#xA;                                    }).mousedown(function () {&#xD;&#xA;                                        if (fnassetgrid.IsInEditMode())&#xD;&#xA;                                            return true;&#xD;&#xA;                                        start = $(this);&#xD;&#xA;                                        selectTo(this);&#xD;&#xA;                                        return false;&#xD;&#xA;                                    }).mouseover(function () {&#xD;&#xA;                                        selectTo(this);&#xD;&#xA;                                    }).mouseup(function () {&#xD;&#xA;                                        selectTo(this);&#xD;&#xA;                                        $(""#hidEndCell"").val(fnassetgrid.GetColIndex($(this)));&#xD;&#xA;                                        start = null;&#xD;&#xA;                                    }).keypress(function (e) {&#xD;&#xA;                                        fnassetgrid.HandleEditMode(this, e);&#xD;&#xA;                                    });&#xD;&#xA;                                }&#xD;&#xA;                            });&#xD;&#xA;                            rowindex++;&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;            });&#xD;&#xA;&#xD;&#xA;            function unfrmttextarea(cellvalue, options, cellobject) {&#xD;&#xA;                return cellvalue;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            $(""body"").mouseup(function () {&#xD;&#xA;                start = null;&#xD;&#xA;            });&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;            /*************************************************/&#xD;&#xA;            /*********** Global KEYUP integration  ***********/&#xD;&#xA;            /*************************************************/&#xD;&#xA;            $(assetGrid).keyup(function (e) {&#xD;&#xA;                var ctrl = e.ctrlKey&#xD;&#xA;                var key = e.charCode || e.keyCode || 0;&#xD;&#xA;&#xD;&#xA;                if ((ctrl && key == 88) /* CUT */ || (ctrl && key == 67) /* COPY */ || (ctrl && key == 86) /* PASTE */ || (ctrl && key == 90) /* UNDO */) {&#xD;&#xA;&#xD;&#xA;                    if ((ctrl && key == 88) /* CUT */ || (ctrl && key == 67) /* COPY */) {&#xD;&#xA;                        CopyToClipboard(""hidSelected"");&#xD;&#xA;&#xD;&#xA;                        var selectedCells = fnassetgrid.GetSelCells();&#xD;&#xA;&#xD;&#xA;                        if (selectedCells && selectedCells.length > 0) {&#xD;&#xA;                            $(""#hidStartCell"").val(fnassetgrid.GetRowIndex($(selectedCells[0])) + "","" + fnassetgrid.GetColIndex($(selectedCells[0])));&#xD;&#xA;                            $(""#hidEndCell"").val(fnassetgrid.GetRowIndex($(selectedCells[selectedCells.length - 1])) + "","" + fnassetgrid.GetColIndex($(selectedCells[selectedCells.length - 1])));&#xD;&#xA;                            $(""#hidCopiedText"").val($(""#hidSelected"").val());&#xD;&#xA;                        }&#xD;&#xA;                        else {&#xD;&#xA;                            $(""#hidStartCell"").val('');&#xD;&#xA;                            $(""#hidEndCell"").val('');&#xD;&#xA;                        }&#xD;&#xA;&#xD;&#xA;                        if (ctrl && key == 88) /* CUT */{&#xD;&#xA;                            assetGrid.find(""td.sel"").each(function () {&#xD;&#xA;                                row = $(this).closest('tr.jqgrow');&#xD;&#xA;                                rowId = row.attr('id');&#xD;&#xA;                                assetGrid.setCell(rowId, (fnassetgrid.GridColumns())[fnassetgrid.GetColIndex($(this))].name, '', '', '', true);&#xD;&#xA;                            });&#xD;&#xA;                            fnassetgrid.ClearSelection();&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                    else if (ctrl && key == 86) /* PASTE */{&#xD;&#xA;                        var clipboardata = getClipboardData();&#xD;&#xA;                        if (get_objtype(clipboardata) != ""[object String]"") {&#xD;&#xA;                            alert(""The data you are pasting either is empty or incompatible"");&#xD;&#xA;                            return false;&#xD;&#xA;                        }&#xD;&#xA;&#xD;&#xA;                        pasteinfo(assetGrid, clipboardata);&#xD;&#xA;                    }&#xD;&#xA;                    else if ((ctrl && key == 90) /* UNDO */) {&#xD;&#xA;/*** TBD : Undo feature requires more coding than I thought. No jqgrid features available to get the help  ***/&#xD;&#xA;                    }&#xD;&#xA;                    return false; // prevent bubbling&#xD;&#xA;                }&#xD;&#xA;                else&#xD;&#xA;                    return true; // let it bubble&#xD;&#xA;            });&#xD;&#xA;        });&#xD;&#xA;&#xD;&#xA;        &#xD;&#xA;        /********************************************************************/&#xD;&#xA;        /*********** Method to retrieve and submit altered asset information ***********/&#xD;&#xA;        /********************************************************************/&#xD;&#xA;        function getChanges() {&#xD;&#xA;            var editedxml = ""<?xml version='1.0' encoding='utf-8' ?\\>\\n"";&#xD;&#xA;            editedxml += ""<ASSETS>\\n"";&#xD;&#xA;            assetGrid.find(""tr.altered"").each(function () {&#xD;&#xA;                editedxml += ""<ASSET>\\n"";&#xD;&#xA;                $(this).children(""td"").each(function () {&#xD;&#xA;                    colindex = fnassetgrid.GetColIndex($(this));                    &#xD;&#xA;                    if (colindex > 0) {&#xD;&#xA;                        editedxml += ""<"" + (fnassetgrid.GridColumns())[colindex].name.toUpperCase() + "">"" + $(this).text().trim() + ""</"" + (fnassetgrid.GridColumns())[colindex].name.toUpperCase() + "">\\n"";&#xD;&#xA;                    }&#xD;&#xA;                })&#xD;&#xA;                editedxml += ""</ASSET>\\n"";&#xD;&#xA;            })&#xD;&#xA;            editedxml += ""</ASSETS>"";&#xD;&#xA;&#xD;&#xA;            fnassetgrid.ClearMarkedChanges();&#xD;&#xA;            &#xD;&#xA;            //TBD: submit XML to an AJAX service&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        var _browserPasteData = null;&#xD;&#xA;        function getClipboardData() {&#xD;&#xA;            if (_browserPasteData) // Safari/Chrome logic&#xD;&#xA;                return _browserPasteData;&#xD;&#xA;            if (window.clipboardData) // IE logic&#xD;&#xA;            {&#xD;&#xA;                return window.clipboardData.getData(""Text"");&#xD;&#xA;            }&#xD;&#xA;            else if (typeof (netscape) != ""undefined"") // Firefox logic&#xD;&#xA;            {&#xD;&#xA;                netscape.security.PrivilegeManager.enablePrivilege('UniversalXPConnect');&#xD;&#xA;                var clip = Components.classes[""@mozilla.org/widget/clipboard;1""].createInstance(Components.interfaces.nsIClipboard);&#xD;&#xA;                var trans = Components.classes[""@mozilla.org/widget/transferable;1""].createInstance(Components.interfaces.nsITransferable);&#xD;&#xA;                trans.addDataFlavor(""text/unicode"");&#xD;&#xA;                clip.getData(trans, clip.kGlobalClipboard);&#xD;&#xA;                var str = new Object();&#xD;&#xA;                var len = new Object();&#xD;&#xA;                trans.getTransferData(""text/unicode"", str, len);&#xD;&#xA;                if (str)&#xD;&#xA;                    return str.value.QueryInterface(Components.interfaces.nsISupportsString).toString();&#xD;&#xA;            }&#xD;&#xA;            return null;&#xD;&#xA;        }&#xD;&#xA;        // In Safari/Chrome the clipboard data can only be accessed&#xD;&#xA;        // from the onpaste event. In this sample the event is handled &#xD;&#xA;        // off the body element: <body onpaste=""browserPaste(event)"">&#xD;&#xA;        function browserPaste(e) {&#xD;&#xA;            _browserPasteData = e.clipboardData && e.clipboardData.getData ?&#xD;&#xA;                e.clipboardData.getData('text/plain') : null;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        function pasteinfo(objGrid, info) {&#xD;&#xA;            selectedCells = fnassetgrid.GetSelCells();&#xD;&#xA;            firstcell = $(selectedCells[0]);&#xD;&#xA;            firstselectedcolindex = fnassetgrid.GetColIndex(firstcell);&#xD;&#xA;            rowcellscount = fnassetgrid.GetRowCells(firstcell).length;&#xD;&#xA;&#xD;&#xA;            if (firstselectedcolindex == 0) {&#xD;&#xA;                alert(""You cannot paste into an non-editable column"");&#xD;&#xA;                return false;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            if (selectedCells && selectedCells.length > 0) {&#xD;&#xA;                // if the clipboard info is from the asset grid&#xD;&#xA;                if (info && info == $(""#hidCopiedText"").val()) {&#xD;&#xA;                    // get the index values of last copied source cell&#xD;&#xA;                    hidStartCell = -1;&#xD;&#xA;                    if ($(""#hidStartCell"").val() != '' && $(""#hidStartCell"").val().split(',').length > 1) {&#xD;&#xA;                        hidStartCell = $(""#hidStartCell"").val().split(',')[1];&#xD;&#xA;                    }&#xD;&#xA;&#xD;&#xA;                    // if columns of source and dest do not match, throw warning&#xD;&#xA;                    if (firstselectedcolindex != hidStartCell) {&#xD;&#xA;                        if (!confirm(""The data you are pasting comes from a different set of \\ncolumns than those that you are pasting into.\\n\\nAre you sure you want to paste into these columns?""))&#xD;&#xA;                            return false;&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;&#xD;&#xA;                $(""#hidModStartCell"").val(fnassetgrid.GetRowIndex(firstcell) + "","" + firstselectedcolindex);&#xD;&#xA;&#xD;&#xA;                var prevcell = null;&#xD;&#xA;                // remove the last ""line break"" and break clipboard info into lines&#xD;&#xA;                datarows = unescape(info).replace(/\\r\\n$/, '').split(""\\r\\n"");&#xD;&#xA;                if (datarows && datarows.length > 0) {&#xD;&#xA;                    currentrow = firstcell.parent();&#xD;&#xA;                    currentcell = firstcell;&#xD;&#xA;&#xD;&#xA;                    // if the source is a single cell, allow it to be pasted over multiple cells&#xD;&#xA;                    if (datarows.length == 1 && datarows[0].split(""\\t"").length == 1) {&#xD;&#xA;                        copydata = datarows[0].split(""\\t"");&#xD;&#xA;&#xD;&#xA;                        $.each(selectedCells, function (index, value) {&#xD;&#xA;                            prevcell = $(value);&#xD;&#xA;                            if (!prevcell.parent().hasClass(""altered"")) {&#xD;&#xA;                                prevcell.parent().addClass(""altered"");&#xD;&#xA;                                there_are_unsaved_changes = 1;&#xD;&#xA;                            }&#xD;&#xA;                            var rowId = prevcell.closest('tr.jqgrow').attr('id');&#xD;&#xA;                            var icol = fnassetgrid.GetColIndex(prevcell);&#xD;&#xA;                            assetGrid.setCell(rowId, (fnassetgrid.GridColumns())[icol].name, copydata[0], '', '', true);&#xD;&#xA;                        });&#xD;&#xA;                    }&#xD;&#xA;                    else {&#xD;&#xA;                        for (i = 0; i < datarows.length && currentrow.length > 0; ++i) {&#xD;&#xA;                            if (datarows[i] == '') break;&#xD;&#xA;                            // break each lines into columns&#xD;&#xA;                            datarows[i] = datarows[i].split(""\\t"");&#xD;&#xA;                            var row = null;&#xD;&#xA;                            var rowId = null;&#xD;&#xA;                            var rowindex = null;&#xD;&#xA;                            for (j = 0; j < datarows[i].length && currentcell.length > 0; ++j) {&#xD;&#xA;                                // mark the row as altered&#xD;&#xA;                                if (!currentcell.parent().hasClass(""altered"")) {&#xD;&#xA;                                    currentcell.parent().addClass(""altered"");&#xD;&#xA;                                    there_are_unsaved_changes = 1;&#xD;&#xA;                                }&#xD;&#xA;                                // for each outer iteration get the rowid&#xD;&#xA;                                if (row == null) {&#xD;&#xA;                                    row = (currentcell).closest('tr.jqgrow');&#xD;&#xA;                                    rowId = row.attr('id');&#xD;&#xA;                                }&#xD;&#xA;                                var icol = fnassetgrid.GetColIndex(currentcell);&#xD;&#xA;                                assetGrid.setCell(rowId, (fnassetgrid.GridColumns())[icol].name, datarows[i][j], '', '', true);&#xD;&#xA;                                prevcell = currentcell;&#xD;&#xA;&#xD;&#xA;                                // advance to the next visible cell -- only consider pasting into visible columns&#xD;&#xA;                                do {&#xD;&#xA;                                    currentcell = currentcell.next();&#xD;&#xA;                                }&#xD;&#xA;                                while ((currentcell.length > 0) && currentcell.is("":hidden""))&#xD;&#xA;                            }&#xD;&#xA;&#xD;&#xA;                            currentrow = currentrow.next();&#xD;&#xA;                            currentcell = $(currentrow.children(""td"")[firstselectedcolindex]);&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            if (prevcell.length > 0)&#xD;&#xA;                $(""#hidModEndCell"").val(fnassetgrid.GetRowIndex(prevcell) + "","" + fnassetgrid.GetColIndex(prevcell));&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;    </script>&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Many Thanks in advance!&#xD;&#xA;&#xD;&#xA;";;deleted 97 characters in body
16342585;7016109;863791;5;937f7278-4b62-4452-b37b-f56210a3ddca;2011-09-13 17:36:08.0;"Just to give little update before putting my question....&#xD;&#xA;&#xD;&#xA;I've been able to come up with some additional features on the jqgrid that I'm using (after going through many forums) including: copy-paste back and forth from Excel to jqgrid, edit cell on keypress and dblclick, copy and paste multiple cells from one block to another on the same grid using mouse selection (from here http://stackoverflow.com/questions/1821074/using-javascript-to-sum-selected-cells-in-ie6)&#xD;&#xA;&#xD;&#xA;Most of the copy paste features works on IE only as of now. I save all the changes together on ""Save"" button click so all the updates on the cells are on screen only until user hits the ""Save"" button.&#xD;&#xA;&#xD;&#xA;Although, things are still in flux right now, I'd like to have the implementation design on paper now than later. I'm looking for an easy way to UNDO only the LAST change. I've been thinking of using jQuery's ""data()"" and ""removeData()"" methods to implement this but if there is anything already existing in jqgrid framework that would help, I would like to know. Any suggestions??&#xD;&#xA;&#xD;&#xA;    <style type=""text/css"">&#xD;&#xA;        .sel {background-color: #96B9DC !important; }&#xD;&#xA;        .altered {}&#xD;&#xA;    </style>&#xD;&#xA;&#xD;&#xA;    <div style=""width:100%; background-color:#FFF; border:1px solid #000;""><input id=""btnsavechanges"" value=""Save Changes"" style=""width:120px;"" class=""formbutton ui-corner-all"" type=""button"" onclick=""getChanges(); return false;"" /></div>&#xD;&#xA;    <table id=""grd_asset"" width=""100%"" onSelectStart=""return false;""></table>&#xD;&#xA;    <div id=""pfrmac"" style='width:100%;'></div>&#xD;&#xA;    <input type=""hidden"" id=""hidSelected"" value="""" />&#xD;&#xA;&#xD;&#xA;    <!-- copy content from the grid cells -->&#xD;&#xA;    <input type=""hidden"" id=""hidCopiedText"" value="""" />&#xD;&#xA;&#xD;&#xA;    <!-- Start and End of cell selection -->&#xD;&#xA;    <input type=""hidden"" id=""hidStartCell"" value="""" />&#xD;&#xA;    <input type=""hidden"" id=""hidEndCell"" value="""" />&#xD;&#xA;&#xD;&#xA;    <!-- Start and End of last modified cell(s) -->&#xD;&#xA;    <input type=""hidden"" id=""hidModStartCell"" value="""" />&#xD;&#xA;    <input type=""hidden"" id=""hidModEndCell"" value="""" />&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    <script type=""text/javascript"">&#xD;&#xA;        /*************************************************/&#xD;&#xA;        /**************** Grid Utilities  ****************/&#xD;&#xA;        /*************************************************/&#xD;&#xA;        FnGrid = function () {&#xD;&#xA;            this.GridColumns = function () {&#xD;&#xA;                return assetGrid.jqGrid('getGridParam', 'colModel');&#xD;&#xA;            }&#xD;&#xA;            this.GetSelCells = function () {&#xD;&#xA;                return assetGrid.find(""td.sel"");&#xD;&#xA;            }&#xD;&#xA;            this.ClearSelection = function () {&#xD;&#xA;                assetGrid.find(""td"").removeClass(""sel"");&#xD;&#xA;            }&#xD;&#xA;            this.ClearSavedHistory = function () {&#xD;&#xA;                assetGrid.removeData();&#xD;&#xA;            }&#xD;&#xA;            this.ClearMarkedChanges = function () {&#xD;&#xA;                assetGrid.find(""tr"").removeClass(""altered"");&#xD;&#xA;            }&#xD;&#xA;            this.GetRowCells = function (cell) {&#xD;&#xA;                return cell.parent().children(""td"")&#xD;&#xA;            }&#xD;&#xA;            this.GetRowId = function (cell) {&#xD;&#xA;                var row = cell.closest('tr.jqgrow');&#xD;&#xA;                return row.attr('id');&#xD;&#xA;            }&#xD;&#xA;            this.GetRowIndex = function (cell) {&#xD;&#xA;                var cellrow = cell.parent();&#xD;&#xA;                return cellrow.parent().children(""tr"").index(cellrow);&#xD;&#xA;            }&#xD;&#xA;            this.GetColIndex = function (cell) {&#xD;&#xA;                return cell.parent().children(""td"").index(cell);&#xD;&#xA;            }&#xD;&#xA;            this.IsInEditMode = function () {&#xD;&#xA;                var RecordsInEditMode = assetGrid.find(""tr[editable='1'"");&#xD;&#xA;                return (RecordsInEditMode && RecordsInEditMode.length > 0);&#xD;&#xA;            }&#xD;&#xA;            this.HandleEditMode = function (cell, e) {&#xD;&#xA;                var ctrl = e.ctrlKey;&#xD;&#xA;                var alt = e.altKey;&#xD;&#xA;&#xD;&#xA;                var keyCode = (e.keyCode ? e.keyCode : e.which);&#xD;&#xA;                if (keyCode) {&#xD;&#xA;                    if (keyCode >= 32 && keyCode <= 126 && !ctrl && !alt) {&#xD;&#xA;&#xD;&#xA;                        // switch the cell to edit mode if not already&#xD;&#xA;                        if (!($(cell).hasClass(""edit-cell""))) {&#xD;&#xA;                            assetGrid.editCell(this.GetRowIndex($(cell)), this.GetColIndex($(cell)), true);&#xD;&#xA;                            // transfer focus to the input&#xD;&#xA;                            var inp = $(cell).children(""input,select,textarea"")&#xD;&#xA;                            if (inp) inp.focus();&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;                return true;&#xD;&#xA;            }&#xD;&#xA;            this.HandleInputNavigation = function (ele, evt) {&#xD;&#xA;                evt = window.event || evt;&#xD;&#xA;&#xD;&#xA;                switch (evt.keyCode) {&#xD;&#xA;                    // down arrow                   &#xD;&#xA;                    case 40:&#xD;&#xA;                        if (!$(ele).parent().hasClass(""altered""))&#xD;&#xA;                            $(ele).parent().addClass(""altered"");&#xD;&#xA;&#xD;&#xA;                        irow = this.GetRowIndex($(ele).parent());&#xD;&#xA;                        icol = this.GetColIndex($(ele).parent())&#xD;&#xA;                        var prevcell = irow + "","" + icol;&#xD;&#xA;                        $(""#hidModStartCell"").val(prevcell);&#xD;&#xA;                        $(""#hidModEndCell"").val(prevcell);&#xD;&#xA;&#xD;&#xA;                        downele = $(ele).parent()&#xD;&#xA;                                .parent()&#xD;&#xA;                                .next()&#xD;&#xA;                                .children(""td"")[this.GetColIndex($(ele).parent())];&#xD;&#xA;&#xD;&#xA;                        this.ClearSelection();&#xD;&#xA;                        assetGrid.editCell(this.GetRowIndex($(downele)), this.GetColIndex($(downele)), true);&#xD;&#xA;                        break;&#xD;&#xA;&#xD;&#xA;                    // up arrow                   &#xD;&#xA;                    case 38:&#xD;&#xA;                        if (!$(ele).parent().hasClass(""altered""))&#xD;&#xA;                            $(ele).parent().addClass(""altered"");&#xD;&#xA;&#xD;&#xA;                        irow = this.GetRowIndex($(ele).parent());&#xD;&#xA;                        icol = this.GetColIndex($(ele).parent())&#xD;&#xA;                        var prevcell = irow + "","" + icol;&#xD;&#xA;                        $(""#hidModStartCell"").val(prevcell);&#xD;&#xA;                        $(""#hidModEndCell"").val(prevcell);&#xD;&#xA;&#xD;&#xA;                        topele = $(ele).parent()&#xD;&#xA;                                .parent()&#xD;&#xA;                                .prev()&#xD;&#xA;                                .children(""td"")[this.GetColIndex($(ele).parent())];&#xD;&#xA;&#xD;&#xA;                        if (this.GetRowIndex($(topele)) <= 0) break;&#xD;&#xA;&#xD;&#xA;                        this.ClearSelection();&#xD;&#xA;                        assetGrid.editCell(this.GetRowIndex($(topele)), this.GetColIndex($(topele)), true);&#xD;&#xA;                        break;&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        var autocomp = new AutoCompleteRequest();&#xD;&#xA;        var lastSel = """";&#xD;&#xA;        var assetGrid = $('#grd_asset');&#xD;&#xA;        var start = null;&#xD;&#xA;        var fnassetgrid = new FnGrid();&#xD;&#xA;        var lastSel = -1;&#xD;&#xA;&#xD;&#xA;        function selectTo(cell) {&#xD;&#xA;            if (start == null)&#xD;&#xA;                return;&#xD;&#xA;            fnassetgrid.ClearSelection();&#xD;&#xA;            var stop = $(cell);&#xD;&#xA;            var tbl = start.closest(""table"");&#xD;&#xA;            var rs = tbl.children(""tbody"").children(""tr"");&#xD;&#xA;            var r0 = rs.index(start.parent()), c0 = fnassetgrid.GetColIndex(start);&#xD;&#xA;            var r1 = rs.index(stop.parent()), c1 = fnassetgrid.GetColIndex(stop);&#xD;&#xA;            var concat = """";&#xD;&#xA;            for (var i = r0; i <= r1; i++) {&#xD;&#xA;                var cells = $(rs.get(i)).children(""td"");&#xD;&#xA;                var rowid = 0;&#xD;&#xA;                for (var j = c0; j <= c1; j++) {&#xD;&#xA;                    var cell = $(cells.get(j));&#xD;&#xA;                    if (rowid == 0) rowid = fnassetgrid.GetRowId(cell);&#xD;&#xA;                    if (cell.is("":hidden"")) continue;&#xD;&#xA;                    cell.addClass(""sel"");&#xD;&#xA;                    concat += assetGrid.getCell(rowid, j) + ""\\t"";&#xD;&#xA;                }&#xD;&#xA;                if (concat.lastIndexOf(""\\t"") == concat.length - 1)&#xD;&#xA;                    concat = concat.substring(0, concat.lastIndexOf(""\\t""));&#xD;&#xA;&#xD;&#xA;                concat += escape(""\\r\\n"");&#xD;&#xA;            }&#xD;&#xA;            $(""#hidSelected"").val(concat.trim());&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        $(document).ready(function () {&#xD;&#xA;            /*************************************************/&#xD;&#xA;            /******************* THE GRID  *******************/&#xD;&#xA;            /*************************************************/&#xD;&#xA;            assetGrid.jqGrid({&#xD;&#xA;                ajaxGridOptions: { contentType: ""application/json; charset=utf-8"", type: ""POST"" },&#xD;&#xA;                url: '../api/yourservices.asmx/GetData',&#xD;&#xA;                datatype: 'json',&#xD;&#xA;                serializeGridData: function (postData) {&#xD;&#xA;                    if (postData.searchField === undefined) postData.searchField = null;&#xD;&#xA;                    if (postData.searchString === undefined) postData.searchString = null;&#xD;&#xA;                    if (postData.searchOper === undefined) postData.searchOper = null;&#xD;&#xA;                    if (postData.filters === undefined) postData.filters = null;&#xD;&#xA;                    return JSON.stringify(postData);&#xD;&#xA;                },&#xD;&#xA;                colNames: [' ', 'AssetId', 'Item#', 'Make', 'Description'],&#xD;&#xA;                colModel: [&#xD;&#xA;                    { name: 'ctrls', width: 80, fixed: true, sortable: false, resize: false, formatter: 'actions',&#xD;&#xA;                        formatoptions: { keys: true }&#xD;&#xA;                    },&#xD;&#xA;   		            { name: 'AssetID', label: 'AssetID', width: 65, key: true, hidden: true },&#xD;&#xA;   		            { name: 'Sequence', label: 'Item#', width: 50, align: ""right"", sorttype: 'int', sortable: true, editoptions: { dataEvents: [{ type: 'keydown', fn: function (e) { fnassetgrid.HandleInputNavigation(this, e); } }]} },&#xD;&#xA;   		            { name: 'Make', label: 'Make', width: 105, editable: true, edittype: 'text', editoptions: {&#xD;&#xA;   		                size: 18,&#xD;&#xA;   		                dataEvents: [{&#xD;&#xA;   		                    type: 'focus',&#xD;&#xA;   		                    fn: function (e) {&#xD;&#xA;   		                        $(this).autocomplete({&#xD;&#xA;   		                            source: autocomp.source,&#xD;&#xA;   		                            delay: autocomp.delay,&#xD;&#xA;   		                            minLength: autocomp.minLength&#xD;&#xA;   		                        });&#xD;&#xA;&#xD;&#xA;   		                        $(this).bind(""autocompleteopen"", autocomp.open);&#xD;&#xA;   		                        $(this).bind(""autocompleteclose"", autocomp.close);&#xD;&#xA;   		                    }&#xD;&#xA;   		                }]&#xD;&#xA;   		            }&#xD;&#xA;   		            },&#xD;&#xA;                    { name: 'Description', label: 'Description', fixed: false, editable: true, edittype: 'textarea', unformat: unfrmttextarea, editoptions: { rows: ""10"", cols: ""40""} }&#xD;&#xA;   	            ],&#xD;&#xA;                rowNum: 10, /* no of recs in a grid */&#xD;&#xA;                width: 1330,&#xD;&#xA;                rowList: [10, 20, 30], /* array to construct a select box element in the pager */&#xD;&#xA;                pager: '#pfrmac',&#xD;&#xA;                sortname: 'AssetID', /* initial sorting column */&#xD;&#xA;                viewrecords: true,  /* display the number of total records on the pager bar */&#xD;&#xA;                pginput: true,&#xD;&#xA;                sortorder: ""desc"",&#xD;&#xA;                cellEdit: true,&#xD;&#xA;                shrinkToFit: true,&#xD;&#xA;                jsonReader: {&#xD;&#xA;                    root: function (obj) { return obj.d.SearchResultSet; },&#xD;&#xA;                    page: function (obj) { return obj.d.PageNum; }, // current page of the query&#xD;&#xA;                    total: function (obj) { return obj.d.TotalPages; }, // total pages for the query&#xD;&#xA;                    records: function (obj) { return obj.d.TotalNoOfSearchResultItems; },&#xD;&#xA;                    id: ""AssetID"",&#xD;&#xA;                    repeatitems: false,&#xD;&#xA;                    userdata: function (obj) {&#xD;&#xA;                        extendUserSession();&#xD;&#xA;                        return { ""Error"": obj.d.Error, ""SearchResultSet"": obj.d.SearchResultSet }&#xD;&#xA;                    }&#xD;&#xA;                },&#xD;&#xA;                loadonce: false,&#xD;&#xA;                caption: ""Asset list"",&#xD;&#xA;                height: '100%',&#xD;&#xA;                cellsubmit: 'clientArray',&#xD;&#xA;                beforeSaveCell: function (rowid, cellname, value, iRow, iCol) {&#xD;&#xA;                    savedrow = assetGrid.getGridParam('savedRow');&#xD;&#xA;                    if (savedrow && savedrow.length > 0) {&#xD;&#xA;                        if (savedrow[0].id == iRow && savedrow[0].ic == iCol && savedrow[0].v != value) {&#xD;&#xA;                            tr = $('#' + rowid);&#xD;&#xA;                            if (tr && !tr.hasClass(""altered"")) {&#xD;&#xA;                                tr.addClass(""altered"");&#xD;&#xA;                                there_are_unsaved_changes = 1;&#xD;&#xA;                            }&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                },&#xD;&#xA;                loadComplete: function (data) {&#xD;&#xA;                    if (assetGrid.getGridParam('userData').Error && assetGrid.getGridParam('userData').Error != '')&#xD;&#xA;                        alert(""Error: "" + assetGrid.getGridParam('userData').Error);&#xD;&#xA;                },&#xD;&#xA;                gridComplete: function () {&#xD;&#xA;                    rowindex = 1;&#xD;&#xA;                    rows = assetGrid.find(""tr"");&#xD;&#xA;&#xD;&#xA;                    if (rows && rows.length > 1) {&#xD;&#xA;                        for (i = 1; i < rows.length; i++) {&#xD;&#xA;                            $(rows[i]).find(""td"").each(function (evt) {&#xD;&#xA;                                evt = window.event || evt;&#xD;&#xA;&#xD;&#xA;                                start = $(this);&#xD;&#xA;                                colindex = fnassetgrid.GetColIndex(start);&#xD;&#xA;                                if (colindex > 0) {&#xD;&#xA;                                    $(this).click(function () {&#xD;&#xA;                                        if (!($(this).hasClass(""edit-cell"")))&#xD;&#xA;                                            return false;&#xD;&#xA;                                    }).dblclick(function () {&#xD;&#xA;                                        if (!($(this).hasClass(""edit-cell""))) {&#xD;&#xA;                                            fnassetgrid.PutCellInEdit(this, fnassetgrid.GetRowIndex($(this)), fnassetgrid.GetColIndex($(this)), true);&#xD;&#xA;                                            return;&#xD;&#xA;                                        }&#xD;&#xA;                                        else&#xD;&#xA;                                            return true;&#xD;&#xA;                                    }).mousedown(function () {&#xD;&#xA;                                        if (fnassetgrid.IsInEditMode())&#xD;&#xA;                                            return true;&#xD;&#xA;                                        start = $(this);&#xD;&#xA;                                        selectTo(this);&#xD;&#xA;                                        return false;&#xD;&#xA;                                    }).mouseover(function () {&#xD;&#xA;                                        selectTo(this);&#xD;&#xA;                                    }).mouseup(function () {&#xD;&#xA;                                        selectTo(this);&#xD;&#xA;                                        $(""#hidEndCell"").val(fnassetgrid.GetColIndex($(this)));&#xD;&#xA;                                        start = null;&#xD;&#xA;                                    }).keypress(function (e) {&#xD;&#xA;                                        fnassetgrid.HandleEditMode(this, e);&#xD;&#xA;                                    });&#xD;&#xA;                                }&#xD;&#xA;                            });&#xD;&#xA;                            rowindex++;&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;            });&#xD;&#xA;&#xD;&#xA;            function unfrmttextarea(cellvalue, options, cellobject) {&#xD;&#xA;                return cellvalue;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            $(""body"").mouseup(function () {&#xD;&#xA;                start = null;&#xD;&#xA;            });&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;            /*************************************************/&#xD;&#xA;            /*********** Global KEYUP integration  ***********/&#xD;&#xA;            /*************************************************/&#xD;&#xA;            $(assetGrid).keyup(function (e) {&#xD;&#xA;                var ctrl = e.ctrlKey&#xD;&#xA;                var key = e.charCode || e.keyCode || 0;&#xD;&#xA;&#xD;&#xA;                if ((ctrl && key == 88) /* CUT */ || (ctrl && key == 67) /* COPY */ || (ctrl && key == 86) /* PASTE */ || (ctrl && key == 90) /* UNDO */) {&#xD;&#xA;&#xD;&#xA;                    if ((ctrl && key == 88) /* CUT */ || (ctrl && key == 67) /* COPY */) {&#xD;&#xA;                        CopyToClipboard(""hidSelected"");&#xD;&#xA;&#xD;&#xA;                        var selectedCells = fnassetgrid.GetSelCells();&#xD;&#xA;&#xD;&#xA;                        if (selectedCells && selectedCells.length > 0) {&#xD;&#xA;                            $(""#hidStartCell"").val(fnassetgrid.GetRowIndex($(selectedCells[0])) + "","" + fnassetgrid.GetColIndex($(selectedCells[0])));&#xD;&#xA;                            $(""#hidEndCell"").val(fnassetgrid.GetRowIndex($(selectedCells[selectedCells.length - 1])) + "","" + fnassetgrid.GetColIndex($(selectedCells[selectedCells.length - 1])));&#xD;&#xA;                            $(""#hidCopiedText"").val($(""#hidSelected"").val());&#xD;&#xA;                        }&#xD;&#xA;                        else {&#xD;&#xA;                            $(""#hidStartCell"").val('');&#xD;&#xA;                            $(""#hidEndCell"").val('');&#xD;&#xA;                        }&#xD;&#xA;&#xD;&#xA;                        if (ctrl && key == 88) /* CUT */{&#xD;&#xA;                            assetGrid.find(""td.sel"").each(function () {&#xD;&#xA;                                row = $(this).closest('tr.jqgrow');&#xD;&#xA;                                rowId = row.attr('id');&#xD;&#xA;                                assetGrid.setCell(rowId, (fnassetgrid.GridColumns())[fnassetgrid.GetColIndex($(this))].name, '', '', '', true);&#xD;&#xA;                            });&#xD;&#xA;                            fnassetgrid.ClearSelection();&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                    else if (ctrl && key == 86) /* PASTE */{&#xD;&#xA;                        var clipboardata = getClipboardData();&#xD;&#xA;                        if (get_objtype(clipboardata) != ""[object String]"") {&#xD;&#xA;                            alert(""The data you are pasting either is empty or incompatible"");&#xD;&#xA;                            return false;&#xD;&#xA;                        }&#xD;&#xA;&#xD;&#xA;                        pasteinfo(assetGrid, clipboardata);&#xD;&#xA;                    }&#xD;&#xA;                    else if ((ctrl && key == 90) /* UNDO */) {&#xD;&#xA;                    // TBD : No jqgrid features available to get the help &#xD;&#xA;                    }&#xD;&#xA;                    return false; // prevent bubbling&#xD;&#xA;                }&#xD;&#xA;                else&#xD;&#xA;                    return true; // let it bubble&#xD;&#xA;            });&#xD;&#xA;        });&#xD;&#xA;&#xD;&#xA;        &#xD;&#xA;        /********************************************************************/&#xD;&#xA;        /*********** Method to retrieve and submit altered asset information ***********/&#xD;&#xA;        /********************************************************************/&#xD;&#xA;        function getChanges() {&#xD;&#xA;            var editedxml = ""<?xml version='1.0' encoding='utf-8' ?\\>\\n"";&#xD;&#xA;            editedxml += ""<ASSETS>\\n"";&#xD;&#xA;            assetGrid.find(""tr.altered"").each(function () {&#xD;&#xA;                editedxml += ""<ASSET>\\n"";&#xD;&#xA;                $(this).children(""td"").each(function () {&#xD;&#xA;                    colindex = fnassetgrid.GetColIndex($(this));                    &#xD;&#xA;                    if (colindex > 0) {&#xD;&#xA;                        editedxml += ""<"" + (fnassetgrid.GridColumns())[colindex].name.toUpperCase() + "">"" + $(this).text().trim() + ""</"" + (fnassetgrid.GridColumns())[colindex].name.toUpperCase() + "">\\n"";&#xD;&#xA;                    }&#xD;&#xA;                })&#xD;&#xA;                editedxml += ""</ASSET>\\n"";&#xD;&#xA;            })&#xD;&#xA;            editedxml += ""</ASSETS>"";&#xD;&#xA;&#xD;&#xA;            fnassetgrid.ClearMarkedChanges();&#xD;&#xA;            &#xD;&#xA;            //TBD: submit XML to an AJAX service&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        var _browserPasteData = null;&#xD;&#xA;        function getClipboardData() {&#xD;&#xA;            if (_browserPasteData) // Safari/Chrome logic&#xD;&#xA;                return _browserPasteData;&#xD;&#xA;            if (window.clipboardData) // IE logic&#xD;&#xA;            {&#xD;&#xA;                return window.clipboardData.getData(""Text"");&#xD;&#xA;            }&#xD;&#xA;            else if (typeof (netscape) != ""undefined"") // Firefox logic&#xD;&#xA;            {&#xD;&#xA;                netscape.security.PrivilegeManager.enablePrivilege('UniversalXPConnect');&#xD;&#xA;                var clip = Components.classes[""@mozilla.org/widget/clipboard;1""].createInstance(Components.interfaces.nsIClipboard);&#xD;&#xA;                var trans = Components.classes[""@mozilla.org/widget/transferable;1""].createInstance(Components.interfaces.nsITransferable);&#xD;&#xA;                trans.addDataFlavor(""text/unicode"");&#xD;&#xA;                clip.getData(trans, clip.kGlobalClipboard);&#xD;&#xA;                var str = new Object();&#xD;&#xA;                var len = new Object();&#xD;&#xA;                trans.getTransferData(""text/unicode"", str, len);&#xD;&#xA;                if (str)&#xD;&#xA;                    return str.value.QueryInterface(Components.interfaces.nsISupportsString).toString();&#xD;&#xA;            }&#xD;&#xA;            return null;&#xD;&#xA;        }&#xD;&#xA;        // In Safari/Chrome the clipboard data can only be accessed&#xD;&#xA;        // from the onpaste event. In this sample the event is handled &#xD;&#xA;        // off the body element: <body onpaste=""browserPaste(event)"">&#xD;&#xA;        function browserPaste(e) {&#xD;&#xA;            _browserPasteData = e.clipboardData && e.clipboardData.getData ?&#xD;&#xA;                e.clipboardData.getData('text/plain') : null;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        function pasteinfo(objGrid, info) {&#xD;&#xA;            selectedCells = fnassetgrid.GetSelCells();&#xD;&#xA;            firstcell = $(selectedCells[0]);&#xD;&#xA;            firstselectedcolindex = fnassetgrid.GetColIndex(firstcell);&#xD;&#xA;            rowcellscount = fnassetgrid.GetRowCells(firstcell).length;&#xD;&#xA;&#xD;&#xA;            if (firstselectedcolindex == 0) {&#xD;&#xA;                alert(""You cannot paste into an non-editable column"");&#xD;&#xA;                return false;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            if (selectedCells && selectedCells.length > 0) {&#xD;&#xA;                // if the clipboard info is from the asset grid&#xD;&#xA;                if (info && info == $(""#hidCopiedText"").val()) {&#xD;&#xA;                    // get the index values of last copied source cell&#xD;&#xA;                    hidStartCell = -1;&#xD;&#xA;                    if ($(""#hidStartCell"").val() != '' && $(""#hidStartCell"").val().split(',').length > 1) {&#xD;&#xA;                        hidStartCell = $(""#hidStartCell"").val().split(',')[1];&#xD;&#xA;                    }&#xD;&#xA;&#xD;&#xA;                    // if columns of source and dest do not match, throw warning&#xD;&#xA;                    if (firstselectedcolindex != hidStartCell) {&#xD;&#xA;                        if (!confirm(""The data you are pasting comes from a different set of \\ncolumns than those that you are pasting into.\\n\\nAre you sure you want to paste into these columns?""))&#xD;&#xA;                            return false;&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;&#xD;&#xA;                $(""#hidModStartCell"").val(fnassetgrid.GetRowIndex(firstcell) + "","" + firstselectedcolindex);&#xD;&#xA;&#xD;&#xA;                var prevcell = null;&#xD;&#xA;                // remove the last ""line break"" and break clipboard info into lines&#xD;&#xA;                datarows = unescape(info).replace(/\\r\\n$/, '').split(""\\r\\n"");&#xD;&#xA;                if (datarows && datarows.length > 0) {&#xD;&#xA;                    currentrow = firstcell.parent();&#xD;&#xA;                    currentcell = firstcell;&#xD;&#xA;&#xD;&#xA;                    // if the source is a single cell, allow it to be pasted over multiple cells&#xD;&#xA;                    if (datarows.length == 1 && datarows[0].split(""\\t"").length == 1) {&#xD;&#xA;                        copydata = datarows[0].split(""\\t"");&#xD;&#xA;&#xD;&#xA;                        $.each(selectedCells, function (index, value) {&#xD;&#xA;                            prevcell = $(value);&#xD;&#xA;                            if (!prevcell.parent().hasClass(""altered"")) {&#xD;&#xA;                                prevcell.parent().addClass(""altered"");&#xD;&#xA;                                there_are_unsaved_changes = 1;&#xD;&#xA;                            }&#xD;&#xA;                            var rowId = prevcell.closest('tr.jqgrow').attr('id');&#xD;&#xA;                            var icol = fnassetgrid.GetColIndex(prevcell);&#xD;&#xA;                            assetGrid.setCell(rowId, (fnassetgrid.GridColumns())[icol].name, copydata[0], '', '', true);&#xD;&#xA;                        });&#xD;&#xA;                    }&#xD;&#xA;                    else {&#xD;&#xA;                        for (i = 0; i < datarows.length && currentrow.length > 0; ++i) {&#xD;&#xA;                            if (datarows[i] == '') break;&#xD;&#xA;                            // break each lines into columns&#xD;&#xA;                            datarows[i] = datarows[i].split(""\\t"");&#xD;&#xA;                            var row = null;&#xD;&#xA;                            var rowId = null;&#xD;&#xA;                            var rowindex = null;&#xD;&#xA;                            for (j = 0; j < datarows[i].length && currentcell.length > 0; ++j) {&#xD;&#xA;                                // mark the row as altered&#xD;&#xA;                                if (!currentcell.parent().hasClass(""altered"")) {&#xD;&#xA;                                    currentcell.parent().addClass(""altered"");&#xD;&#xA;                                    there_are_unsaved_changes = 1;&#xD;&#xA;                                }&#xD;&#xA;                                // for each outer iteration get the rowid&#xD;&#xA;                                if (row == null) {&#xD;&#xA;                                    row = (currentcell).closest('tr.jqgrow');&#xD;&#xA;                                    rowId = row.attr('id');&#xD;&#xA;                                }&#xD;&#xA;                                var icol = fnassetgrid.GetColIndex(currentcell);&#xD;&#xA;                                assetGrid.setCell(rowId, (fnassetgrid.GridColumns())[icol].name, datarows[i][j], '', '', true);&#xD;&#xA;                                prevcell = currentcell;&#xD;&#xA;&#xD;&#xA;                                // advance to the next visible cell -- only consider pasting into visible columns&#xD;&#xA;                                do {&#xD;&#xA;                                    currentcell = currentcell.next();&#xD;&#xA;                                }&#xD;&#xA;                                while ((currentcell.length > 0) && currentcell.is("":hidden""))&#xD;&#xA;                            }&#xD;&#xA;&#xD;&#xA;                            currentrow = currentrow.next();&#xD;&#xA;                            currentcell = $(currentrow.children(""td"")[firstselectedcolindex]);&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            if (prevcell.length > 0)&#xD;&#xA;                $(""#hidModEndCell"").val(fnassetgrid.GetRowIndex(prevcell) + "","" + fnassetgrid.GetColIndex(prevcell));&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;    </script>&#xD;&#xA;&#xD;&#xA;Many Thanks in advance!&#xD;&#xA;&#xD;&#xA;Edited on 9/13:&#xD;&#xA;This is my first use of JQGrid. I'm using ver 4.1.2. I spent few weeks to put together the excel like grid and the biggest challenge was to find the right information on how to use JQGrid. My current setup has lots of ajax updates and image galleries and use of jqgrid formatter but what I've put here is the main code to be able to use JQgrid with server side paging, excel like copy-paste and demonstration of few other features on jqgrid. This is just my way of giving back for all the help that I got from this community. &#xD;&#xA;&#xD;&#xA;For people who just jumped to JQGrid, you will soon find out that there is some challenge to using Textarea in jqgrid. you can find some solutions [here](http://www.trirand.com/blog/?page_id=393/bugs/celledit-textarea-newline-enter-will-close-cell/&value=5216&type=8&include=0&search=1&ret=all).";;deleted 97 characters in body
18888405;7016109;863791;5;120f22cc-eca8-4801-85fe-ca9a28470218;2011-12-08 00:44:53.0;"Just to give little update before putting my question....&#xD;&#xA;&#xD;&#xA;I've been able to come up with some additional features on the jqgrid that I'm using (after going through many forums) including: copy-paste back and forth from Excel to jqgrid, edit cell on keypress and dblclick, copy and paste multiple cells from one block to another on the same grid using mouse selection (from here http://stackoverflow.com/questions/1821074/using-javascript-to-sum-selected-cells-in-ie6)&#xD;&#xA;&#xD;&#xA;Most of the copy paste features works on IE only as of now. I save all the changes together on ""Save"" button click so all the updates on the cells are on screen only until user hits the ""Save"" button.&#xD;&#xA;&#xD;&#xA;Although, things are still in flux right now, I'd like to have the implementation design on paper now than later. I'm looking for an easy way to UNDO only the LAST change. I've been thinking of using jQuery's ""data()"" and ""removeData()"" methods to implement this but if there is anything already existing in jqgrid framework that would help, I would like to know. Any suggestions??&#xD;&#xA;&#xD;&#xA;    <style type=""text/css"">&#xD;&#xA;        .sel {background-color: #96B9DC !important; }&#xD;&#xA;        .altered {}&#xD;&#xA;    </style>&#xD;&#xA;    <script type=""text/javascript"">&#xD;&#xA;        var enableOnSelectEvent = false; // handle text selection&#xD;&#xA;    </script>&#xD;&#xA;    <div style=""width:100%; background-color:#FFF; border:1px solid #000;""><input id=""btnsavechanges"" value=""Save Changes"" style=""width:120px;"" class=""formbutton ui-corner-all"" type=""button"" onclick=""getChanges(); return false;"" /></div>&#xD;&#xA;    <table id=""grd_asset"" width=""100%"" onSelectStart=""return enableOnSelectEvent;""></table>&#xD;&#xA;    <div id=""pfrmac"" style='width:100%;'></div>&#xD;&#xA;    <input type=""hidden"" id=""hidSelected"" value="""" />&#xD;&#xA;&#xD;&#xA;    <!-- copy content from the grid cells -->&#xD;&#xA;    <input type=""hidden"" id=""hidCopiedText"" value="""" />&#xD;&#xA;&#xD;&#xA;    <!-- Start and End of cell selection -->&#xD;&#xA;    <input type=""hidden"" id=""hidStartCell"" value="""" />&#xD;&#xA;    <input type=""hidden"" id=""hidEndCell"" value="""" />&#xD;&#xA;&#xD;&#xA;    <!-- Start and End of last modified cell(s) -->&#xD;&#xA;    <input type=""hidden"" id=""hidModStartCell"" value="""" />&#xD;&#xA;    <input type=""hidden"" id=""hidModEndCell"" value="""" />&#xD;&#xA;&#xD;&#xA;    <script type=""text/javascript"">&#xD;&#xA;        /*************************************************/&#xD;&#xA;        /**************** Grid Utilities  ****************/&#xD;&#xA;        /*************************************************/&#xD;&#xA;        FnGrid = function () {&#xD;&#xA;            this.GridColumns = function () {&#xD;&#xA;                return assetGrid.jqGrid('getGridParam', 'colModel');&#xD;&#xA;            }&#xD;&#xA;            this.GetSelCells = function () {&#xD;&#xA;                return assetGrid.find(""td.sel"");&#xD;&#xA;            }&#xD;&#xA;            this.ClearSelection = function () {&#xD;&#xA;                assetGrid.find(""td"").removeClass(""sel"");&#xD;&#xA;            }&#xD;&#xA;            this.ClearSavedHistory = function () {&#xD;&#xA;                assetGrid.removeData();&#xD;&#xA;            }&#xD;&#xA;            this.ClearMarkedChanges = function () {&#xD;&#xA;                assetGrid.find(""tr"").removeClass(""altered"");&#xD;&#xA;            }&#xD;&#xA;            this.GetRowCells = function (cell) {&#xD;&#xA;                return cell.parent().children(""td"")&#xD;&#xA;            }&#xD;&#xA;            this.GetRowId = function (cell) {&#xD;&#xA;                var row = cell.closest('tr.jqgrow');&#xD;&#xA;                return row.attr('id');&#xD;&#xA;            }&#xD;&#xA;            this.GetRowIndex = function (cell) {&#xD;&#xA;                var cellrow = cell.parent();&#xD;&#xA;                return cellrow.parent().children(""tr"").index(cellrow);&#xD;&#xA;            }&#xD;&#xA;            this.GetColIndex = function (cell) {&#xD;&#xA;                return cell.parent().children(""td"").index(cell);&#xD;&#xA;            }&#xD;&#xA;            this.IsInEditMode = function () {&#xD;&#xA;                var savedRows = assetGrid.getGridParam('savedRow');&#xD;&#xA;                return (savedRows && savedRows.length > 0);&#xD;&#xA;            }&#xD;&#xA;            this.PutCellInEdit = function (cell, irow, icol, edit) {&#xD;&#xA;                assetGrid.editCell(irow, icol, edit);&#xD;&#xA;                // transfer focus to the input&#xD;&#xA;                var inp = $(cell).children(""input"")&#xD;&#xA;                if (inp && inp.length > 0) {&#xD;&#xA;                    $(inp[0]).val('');&#xD;&#xA;                    $(inp[0]).focus();&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;            this.HandleEditMode = function (cell, e) {&#xD;&#xA;                var ctrl = e.ctrlKey;&#xD;&#xA;                var alt = e.altKey;&#xD;&#xA;&#xD;&#xA;                var keyCode = (e.keyCode ? e.keyCode : e.which);&#xD;&#xA;                if (keyCode) {&#xD;&#xA;                    if (keyCode >= 32 && keyCode <= 126 && !ctrl && !alt) {&#xD;&#xA;                        // switch the cell to edit mode if not already&#xD;&#xA;                        if (!($(cell).hasClass(""edit-cell""))) {&#xD;&#xA;                            this.PutCellInEdit(cell, this.GetRowIndex($(cell)), this.GetColIndex($(cell)), true);                        }&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;                return true;&#xD;&#xA;            }&#xD;&#xA;            this.HandleInputNavigation = function (ele, evt) {&#xD;&#xA;                evt = window.event || evt;&#xD;&#xA;&#xD;&#xA;                switch (evt.keyCode) {&#xD;&#xA;                    // down arrow                   &#xD;&#xA;                    case 40:&#xD;&#xA;                        if (!$(ele).parent().hasClass(""altered""))&#xD;&#xA;                            $(ele).parent().addClass(""altered"");&#xD;&#xA;&#xD;&#xA;                        irow = this.GetRowIndex($(ele).parent());&#xD;&#xA;                        icol = this.GetColIndex($(ele).parent())&#xD;&#xA;                        var prevcell = irow + "","" + icol;&#xD;&#xA;                        $(""#hidModStartCell"").val(prevcell);&#xD;&#xA;                        $(""#hidModEndCell"").val(prevcell);&#xD;&#xA;&#xD;&#xA;                        downele = $(ele).parent()&#xD;&#xA;                                .parent()&#xD;&#xA;                                .next()&#xD;&#xA;                                .children(""td"")[this.GetColIndex($(ele).parent())];&#xD;&#xA;&#xD;&#xA;                        this.ClearSelection();&#xD;&#xA;                        assetGrid.editCell(this.GetRowIndex($(downele)), this.GetColIndex($(downele)), true);&#xD;&#xA;                        break;&#xD;&#xA;&#xD;&#xA;                    // up arrow                   &#xD;&#xA;                    case 38:&#xD;&#xA;                        if (!$(ele).parent().hasClass(""altered""))&#xD;&#xA;                            $(ele).parent().addClass(""altered"");&#xD;&#xA;&#xD;&#xA;                        irow = this.GetRowIndex($(ele).parent());&#xD;&#xA;                        icol = this.GetColIndex($(ele).parent())&#xD;&#xA;                        var prevcell = irow + "","" + icol;&#xD;&#xA;                        $(""#hidModStartCell"").val(prevcell);&#xD;&#xA;                        $(""#hidModEndCell"").val(prevcell);&#xD;&#xA;&#xD;&#xA;                        topele = $(ele).parent()&#xD;&#xA;                                .parent()&#xD;&#xA;                                .prev()&#xD;&#xA;                                .children(""td"")[this.GetColIndex($(ele).parent())];&#xD;&#xA;&#xD;&#xA;                        if (this.GetRowIndex($(topele)) <= 0) break;&#xD;&#xA;&#xD;&#xA;                        this.ClearSelection();&#xD;&#xA;                        assetGrid.editCell(this.GetRowIndex($(topele)), this.GetColIndex($(topele)), true);&#xD;&#xA;                        break;&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        var autocomp = new AutoCompleteRequest();&#xD;&#xA;        var lastSel = """";&#xD;&#xA;        var assetGrid = $('#grd_asset');&#xD;&#xA;        var start = null;&#xD;&#xA;        var fnassetgrid = new FnGrid();&#xD;&#xA;        var lastSel = -1;&#xD;&#xA;&#xD;&#xA;        function selectTo(cell) {&#xD;&#xA;            if (start == null)&#xD;&#xA;                return;&#xD;&#xA;            fnassetgrid.ClearSelection();&#xD;&#xA;            var stop = $(cell);&#xD;&#xA;            var tbl = start.closest(""table"");&#xD;&#xA;            var rs = tbl.children(""tbody"").children(""tr"");&#xD;&#xA;            var r0 = rs.index(start.parent()), c0 = fnassetgrid.GetColIndex(start);&#xD;&#xA;            var r1 = rs.index(stop.parent()), c1 = fnassetgrid.GetColIndex(stop);&#xD;&#xA;            var concat = """";&#xD;&#xA;            for (var i = r0; i <= r1; i++) {&#xD;&#xA;                var cells = $(rs.get(i)).children(""td"");&#xD;&#xA;                var rowid = 0;&#xD;&#xA;                for (var j = c0; j <= c1; j++) {&#xD;&#xA;                    var cell = $(cells.get(j));&#xD;&#xA;                    if (rowid == 0) rowid = fnassetgrid.GetRowId(cell);&#xD;&#xA;                    if (cell.is("":hidden"")) continue;&#xD;&#xA;                    cell.addClass(""sel"");&#xD;&#xA;                    concat += assetGrid.getCell(rowid, j) + ""\\t"";&#xD;&#xA;                }&#xD;&#xA;                if (concat.lastIndexOf(""\\t"") == concat.length - 1)&#xD;&#xA;                    concat = concat.substring(0, concat.lastIndexOf(""\\t""));&#xD;&#xA;&#xD;&#xA;                concat += escape(""\\r\\n"");&#xD;&#xA;            }&#xD;&#xA;            $(""#hidSelected"").val(concat.trim());&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        $(document).ready(function () {&#xD;&#xA;            /*************************************************/&#xD;&#xA;            /******************* THE GRID  *******************/&#xD;&#xA;            /*************************************************/&#xD;&#xA;            assetGrid.jqGrid({&#xD;&#xA;                ajaxGridOptions: { contentType: ""application/json; charset=utf-8"", type: ""POST"" },&#xD;&#xA;                url: '../api/yourservices.asmx/GetData',&#xD;&#xA;                datatype: 'json',&#xD;&#xA;                serializeGridData: function (postData) {&#xD;&#xA;                    if (postData.searchField === undefined) postData.searchField = null;&#xD;&#xA;                    if (postData.searchString === undefined) postData.searchString = null;&#xD;&#xA;                    if (postData.searchOper === undefined) postData.searchOper = null;&#xD;&#xA;                    if (postData.filters === undefined) postData.filters = null;&#xD;&#xA;                    return JSON.stringify(postData);&#xD;&#xA;                },&#xD;&#xA;                colNames: [' ', 'AssetId', 'Item#', 'Make', 'Description'],&#xD;&#xA;                colModel: [&#xD;&#xA;                    { name: 'ctrls', width: 80, fixed: true, sortable: false, resize: false, formatter: 'actions',&#xD;&#xA;                        formatoptions: { keys: true }&#xD;&#xA;                    },&#xD;&#xA;   		            { name: 'AssetID', label: 'AssetID', width: 65, key: true, hidden: true },&#xD;&#xA;   		            { name: 'Sequence', label: 'Item#', width: 50, align: ""right"", sorttype: 'int', sortable: true, editoptions: { dataEvents: [{ type: 'keydown', fn: function (e) { fnassetgrid.HandleInputNavigation(this, e); } }]} },&#xD;&#xA;   		            { name: 'Make', label: 'Make', width: 105, editable: true, edittype: 'text', editoptions: {&#xD;&#xA;   		                size: 18,&#xD;&#xA;   		                dataEvents: [{&#xD;&#xA;   		                    type: 'focus',&#xD;&#xA;   		                    fn: function (e) {&#xD;&#xA;   		                        $(this).autocomplete({&#xD;&#xA;   		                            source: autocomp.source,&#xD;&#xA;   		                            delay: autocomp.delay,&#xD;&#xA;   		                            minLength: autocomp.minLength&#xD;&#xA;   		                        });&#xD;&#xA;&#xD;&#xA;   		                        $(this).bind(""autocompleteopen"", autocomp.open);&#xD;&#xA;   		                        $(this).bind(""autocompleteclose"", autocomp.close);&#xD;&#xA;   		                    }&#xD;&#xA;   		                }]&#xD;&#xA;   		            }&#xD;&#xA;   		            },&#xD;&#xA;                    { name: 'Description', label: 'Description', fixed: false, editable: true, edittype: 'textarea', unformat: unfrmttextarea, editoptions: { rows: ""10"", cols: ""40""} }&#xD;&#xA;   	            ],&#xD;&#xA;                rowNum: 10, /* no of recs in a grid */&#xD;&#xA;                width: 1330,&#xD;&#xA;                rowList: [10, 20, 30], /* array to construct a select box element in the pager */&#xD;&#xA;                pager: '#pfrmac',&#xD;&#xA;                sortname: 'AssetID', /* initial sorting column */&#xD;&#xA;                viewrecords: true,  /* display the number of total records on the pager bar */&#xD;&#xA;                pginput: true,&#xD;&#xA;                sortorder: ""desc"",&#xD;&#xA;                cellEdit: true,&#xD;&#xA;                shrinkToFit: true,&#xD;&#xA;                jsonReader: {&#xD;&#xA;                    root: function (obj) { return obj.d.SearchResultSet; },&#xD;&#xA;                    page: function (obj) { return obj.d.PageNum; }, // current page of the query&#xD;&#xA;                    total: function (obj) { return obj.d.TotalPages; }, // total pages for the query&#xD;&#xA;                    records: function (obj) { return obj.d.TotalNoOfSearchResultItems; },&#xD;&#xA;                    id: ""AssetID"",&#xD;&#xA;                    repeatitems: false,&#xD;&#xA;                    userdata: function (obj) {&#xD;&#xA;                        extendUserSession();&#xD;&#xA;                        return { ""Error"": obj.d.Error, ""SearchResultSet"": obj.d.SearchResultSet }&#xD;&#xA;                    }&#xD;&#xA;                },&#xD;&#xA;                loadonce: false,&#xD;&#xA;                caption: ""Asset list"",&#xD;&#xA;                height: '100%',&#xD;&#xA;                cellsubmit: 'clientArray',&#xD;&#xA;                beforeEditCell: function (rowid, cellname, value, iRow, iCol) {&#xD;&#xA;                    enableOnSelectEvent = true;&#xD;&#xA;                },&#xD;&#xA;                beforeSaveCell: function (rowid, cellname, value, iRow, iCol) {&#xD;&#xA;                    savedrow = assetGrid.getGridParam('savedRow');&#xD;&#xA;                    if (savedrow && savedrow.length > 0) {&#xD;&#xA;                        if (savedrow[0].id == iRow && savedrow[0].ic == iCol && savedrow[0].v != value) {&#xD;&#xA;                            tr = $('#' + rowid);&#xD;&#xA;                            if (tr && !tr.hasClass(""altered"")) {&#xD;&#xA;                                tr.addClass(""altered"");&#xD;&#xA;                                there_are_unsaved_changes = 1;&#xD;&#xA;                            }&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                },&#xD;&#xA;                afterSaveCell: function (rowid, cellname, value, iRow, iCol) {&#xD;&#xA;                    enableOnSelectEvent = false;&#xD;&#xA;                },&#xD;&#xA;                afterRestoreCell: function (rowid, value, iRow, iCol) {&#xD;&#xA;                    enableOnSelectEvent = false;&#xD;&#xA;                },&#xD;&#xA;                loadComplete: function (data) {&#xD;&#xA;                    if (assetGrid.getGridParam('userData').Error && assetGrid.getGridParam('userData').Error != '')&#xD;&#xA;                        alert(""Error: "" + assetGrid.getGridParam('userData').Error);&#xD;&#xA;                },&#xD;&#xA;                gridComplete: function () {&#xD;&#xA;                    rowindex = 1;&#xD;&#xA;                    rows = assetGrid.find(""tr"");&#xD;&#xA;&#xD;&#xA;                    if (rows && rows.length > 1) {&#xD;&#xA;                        for (i = 1; i < rows.length; i++) {&#xD;&#xA;                            $(rows[i]).find(""td"").each(function (evt) {&#xD;&#xA;                                evt = window.event || evt;&#xD;&#xA;&#xD;&#xA;                                start = $(this);&#xD;&#xA;                                colindex = fnassetgrid.GetColIndex(start);&#xD;&#xA;                                if (colindex > 0) {&#xD;&#xA;                                    $(this).click(function () {&#xD;&#xA;                                        if (!($(this).hasClass(""edit-cell"")))&#xD;&#xA;                                            return false;&#xD;&#xA;                                    }).dblclick(function () {&#xD;&#xA;                                        if (!($(this).hasClass(""edit-cell""))) {&#xD;&#xA;                                            fnassetgrid.PutCellInEdit(this, fnassetgrid.GetRowIndex($(this)), fnassetgrid.GetColIndex($(this)), true);&#xD;&#xA;                                            return;&#xD;&#xA;                                        }&#xD;&#xA;                                        else&#xD;&#xA;                                            return true;&#xD;&#xA;                                    }).mousedown(function () {&#xD;&#xA;                                        if (fnassetgrid.IsInEditMode())&#xD;&#xA;                                            return true;&#xD;&#xA;                                        start = $(this);&#xD;&#xA;                                        selectTo(this);&#xD;&#xA;                                        return false;&#xD;&#xA;                                    }).mouseover(function () {&#xD;&#xA;                                        if (fnassetgrid.IsInEditMode()) return true;&#xD;&#xA;                                        selectTo(this);&#xD;&#xA;                                    }).mouseup(function () {&#xD;&#xA;                                        if (fnassetgrid.IsInEditMode()) return true;&#xD;&#xA;                                        selectTo(this);&#xD;&#xA;                                        $(""#hidEndCell"").val(fnassetgrid.GetColIndex($(this)));&#xD;&#xA;                                        start = null;&#xD;&#xA;                                    }).keypress(function (e) {&#xD;&#xA;                                        fnassetgrid.HandleEditMode(this, e);&#xD;&#xA;                                    });&#xD;&#xA;                                }&#xD;&#xA;                            });&#xD;&#xA;                            rowindex++;&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;            });&#xD;&#xA;&#xD;&#xA;            function unfrmttextarea(cellvalue, options, cellobject) {&#xD;&#xA;                return cellvalue;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            $(""body"").mouseup(function () {&#xD;&#xA;                start = null;&#xD;&#xA;            });&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;            /*************************************************/&#xD;&#xA;            /*********** Global KEYUP integration  ***********/&#xD;&#xA;            /*************************************************/&#xD;&#xA;            $(assetGrid).keyup(function (e) {&#xD;&#xA;                var ctrl = e.ctrlKey&#xD;&#xA;                var key = e.charCode || e.keyCode || 0;&#xD;&#xA;&#xD;&#xA;                if ((ctrl && key == 88) /* CUT */ || (ctrl && key == 67) /* COPY */ || (ctrl && key == 86) /* PASTE */ || (ctrl && key == 90) /* UNDO */) {&#xD;&#xA;&#xD;&#xA;                    if ((ctrl && key == 88) /* CUT */ || (ctrl && key == 67) /* COPY */) {&#xD;&#xA;                        if (fnassetgrid.IsInEditMode()) return true;&#xD;&#xA;                        CopyToClipboard(""hidSelected"");&#xD;&#xA;&#xD;&#xA;                        var selectedCells = fnassetgrid.GetSelCells();&#xD;&#xA;&#xD;&#xA;                        if (selectedCells && selectedCells.length > 0) {&#xD;&#xA;                            $(""#hidStartCell"").val(fnassetgrid.GetRowIndex($(selectedCells[0])) + "","" + fnassetgrid.GetColIndex($(selectedCells[0])));&#xD;&#xA;                            $(""#hidEndCell"").val(fnassetgrid.GetRowIndex($(selectedCells[selectedCells.length - 1])) + "","" + fnassetgrid.GetColIndex($(selectedCells[selectedCells.length - 1])));&#xD;&#xA;                            $(""#hidCopiedText"").val($(""#hidSelected"").val());&#xD;&#xA;                        }&#xD;&#xA;                        else {&#xD;&#xA;                            $(""#hidStartCell"").val('');&#xD;&#xA;                            $(""#hidEndCell"").val('');&#xD;&#xA;                        }&#xD;&#xA;&#xD;&#xA;                        if (ctrl && key == 88) /* CUT */{&#xD;&#xA;                            assetGrid.find(""td.sel"").each(function () {&#xD;&#xA;                                row = $(this).closest('tr.jqgrow');&#xD;&#xA;                                rowId = row.attr('id');&#xD;&#xA;                                assetGrid.setCell(rowId, (fnassetgrid.GridColumns())[fnassetgrid.GetColIndex($(this))].name, '', '', '', true);&#xD;&#xA;                            });&#xD;&#xA;                            fnassetgrid.ClearSelection();&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                    else if (ctrl && key == 86) /* PASTE */{&#xD;&#xA;                        var clipboardata = getClipboardData();&#xD;&#xA;                        if (get_objtype(clipboardata) != ""[object String]"") {&#xD;&#xA;                            alert(""The data you are pasting either is empty or incompatible"");&#xD;&#xA;                            return false;&#xD;&#xA;                        }&#xD;&#xA;&#xD;&#xA;                        pasteinfo(assetGrid, clipboardata);&#xD;&#xA;                    }&#xD;&#xA;                    else if ((ctrl && key == 90) /* UNDO */) {&#xD;&#xA;                    // TBD : No jqgrid features available to get the help &#xD;&#xA;                    }&#xD;&#xA;                    return false; // prevent bubbling&#xD;&#xA;                }&#xD;&#xA;                else&#xD;&#xA;                    return true; // let it bubble&#xD;&#xA;            });&#xD;&#xA;        });&#xD;&#xA;&#xD;&#xA;        &#xD;&#xA;        /********************************************************************/&#xD;&#xA;        /*********** Method to retrieve and submit altered asset information ***********/&#xD;&#xA;        /********************************************************************/&#xD;&#xA;        function getChanges() {&#xD;&#xA;            var editedxml = ""<?xml version='1.0' encoding='utf-8' ?\\>\\n"";&#xD;&#xA;            editedxml += ""<ASSETS>\\n"";&#xD;&#xA;            assetGrid.find(""tr.altered"").each(function () {&#xD;&#xA;                editedxml += ""<ASSET>\\n"";&#xD;&#xA;                $(this).children(""td"").each(function () {&#xD;&#xA;                    colindex = fnassetgrid.GetColIndex($(this));                    &#xD;&#xA;                    if (colindex > 0) {&#xD;&#xA;                        editedxml += ""<"" + (fnassetgrid.GridColumns())[colindex].name.toUpperCase() + "">"" + $(this).text().trim() + ""</"" + (fnassetgrid.GridColumns())[colindex].name.toUpperCase() + "">\\n"";&#xD;&#xA;                    }&#xD;&#xA;                })&#xD;&#xA;                editedxml += ""</ASSET>\\n"";&#xD;&#xA;            })&#xD;&#xA;            editedxml += ""</ASSETS>"";&#xD;&#xA;&#xD;&#xA;            fnassetgrid.ClearMarkedChanges();&#xD;&#xA;            &#xD;&#xA;            //TBD: submit XML to an AJAX service&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        var _browserPasteData = null;&#xD;&#xA;        function getClipboardData() {&#xD;&#xA;            if (_browserPasteData) // Safari/Chrome logic&#xD;&#xA;                return _browserPasteData;&#xD;&#xA;            if (window.clipboardData) // IE logic&#xD;&#xA;            {&#xD;&#xA;                return window.clipboardData.getData(""Text"");&#xD;&#xA;            }&#xD;&#xA;            else if (typeof (netscape) != ""undefined"") // Firefox logic&#xD;&#xA;            {&#xD;&#xA;                netscape.security.PrivilegeManager.enablePrivilege('UniversalXPConnect');&#xD;&#xA;                var clip = Components.classes[""@mozilla.org/widget/clipboard;1""].createInstance(Components.interfaces.nsIClipboard);&#xD;&#xA;                var trans = Components.classes[""@mozilla.org/widget/transferable;1""].createInstance(Components.interfaces.nsITransferable);&#xD;&#xA;                trans.addDataFlavor(""text/unicode"");&#xD;&#xA;                clip.getData(trans, clip.kGlobalClipboard);&#xD;&#xA;                var str = new Object();&#xD;&#xA;                var len = new Object();&#xD;&#xA;                trans.getTransferData(""text/unicode"", str, len);&#xD;&#xA;                if (str)&#xD;&#xA;                    return str.value.QueryInterface(Components.interfaces.nsISupportsString).toString();&#xD;&#xA;            }&#xD;&#xA;            return null;&#xD;&#xA;        }&#xD;&#xA;        // In Safari/Chrome the clipboard data can only be accessed&#xD;&#xA;        // from the onpaste event. In this sample the event is handled &#xD;&#xA;        // off the body element: <body onpaste=""browserPaste(event)"">&#xD;&#xA;        function browserPaste(e) {&#xD;&#xA;            _browserPasteData = e.clipboardData && e.clipboardData.getData ?&#xD;&#xA;                e.clipboardData.getData('text/plain') : null;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        function pasteinfo(objGrid, info) {&#xD;&#xA;            selectedCells = fnassetgrid.GetSelCells();&#xD;&#xA;            firstcell = $(selectedCells[0]);&#xD;&#xA;            firstselectedcolindex = fnassetgrid.GetColIndex(firstcell);&#xD;&#xA;            rowcellscount = fnassetgrid.GetRowCells(firstcell).length;&#xD;&#xA;&#xD;&#xA;            if (firstselectedcolindex == 0) {&#xD;&#xA;                alert(""You cannot paste into an non-editable column"");&#xD;&#xA;                return false;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            if (selectedCells && selectedCells.length > 0) {&#xD;&#xA;                // if the clipboard info is from the asset grid&#xD;&#xA;                if (info && info == $(""#hidCopiedText"").val()) {&#xD;&#xA;                    // get the index values of last copied source cell&#xD;&#xA;                    hidStartCell = -1;&#xD;&#xA;                    if ($(""#hidStartCell"").val() != '' && $(""#hidStartCell"").val().split(',').length > 1) {&#xD;&#xA;                        hidStartCell = $(""#hidStartCell"").val().split(',')[1];&#xD;&#xA;                    }&#xD;&#xA;&#xD;&#xA;                    // if columns of source and dest do not match, throw warning&#xD;&#xA;                    if (firstselectedcolindex != hidStartCell) {&#xD;&#xA;                        if (!confirm(""The data you are pasting comes from a different set of \\ncolumns than those that you are pasting into.\\n\\nAre you sure you want to paste into these columns?""))&#xD;&#xA;                            return false;&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;&#xD;&#xA;                $(""#hidModStartCell"").val(fnassetgrid.GetRowIndex(firstcell) + "","" + firstselectedcolindex);&#xD;&#xA;&#xD;&#xA;                var prevcell = null;&#xD;&#xA;                // remove the last ""line break"" and break clipboard info into lines&#xD;&#xA;                datarows = unescape(info).replace(/\\r\\n$/, '').split(""\\r\\n"");&#xD;&#xA;                if (datarows && datarows.length > 0) {&#xD;&#xA;                    currentrow = firstcell.parent();&#xD;&#xA;                    currentcell = firstcell;&#xD;&#xA;&#xD;&#xA;                    // if the source is a single cell, allow it to be pasted over multiple cells&#xD;&#xA;                    if (datarows.length == 1 && datarows[0].split(""\\t"").length == 1) {&#xD;&#xA;                        copydata = datarows[0].split(""\\t"");&#xD;&#xA;&#xD;&#xA;                        $.each(selectedCells, function (index, value) {&#xD;&#xA;                            prevcell = $(value);&#xD;&#xA;                            if (!prevcell.parent().hasClass(""altered"")) {&#xD;&#xA;                                prevcell.parent().addClass(""altered"");&#xD;&#xA;                                there_are_unsaved_changes = 1;&#xD;&#xA;                            }&#xD;&#xA;                            var rowId = prevcell.closest('tr.jqgrow').attr('id');&#xD;&#xA;                            var icol = fnassetgrid.GetColIndex(prevcell);&#xD;&#xA;                            assetGrid.setCell(rowId, (fnassetgrid.GridColumns())[icol].name, copydata[0], '', '', true);&#xD;&#xA;                        });&#xD;&#xA;                    }&#xD;&#xA;                    else {&#xD;&#xA;                        for (i = 0; i < datarows.length && currentrow.length > 0; ++i) {&#xD;&#xA;                            if (datarows[i] == '') break;&#xD;&#xA;                            // break each lines into columns&#xD;&#xA;                            datarows[i] = datarows[i].split(""\\t"");&#xD;&#xA;                            var row = null;&#xD;&#xA;                            var rowId = null;&#xD;&#xA;                            var rowindex = null;&#xD;&#xA;                            for (j = 0; j < datarows[i].length && currentcell.length > 0; ++j) {&#xD;&#xA;                                // mark the row as altered&#xD;&#xA;                                if (!currentcell.parent().hasClass(""altered"")) {&#xD;&#xA;                                    currentcell.parent().addClass(""altered"");&#xD;&#xA;                                    there_are_unsaved_changes = 1;&#xD;&#xA;                                }&#xD;&#xA;                                // for each outer iteration get the rowid&#xD;&#xA;                                if (row == null) {&#xD;&#xA;                                    row = (currentcell).closest('tr.jqgrow');&#xD;&#xA;                                    rowId = row.attr('id');&#xD;&#xA;                                }&#xD;&#xA;                                var icol = fnassetgrid.GetColIndex(currentcell);&#xD;&#xA;                                assetGrid.setCell(rowId, (fnassetgrid.GridColumns())[icol].name, datarows[i][j], '', '', true);&#xD;&#xA;                                prevcell = currentcell;&#xD;&#xA;&#xD;&#xA;                                // advance to the next visible cell -- only consider pasting into visible columns&#xD;&#xA;                                do {&#xD;&#xA;                                    currentcell = currentcell.next();&#xD;&#xA;                                }&#xD;&#xA;                                while ((currentcell.length > 0) && currentcell.is("":hidden""))&#xD;&#xA;                            }&#xD;&#xA;&#xD;&#xA;                            currentrow = currentrow.next();&#xD;&#xA;                            currentcell = $(currentrow.children(""td"")[firstselectedcolindex]);&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            if (prevcell.length > 0)&#xD;&#xA;                $(""#hidModEndCell"").val(fnassetgrid.GetRowIndex(prevcell) + "","" + fnassetgrid.GetColIndex(prevcell));&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;    </script>&#xD;&#xA;&#xD;&#xA;Many Thanks in advance!&#xD;&#xA;&#xD;&#xA;Edited on 9/13:&#xD;&#xA;This is my first use of JQGrid. I'm using ver 4.1.2. I spent few weeks to put together the excel like grid and the biggest challenge was to find the right information on how to use JQGrid. My current setup has lots of ajax updates and image galleries and use of jqgrid formatter but what I've put here is the main code to be able to use JQgrid with server side paging, excel like copy-paste and demonstration of few other features on jqgrid. This is just my way of giving back for all the help that I got from this community. &#xD;&#xA;&#xD;&#xA;For people who just jumped to JQGrid, you will soon find out that there is some challenge to using Textarea in jqgrid. you can find some solutions [here](http://www.trirand.com/blog/?page_id=393/bugs/celledit-textarea-newline-enter-will-close-cell/&value=5216&type=8&include=0&search=1&ret=all).";;added 987 characters in body
24408861;7016109;863791;5;c1549155-dbde-4de5-8bfd-4950a6a01903;2012-05-14 22:58:45.0;"Just to give little update before putting my question....&#xD;&#xA;&#xD;&#xA;I've been able to come up with some additional features on the jqgrid that I'm using (after going through many forums) including: copy-paste back and forth from Excel to jqgrid, edit cell on keypress and dblclick, copy and paste multiple cells from one block to another on the same grid using mouse selection (from here http://stackoverflow.com/questions/1821074/using-javascript-to-sum-selected-cells-in-ie6)&#xD;&#xA;&#xD;&#xA;Most of the copy paste features works on IE only as of now. I save all the changes together on ""Save"" button click so all the updates on the cells are on screen only until user hits the ""Save"" button.&#xD;&#xA;&#xD;&#xA;Although, things are still in flux right now, I'd like to have the implementation design on paper now than later. I'm looking for an easy way to UNDO only the LAST change. I've been thinking of using jQuery's ""data()"" and ""removeData()"" methods to implement this but if there is anything already existing in jqgrid framework that would help, I would like to know. Any suggestions??&#xD;&#xA;&#xD;&#xA;    <style type=""text/css"">&#xD;&#xA;        .sel {background-color: #96B9DC !important; }&#xD;&#xA;        .altered {}&#xD;&#xA;    </style>&#xD;&#xA;    <script type=""text/javascript"">&#xD;&#xA;        var enableOnSelectEvent = false; // handle text selection&#xD;&#xA;    </script>&#xD;&#xA;    <div style=""width:100%; background-color:#FFF; border:1px solid #000;""><input id=""btnsavechanges"" value=""Save Changes"" style=""width:120px;"" class=""formbutton ui-corner-all"" type=""button"" onclick=""getChanges(); return false;"" /></div>&#xD;&#xA;    <table id=""grd_asset"" width=""100%"" onSelectStart=""return enableOnSelectEvent;""></table>&#xD;&#xA;    <div id=""pfrmac"" style='width:100%;'></div>&#xD;&#xA;    <input type=""hidden"" id=""hidSelected"" value="""" />&#xD;&#xA;&#xD;&#xA;    <!-- copy content from the grid cells -->&#xD;&#xA;    <input type=""hidden"" id=""hidCopiedText"" value="""" />&#xD;&#xA;&#xD;&#xA;    <!-- Start and End of cell selection -->&#xD;&#xA;    <input type=""hidden"" id=""hidStartCell"" value="""" />&#xD;&#xA;    <input type=""hidden"" id=""hidEndCell"" value="""" />&#xD;&#xA;&#xD;&#xA;    <!-- Start and End of last modified cell(s) -->&#xD;&#xA;    <input type=""hidden"" id=""hidModStartCell"" value="""" />&#xD;&#xA;    <input type=""hidden"" id=""hidModEndCell"" value="""" />&#xD;&#xA;&#xD;&#xA;    <script type=""text/javascript"">&#xD;&#xA;        /*************************************************/&#xD;&#xA;        /**************** Grid Utilities  ****************/&#xD;&#xA;        /*************************************************/&#xD;&#xA;        FnGrid = function () {&#xD;&#xA;            this.GridColumns = function () {&#xD;&#xA;                return assetGrid.jqGrid('getGridParam', 'colModel');&#xD;&#xA;            }&#xD;&#xA;            this.GetSelCells = function () {&#xD;&#xA;                return assetGrid.find(""td.sel"");&#xD;&#xA;            }&#xD;&#xA;            this.ClearSelection = function () {&#xD;&#xA;                assetGrid.find(""td"").removeClass(""sel"");&#xD;&#xA;            }&#xD;&#xA;            this.ClearSavedHistory = function () {&#xD;&#xA;                assetGrid.removeData();&#xD;&#xA;            }&#xD;&#xA;            this.ClearMarkedChanges = function () {&#xD;&#xA;                assetGrid.find(""tr"").removeClass(""altered"");&#xD;&#xA;            }&#xD;&#xA;            this.GetRowCells = function (cell) {&#xD;&#xA;                return cell.parent().children(""td"")&#xD;&#xA;            }&#xD;&#xA;            this.GetRowId = function (cell) {&#xD;&#xA;                var row = cell.closest('tr.jqgrow');&#xD;&#xA;                return row.attr('id');&#xD;&#xA;            }&#xD;&#xA;            this.GetRowIndex = function (cell) {&#xD;&#xA;                var cellrow = cell.parent();&#xD;&#xA;                return cellrow.parent().children(""tr"").index(cellrow);&#xD;&#xA;            }&#xD;&#xA;            this.GetColIndex = function (cell) {&#xD;&#xA;                return cell.parent().children(""td"").index(cell);&#xD;&#xA;            }&#xD;&#xA;            this.IsInEditMode = function () {&#xD;&#xA;                var savedRows = assetGrid.getGridParam('savedRow');&#xD;&#xA;                return (savedRows && savedRows.length > 0);&#xD;&#xA;            }&#xD;&#xA;            this.PutCellInEdit = function (cell, irow, icol, edit) {&#xD;&#xA;                assetGrid.editCell(irow, icol, edit);&#xD;&#xA;                // transfer focus to the input&#xD;&#xA;                var inp = $(cell).children(""input"")&#xD;&#xA;                if (inp && inp.length > 0) {&#xD;&#xA;                    $(inp[0]).val('');&#xD;&#xA;                    $(inp[0]).focus();&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;            this.HandleEditMode = function (cell, e) {&#xD;&#xA;                var ctrl = e.ctrlKey;&#xD;&#xA;                var alt = e.altKey;&#xD;&#xA;&#xD;&#xA;                var keyCode = (e.keyCode ? e.keyCode : e.which);&#xD;&#xA;                if (keyCode) {&#xD;&#xA;                    if (keyCode >= 32 && keyCode <= 126 && !ctrl && !alt) {&#xD;&#xA;                        // switch the cell to edit mode if not already&#xD;&#xA;                        if (!($(cell).hasClass(""edit-cell""))) {&#xD;&#xA;                            this.PutCellInEdit(cell, this.GetRowIndex($(cell)), this.GetColIndex($(cell)), true);                        }&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;                return true;&#xD;&#xA;            }&#xD;&#xA;            this.HandleInputNavigation = function (ele, evt) {&#xD;&#xA;                evt = window.event || evt;&#xD;&#xA;&#xD;&#xA;                switch (evt.keyCode) {&#xD;&#xA;                    // down arrow                   &#xD;&#xA;                    case 40:&#xD;&#xA;                        if (!$(ele).parent().hasClass(""altered""))&#xD;&#xA;                            $(ele).parent().addClass(""altered"");&#xD;&#xA;&#xD;&#xA;                        irow = this.GetRowIndex($(ele).parent());&#xD;&#xA;                        icol = this.GetColIndex($(ele).parent())&#xD;&#xA;                        var prevcell = irow + "","" + icol;&#xD;&#xA;                        $(""#hidModStartCell"").val(prevcell);&#xD;&#xA;                        $(""#hidModEndCell"").val(prevcell);&#xD;&#xA;&#xD;&#xA;                        downele = $(ele).parent()&#xD;&#xA;                                .parent()&#xD;&#xA;                                .next()&#xD;&#xA;                                .children(""td"")[this.GetColIndex($(ele).parent())];&#xD;&#xA;&#xD;&#xA;                        this.ClearSelection();&#xD;&#xA;                        assetGrid.editCell(this.GetRowIndex($(downele)), this.GetColIndex($(downele)), true);&#xD;&#xA;                        break;&#xD;&#xA;&#xD;&#xA;                    // up arrow                   &#xD;&#xA;                    case 38:&#xD;&#xA;                        if (!$(ele).parent().hasClass(""altered""))&#xD;&#xA;                            $(ele).parent().addClass(""altered"");&#xD;&#xA;&#xD;&#xA;                        irow = this.GetRowIndex($(ele).parent());&#xD;&#xA;                        icol = this.GetColIndex($(ele).parent())&#xD;&#xA;                        var prevcell = irow + "","" + icol;&#xD;&#xA;                        $(""#hidModStartCell"").val(prevcell);&#xD;&#xA;                        $(""#hidModEndCell"").val(prevcell);&#xD;&#xA;&#xD;&#xA;                        topele = $(ele).parent()&#xD;&#xA;                                .parent()&#xD;&#xA;                                .prev()&#xD;&#xA;                                .children(""td"")[this.GetColIndex($(ele).parent())];&#xD;&#xA;&#xD;&#xA;                        if (this.GetRowIndex($(topele)) <= 0) break;&#xD;&#xA;&#xD;&#xA;                        this.ClearSelection();&#xD;&#xA;                        assetGrid.editCell(this.GetRowIndex($(topele)), this.GetColIndex($(topele)), true);&#xD;&#xA;                        break;&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        var autocomp = new AutoCompleteRequest();&#xD;&#xA;        var lastSel = """";&#xD;&#xA;        var assetGrid = $('#grd_asset');&#xD;&#xA;        var start = null;&#xD;&#xA;        var fnassetgrid = new FnGrid();&#xD;&#xA;        var lastSel = -1;&#xD;&#xA;&#xD;&#xA;        function selectTo(cell) {&#xD;&#xA;            if (start == null)&#xD;&#xA;                return;&#xD;&#xA;            fnassetgrid.ClearSelection();&#xD;&#xA;            var stop = $(cell);&#xD;&#xA;            var tbl = start.closest(""table"");&#xD;&#xA;            var rs = tbl.children(""tbody"").children(""tr"");&#xD;&#xA;            var r0 = rs.index(start.parent()), c0 = fnassetgrid.GetColIndex(start);&#xD;&#xA;            var r1 = rs.index(stop.parent()), c1 = fnassetgrid.GetColIndex(stop);&#xD;&#xA;            var concat = """";&#xD;&#xA;            for (var i = r0; i <= r1; i++) {&#xD;&#xA;                var cells = $(rs.get(i)).children(""td"");&#xD;&#xA;                var rowid = 0;&#xD;&#xA;                for (var j = c0; j <= c1; j++) {&#xD;&#xA;                    var cell = $(cells.get(j));&#xD;&#xA;                    if (rowid == 0) rowid = fnassetgrid.GetRowId(cell);&#xD;&#xA;                    if (cell.is("":hidden"")) continue;&#xD;&#xA;                    cell.addClass(""sel"");&#xD;&#xA;                    concat += assetGrid.getCell(rowid, j) + ""\\t"";&#xD;&#xA;                }&#xD;&#xA;                if (concat.lastIndexOf(""\\t"") == concat.length - 1)&#xD;&#xA;                    concat = concat.substring(0, concat.lastIndexOf(""\\t""));&#xD;&#xA;&#xD;&#xA;                concat += escape(""\\r\\n"");&#xD;&#xA;            }&#xD;&#xA;            $(""#hidSelected"").val(concat.trim());&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        $(document).ready(function () {&#xD;&#xA;            /*************************************************/&#xD;&#xA;            /******************* THE GRID  *******************/&#xD;&#xA;            /*************************************************/&#xD;&#xA;            assetGrid.jqGrid({&#xD;&#xA;                ajaxGridOptions: { contentType: ""application/json; charset=utf-8"", type: ""POST"" },&#xD;&#xA;                url: '../api/yourservices.asmx/GetData',&#xD;&#xA;                datatype: 'json',&#xD;&#xA;                serializeGridData: function (postData) {&#xD;&#xA;                    if (postData.searchField === undefined) postData.searchField = null;&#xD;&#xA;                    if (postData.searchString === undefined) postData.searchString = null;&#xD;&#xA;                    if (postData.searchOper === undefined) postData.searchOper = null;&#xD;&#xA;                    if (postData.filters === undefined) postData.filters = null;&#xD;&#xA;                    return JSON.stringify(postData);&#xD;&#xA;                },&#xD;&#xA;                colNames: [' ', 'AssetId', 'Item#', 'Make', 'Description'],&#xD;&#xA;                colModel: [&#xD;&#xA;                    { name: 'ctrls', width: 80, fixed: true, sortable: false, resize: false, formatter: 'actions',&#xD;&#xA;                        formatoptions: { keys: true }&#xD;&#xA;                    },&#xD;&#xA;   		            { name: 'AssetID', label: 'AssetID', width: 65, key: true, hidden: true },&#xD;&#xA;   		            { name: 'Sequence', label: 'Item#', width: 50, align: ""right"", sorttype: 'int', sortable: true, editoptions: { dataEvents: [{ type: 'keydown', fn: function (e) { fnassetgrid.HandleInputNavigation(this, e); } }]} },&#xD;&#xA;   		            { name: 'Make', label: 'Make', width: 105, editable: true, edittype: 'text', editoptions: {&#xD;&#xA;   		                size: 18,&#xD;&#xA;   		                dataEvents: [{&#xD;&#xA;   		                    type: 'focus',&#xD;&#xA;   		                    fn: function (e) {&#xD;&#xA;   		                        $(this).autocomplete({&#xD;&#xA;   		                            source: autocomp.source,&#xD;&#xA;   		                            delay: autocomp.delay,&#xD;&#xA;   		                            minLength: autocomp.minLength&#xD;&#xA;   		                        });&#xD;&#xA;&#xD;&#xA;   		                        $(this).bind(""autocompleteopen"", autocomp.open);&#xD;&#xA;   		                        $(this).bind(""autocompleteclose"", autocomp.close);&#xD;&#xA;   		                    }&#xD;&#xA;   		                }]&#xD;&#xA;   		            }&#xD;&#xA;   		            },&#xD;&#xA;                    { name: 'Description', label: 'Description', fixed: false, editable: true, edittype: 'textarea', unformat: unfrmttextarea, editoptions: { rows: ""10"", cols: ""40""} }&#xD;&#xA;   	            ],&#xD;&#xA;                rowNum: 10, /* no of recs in a grid */&#xD;&#xA;                width: 1330,&#xD;&#xA;                rowList: [10, 20, 30], /* array to construct a select box element in the pager */&#xD;&#xA;                pager: '#pfrmac',&#xD;&#xA;                sortname: 'AssetID', /* initial sorting column */&#xD;&#xA;                viewrecords: true,  /* display the number of total records on the pager bar */&#xD;&#xA;                pginput: true,&#xD;&#xA;                sortorder: ""desc"",&#xD;&#xA;                cellEdit: true,&#xD;&#xA;                shrinkToFit: true,&#xD;&#xA;                jsonReader: {&#xD;&#xA;                    root: function (obj) { return obj.d.SearchResultSet; },&#xD;&#xA;                    page: function (obj) { return obj.d.PageNum; }, // current page of the query&#xD;&#xA;                    total: function (obj) { return obj.d.TotalPages; }, // total pages for the query&#xD;&#xA;                    records: function (obj) { return obj.d.TotalNoOfSearchResultItems; },&#xD;&#xA;                    id: ""AssetID"",&#xD;&#xA;                    repeatitems: false,&#xD;&#xA;                    userdata: function (obj) {&#xD;&#xA;                        extendUserSession();&#xD;&#xA;                        return { ""Error"": obj.d.Error, ""SearchResultSet"": obj.d.SearchResultSet }&#xD;&#xA;                    }&#xD;&#xA;                },&#xD;&#xA;                loadonce: false,&#xD;&#xA;                caption: ""Asset list"",&#xD;&#xA;                height: '100%',&#xD;&#xA;                cellsubmit: 'clientArray',&#xD;&#xA;                beforeEditCell: function (rowid, cellname, value, iRow, iCol) {&#xD;&#xA;                    enableOnSelectEvent = true;&#xD;&#xA;                },&#xD;&#xA;                beforeSaveCell: function (rowid, cellname, value, iRow, iCol) {&#xD;&#xA;                    savedrow = assetGrid.getGridParam('savedRow');&#xD;&#xA;                    if (savedrow && savedrow.length > 0) {&#xD;&#xA;                        if (savedrow[0].id == iRow && savedrow[0].ic == iCol && savedrow[0].v != value) {&#xD;&#xA;                            tr = $('#' + rowid);&#xD;&#xA;                            if (tr && !tr.hasClass(""altered"")) {&#xD;&#xA;                                tr.addClass(""altered"");&#xD;&#xA;                                there_are_unsaved_changes = 1;&#xD;&#xA;                            }&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                },&#xD;&#xA;                afterSaveCell: function (rowid, cellname, value, iRow, iCol) {&#xD;&#xA;                    enableOnSelectEvent = false;&#xD;&#xA;                },&#xD;&#xA;                afterRestoreCell: function (rowid, value, iRow, iCol) {&#xD;&#xA;                    enableOnSelectEvent = false;&#xD;&#xA;                },&#xD;&#xA;                loadComplete: function (data) {&#xD;&#xA;                    if (assetGrid.getGridParam('userData').Error && assetGrid.getGridParam('userData').Error != '')&#xD;&#xA;                        alert(""Error: "" + assetGrid.getGridParam('userData').Error);&#xD;&#xA;                },&#xD;&#xA;                gridComplete: function () {&#xD;&#xA;                    rowindex = 1;&#xD;&#xA;                    rows = assetGrid.find(""tr"");&#xD;&#xA;&#xD;&#xA;                    if (rows && rows.length > 1) {&#xD;&#xA;                        for (i = 1; i < rows.length; i++) {&#xD;&#xA;                            $(rows[i]).find(""td"").each(function (evt) {&#xD;&#xA;                                evt = window.event || evt;&#xD;&#xA;&#xD;&#xA;                                start = $(this);&#xD;&#xA;                                colindex = fnassetgrid.GetColIndex(start);&#xD;&#xA;                                if (colindex > 0) {&#xD;&#xA;                                    $(this).click(function () {&#xD;&#xA;                                        if (!($(this).hasClass(""edit-cell"")))&#xD;&#xA;                                            return false;&#xD;&#xA;                                    }).dblclick(function () {&#xD;&#xA;                                        if (!($(this).hasClass(""edit-cell""))) {&#xD;&#xA;                                            fnassetgrid.PutCellInEdit(this, fnassetgrid.GetRowIndex($(this)), fnassetgrid.GetColIndex($(this)), true);&#xD;&#xA;                                            return;&#xD;&#xA;                                        }&#xD;&#xA;                                        else&#xD;&#xA;                                            return true;&#xD;&#xA;                                    }).mousedown(function () {&#xD;&#xA;                                        if (fnassetgrid.IsInEditMode())&#xD;&#xA;                                            return true;&#xD;&#xA;                                        start = $(this);&#xD;&#xA;                                        selectTo(this);&#xD;&#xA;                                        return false;&#xD;&#xA;                                    }).mouseover(function () {&#xD;&#xA;                                        if (fnassetgrid.IsInEditMode()) return true;&#xD;&#xA;                                        selectTo(this);&#xD;&#xA;                                    }).mouseup(function () {&#xD;&#xA;                                        if (fnassetgrid.IsInEditMode()) return true;&#xD;&#xA;                                        selectTo(this);&#xD;&#xA;                                        $(""#hidEndCell"").val(fnassetgrid.GetColIndex($(this)));&#xD;&#xA;                                        start = null;&#xD;&#xA;                                    }).keypress(function (e) {&#xD;&#xA;                                        fnassetgrid.HandleEditMode(this, e);&#xD;&#xA;                                    });&#xD;&#xA;                                }&#xD;&#xA;                            });&#xD;&#xA;                            rowindex++;&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;            });&#xD;&#xA;&#xD;&#xA;            function unfrmttextarea(cellvalue, options, cellobject) {&#xD;&#xA;                return cellvalue;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            $(""body"").mouseup(function () {&#xD;&#xA;                start = null;&#xD;&#xA;            });&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;            /*************************************************/&#xD;&#xA;            /*********** Global KEYUP integration  ***********/&#xD;&#xA;            /*************************************************/&#xD;&#xA;            $(assetGrid).keyup(function (e) {&#xD;&#xA;                var ctrl = e.ctrlKey&#xD;&#xA;                var key = e.charCode || e.keyCode || 0;&#xD;&#xA;&#xD;&#xA;                if ((ctrl && key == 88) /* CUT */ || (ctrl && key == 67) /* COPY */ || (ctrl && key == 86) /* PASTE */ || (ctrl && key == 90) /* UNDO */) {&#xD;&#xA;&#xD;&#xA;                    if ((ctrl && key == 88) /* CUT */ || (ctrl && key == 67) /* COPY */) {&#xD;&#xA;                        if (fnassetgrid.IsInEditMode()) return true;&#xD;&#xA;                        CopyToClipboard(""hidSelected"");&#xD;&#xA;&#xD;&#xA;                        var selectedCells = fnassetgrid.GetSelCells();&#xD;&#xA;&#xD;&#xA;                        if (selectedCells && selectedCells.length > 0) {&#xD;&#xA;                            $(""#hidStartCell"").val(fnassetgrid.GetRowIndex($(selectedCells[0])) + "","" + fnassetgrid.GetColIndex($(selectedCells[0])));&#xD;&#xA;                            $(""#hidEndCell"").val(fnassetgrid.GetRowIndex($(selectedCells[selectedCells.length - 1])) + "","" + fnassetgrid.GetColIndex($(selectedCells[selectedCells.length - 1])));&#xD;&#xA;                            $(""#hidCopiedText"").val($(""#hidSelected"").val());&#xD;&#xA;                        }&#xD;&#xA;                        else {&#xD;&#xA;                            $(""#hidStartCell"").val('');&#xD;&#xA;                            $(""#hidEndCell"").val('');&#xD;&#xA;                        }&#xD;&#xA;&#xD;&#xA;                        if (ctrl && key == 88) /* CUT */{&#xD;&#xA;                            assetGrid.find(""td.sel"").each(function () {&#xD;&#xA;                                row = $(this).closest('tr.jqgrow');&#xD;&#xA;                                rowId = row.attr('id');&#xD;&#xA;                                assetGrid.setCell(rowId, (fnassetgrid.GridColumns())[fnassetgrid.GetColIndex($(this))].name, '', '', '', true);&#xD;&#xA;                            });&#xD;&#xA;                            fnassetgrid.ClearSelection();&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                    else if (ctrl && key == 86) /* PASTE */{&#xD;&#xA;                        var clipboardata = getClipboardData();&#xD;&#xA;                        if (get_objtype(clipboardata) != ""[object String]"") {&#xD;&#xA;                            alert(""The data you are pasting either is empty or incompatible"");&#xD;&#xA;                            return false;&#xD;&#xA;                        }&#xD;&#xA;&#xD;&#xA;                        pasteinfo(assetGrid, clipboardata);&#xD;&#xA;                    }&#xD;&#xA;                    else if ((ctrl && key == 90) /* UNDO */) {&#xD;&#xA;                    // TBD : No jqgrid features available to get the help &#xD;&#xA;                    }&#xD;&#xA;                    return false; // prevent bubbling&#xD;&#xA;                }&#xD;&#xA;                else&#xD;&#xA;                    return true; // let it bubble&#xD;&#xA;            });&#xD;&#xA;        });&#xD;&#xA;&#xD;&#xA;        &#xD;&#xA;        /********************************************************************/&#xD;&#xA;        /*********** Method to retrieve and submit altered asset information ***********/&#xD;&#xA;        /********************************************************************/&#xD;&#xA;        function getChanges() {&#xD;&#xA;            var editedxml = ""<?xml version='1.0' encoding='utf-8' ?\\>\\n"";&#xD;&#xA;            editedxml += ""<ASSETS>\\n"";&#xD;&#xA;            assetGrid.find(""tr.altered"").each(function () {&#xD;&#xA;                editedxml += ""<ASSET>\\n"";&#xD;&#xA;                $(this).children(""td"").each(function () {&#xD;&#xA;                    colindex = fnassetgrid.GetColIndex($(this));                    &#xD;&#xA;                    if (colindex > 0) {&#xD;&#xA;                        editedxml += ""<"" + (fnassetgrid.GridColumns())[colindex].name.toUpperCase() + "">"" + $(this).text().trim() + ""</"" + (fnassetgrid.GridColumns())[colindex].name.toUpperCase() + "">\\n"";&#xD;&#xA;                    }&#xD;&#xA;                })&#xD;&#xA;                editedxml += ""</ASSET>\\n"";&#xD;&#xA;            })&#xD;&#xA;            editedxml += ""</ASSETS>"";&#xD;&#xA;&#xD;&#xA;            fnassetgrid.ClearMarkedChanges();&#xD;&#xA;            &#xD;&#xA;            //TBD: submit XML to an AJAX service&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        var _browserPasteData = null;&#xD;&#xA;        function getClipboardData() {&#xD;&#xA;            if (_browserPasteData) // Safari/Chrome logic&#xD;&#xA;                return _browserPasteData;&#xD;&#xA;            if (window.clipboardData) // IE logic&#xD;&#xA;            {&#xD;&#xA;                return window.clipboardData.getData(""Text"");&#xD;&#xA;            }&#xD;&#xA;            else if (typeof (netscape) != ""undefined"") // Firefox logic&#xD;&#xA;            {&#xD;&#xA;                netscape.security.PrivilegeManager.enablePrivilege('UniversalXPConnect');&#xD;&#xA;                var clip = Components.classes[""@mozilla.org/widget/clipboard;1""].createInstance(Components.interfaces.nsIClipboard);&#xD;&#xA;                var trans = Components.classes[""@mozilla.org/widget/transferable;1""].createInstance(Components.interfaces.nsITransferable);&#xD;&#xA;                trans.addDataFlavor(""text/unicode"");&#xD;&#xA;                clip.getData(trans, clip.kGlobalClipboard);&#xD;&#xA;                var str = new Object();&#xD;&#xA;                var len = new Object();&#xD;&#xA;                trans.getTransferData(""text/unicode"", str, len);&#xD;&#xA;                if (str)&#xD;&#xA;                    return str.value.QueryInterface(Components.interfaces.nsISupportsString).toString();&#xD;&#xA;            }&#xD;&#xA;            return null;&#xD;&#xA;        }&#xD;&#xA;        // In Safari/Chrome the clipboard data can only be accessed&#xD;&#xA;        // from the onpaste event. In this sample the event is handled &#xD;&#xA;        // off the body element: <body onpaste=""browserPaste(event)"">&#xD;&#xA;        function browserPaste(e) {&#xD;&#xA;            _browserPasteData = e.clipboardData && e.clipboardData.getData ?&#xD;&#xA;                e.clipboardData.getData('text/plain') : null;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        function pasteinfo(objGrid, info) {&#xD;&#xA;            selectedCells = fnassetgrid.GetSelCells();&#xD;&#xA;            firstcell = $(selectedCells[0]);&#xD;&#xA;            firstselectedcolindex = fnassetgrid.GetColIndex(firstcell);&#xD;&#xA;            rowcellscount = fnassetgrid.GetRowCells(firstcell).length;&#xD;&#xA;&#xD;&#xA;            if (firstselectedcolindex == 0) {&#xD;&#xA;                alert(""You cannot paste into an non-editable column"");&#xD;&#xA;                return false;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            if (selectedCells && selectedCells.length > 0) {&#xD;&#xA;                // if the clipboard info is from the asset grid&#xD;&#xA;                if (info && info == $(""#hidCopiedText"").val()) {&#xD;&#xA;                    // get the index values of last copied source cell&#xD;&#xA;                    hidStartCell = -1;&#xD;&#xA;                    if ($(""#hidStartCell"").val() != '' && $(""#hidStartCell"").val().split(',').length > 1) {&#xD;&#xA;                        hidStartCell = $(""#hidStartCell"").val().split(',')[1];&#xD;&#xA;                    }&#xD;&#xA;&#xD;&#xA;                    // if columns of source and dest do not match, throw warning&#xD;&#xA;                    if (firstselectedcolindex != hidStartCell) {&#xD;&#xA;                        if (!confirm(""The data you are pasting comes from a different set of \\ncolumns than those that you are pasting into.\\n\\nAre you sure you want to paste into these columns?""))&#xD;&#xA;                            return false;&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;&#xD;&#xA;                $(""#hidModStartCell"").val(fnassetgrid.GetRowIndex(firstcell) + "","" + firstselectedcolindex);&#xD;&#xA;&#xD;&#xA;                var prevcell = null;&#xD;&#xA;                // remove the last ""line break"" and break clipboard info into lines&#xD;&#xA;                datarows = unescape(info).replace(/\\r\\n$/, '').split(""\\r\\n"");&#xD;&#xA;                if (datarows && datarows.length > 0) {&#xD;&#xA;                    currentrow = firstcell.parent();&#xD;&#xA;                    currentcell = firstcell;&#xD;&#xA;&#xD;&#xA;                    // if the source is a single cell, allow it to be pasted over multiple cells&#xD;&#xA;                    if (datarows.length == 1 && datarows[0].split(""\\t"").length == 1) {&#xD;&#xA;                        copydata = datarows[0].split(""\\t"");&#xD;&#xA;&#xD;&#xA;                        $.each(selectedCells, function (index, value) {&#xD;&#xA;                            prevcell = $(value);&#xD;&#xA;                            if (!prevcell.parent().hasClass(""altered"")) {&#xD;&#xA;                                prevcell.parent().addClass(""altered"");&#xD;&#xA;                                there_are_unsaved_changes = 1;&#xD;&#xA;                            }&#xD;&#xA;                            var rowId = prevcell.closest('tr.jqgrow').attr('id');&#xD;&#xA;                            var icol = fnassetgrid.GetColIndex(prevcell);&#xD;&#xA;                            assetGrid.setCell(rowId, (fnassetgrid.GridColumns())[icol].name, copydata[0], '', '', true);&#xD;&#xA;                        });&#xD;&#xA;                    }&#xD;&#xA;                    else {&#xD;&#xA;                        for (i = 0; i < datarows.length && currentrow.length > 0; ++i) {&#xD;&#xA;                            if (datarows[i] == '') break;&#xD;&#xA;                            // break each lines into columns&#xD;&#xA;                            datarows[i] = datarows[i].split(""\\t"");&#xD;&#xA;                            var row = null;&#xD;&#xA;                            var rowId = null;&#xD;&#xA;                            var rowindex = null;&#xD;&#xA;                            for (j = 0; j < datarows[i].length && currentcell.length > 0; ++j) {&#xD;&#xA;                                // mark the row as altered&#xD;&#xA;                                if (!currentcell.parent().hasClass(""altered"")) {&#xD;&#xA;                                    currentcell.parent().addClass(""altered"");&#xD;&#xA;                                    there_are_unsaved_changes = 1;&#xD;&#xA;                                }&#xD;&#xA;                                // for each outer iteration get the rowid&#xD;&#xA;                                if (row == null) {&#xD;&#xA;                                    row = (currentcell).closest('tr.jqgrow');&#xD;&#xA;                                    rowId = row.attr('id');&#xD;&#xA;                                }&#xD;&#xA;                                var icol = fnassetgrid.GetColIndex(currentcell);&#xD;&#xA;                                assetGrid.setCell(rowId, (fnassetgrid.GridColumns())[icol].name, datarows[i][j], '', '', true);&#xD;&#xA;                                prevcell = currentcell;&#xD;&#xA;&#xD;&#xA;                                // advance to the next visible cell -- only consider pasting into visible columns&#xD;&#xA;                                do {&#xD;&#xA;                                    currentcell = currentcell.next();&#xD;&#xA;                                }&#xD;&#xA;                                while ((currentcell.length > 0) && currentcell.is("":hidden""))&#xD;&#xA;                            }&#xD;&#xA;&#xD;&#xA;                            currentrow = currentrow.next();&#xD;&#xA;                            currentcell = $(currentrow.children(""td"")[firstselectedcolindex]);&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            if (prevcell.length > 0)&#xD;&#xA;                $(""#hidModEndCell"").val(fnassetgrid.GetRowIndex(prevcell) + "","" + fnassetgrid.GetColIndex(prevcell));&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;    </script>&#xD;&#xA;&#xD;&#xA;Many Thanks in advance!&#xD;&#xA;&#xD;&#xA;Edited on 9/13/11:&#xD;&#xA;This is my first use of JQGrid. I'm using ver 4.1.2. I spent few weeks to put together the excel like grid and the biggest challenge was to find the right information on how to use JQGrid. My current setup has lots of ajax updates and image galleries and use of jqgrid formatter but what I've put here is the main code to be able to use JQgrid with server side paging, excel like copy-paste and demonstration of few other features on jqgrid. This is just my way of giving back for all the help that I got from this community. &#xD;&#xA;&#xD;&#xA;For people who just jumped to JQGrid, you will soon find out that there is some challenge to using Textarea in jqgrid. you can find some solutions [here](http://www.trirand.com/blog/?page_id=393/bugs/celledit-textarea-newline-enter-will-close-cell/&value=5216&type=8&include=0&search=1&ret=all).&#xD;&#xA;&#xD;&#xA;Edited on 5/14/12:&#xD;&#xA;i was finally able to jump out of my laziness and prepare this to share the actual [EXCEL LIKE JQGRID implementation](http://jsfiddle.net/justcurious/qLQRA/). The cell selection may work weird on jsfiddle on few browsers but it should work normal on your development box. Have fun!!!!";;added 305 characters in body
24440731;7016109;863791;5;6c371e44-e89a-4a27-8b31-064621ae922d;2012-05-15 16:12:46.0;"**Edited on 5/14/12:**&#xD;&#xA;i was finally able to jump out of my laziness and prepare this to share the actual [EXCEL LIKE JQGRID implementation](http://jsfiddle.net/justcurious/qLQRA/). The cell selection may work weird on jsfiddle on few browsers but it should work normal on your development box. Have fun!!!!&#xD;&#xA;&#xD;&#xA;**Edited on 9/13/11:**&#xD;&#xA;This is my first use of JQGrid. I'm using ver 4.1.2. I spent few weeks to put together the excel like grid and the biggest challenge was to find the right information on how to use JQGrid. My current setup has lots of ajax updates and image galleries and use of jqgrid formatter but what I've put here is the main code to be able to use JQgrid with server side paging, excel like copy-paste and demonstration of few other features on jqgrid. This is just my way of giving back for all the help that I got from this community. &#xD;&#xA;&#xD;&#xA;For people who just jumped to JQGrid, you will soon find out that there is some challenge to using Textarea in jqgrid. you can find some solutions [here](http://www.trirand.com/blog/?page_id=393/bugs/celledit-textarea-newline-enter-will-close-cell/&value=5216&type=8&include=0&search=1&ret=all).&#xD;&#xA;&#xD;&#xA;**Original post:**  &#xD;&#xA;Just to give little update before putting my question....&#xD;&#xA;&#xD;&#xA;I've been able to come up with some additional features on the jqgrid that I'm using (after going through many forums) including: copy-paste back and forth from Excel to jqgrid, edit cell on keypress and dblclick, copy and paste multiple cells from one block to another on the same grid using mouse selection (from here http://stackoverflow.com/questions/1821074/using-javascript-to-sum-selected-cells-in-ie6)&#xD;&#xA;&#xD;&#xA;Most of the copy paste features works on IE only as of now. I save all the changes together on ""Save"" button click so all the updates on the cells are on screen only until user hits the ""Save"" button.&#xD;&#xA;&#xD;&#xA;Although, things are still in flux right now, I'd like to have the implementation design on paper now than later. I'm looking for an easy way to UNDO only the LAST change. I've been thinking of using jQuery's ""data()"" and ""removeData()"" methods to implement this but if there is anything already existing in jqgrid framework that would help, I would like to know. Any suggestions??&#xD;&#xA;&#xD;&#xA;    <style type=""text/css"">&#xD;&#xA;        .sel {background-color: #96B9DC !important; }&#xD;&#xA;        .altered {}&#xD;&#xA;    </style>&#xD;&#xA;    <script type=""text/javascript"">&#xD;&#xA;        var enableOnSelectEvent = false; // handle text selection&#xD;&#xA;    </script>&#xD;&#xA;    <div style=""width:100%; background-color:#FFF; border:1px solid #000;""><input id=""btnsavechanges"" value=""Save Changes"" style=""width:120px;"" class=""formbutton ui-corner-all"" type=""button"" onclick=""getChanges(); return false;"" /></div>&#xD;&#xA;    <table id=""grd_asset"" width=""100%"" onSelectStart=""return enableOnSelectEvent;""></table>&#xD;&#xA;    <div id=""pfrmac"" style='width:100%;'></div>&#xD;&#xA;    <input type=""hidden"" id=""hidSelected"" value="""" />&#xD;&#xA;&#xD;&#xA;    <!-- copy content from the grid cells -->&#xD;&#xA;    <input type=""hidden"" id=""hidCopiedText"" value="""" />&#xD;&#xA;&#xD;&#xA;    <!-- Start and End of cell selection -->&#xD;&#xA;    <input type=""hidden"" id=""hidStartCell"" value="""" />&#xD;&#xA;    <input type=""hidden"" id=""hidEndCell"" value="""" />&#xD;&#xA;&#xD;&#xA;    <!-- Start and End of last modified cell(s) -->&#xD;&#xA;    <input type=""hidden"" id=""hidModStartCell"" value="""" />&#xD;&#xA;    <input type=""hidden"" id=""hidModEndCell"" value="""" />&#xD;&#xA;&#xD;&#xA;    <script type=""text/javascript"">&#xD;&#xA;        /*************************************************/&#xD;&#xA;        /**************** Grid Utilities  ****************/&#xD;&#xA;        /*************************************************/&#xD;&#xA;        FnGrid = function () {&#xD;&#xA;            this.GridColumns = function () {&#xD;&#xA;                return assetGrid.jqGrid('getGridParam', 'colModel');&#xD;&#xA;            }&#xD;&#xA;            this.GetSelCells = function () {&#xD;&#xA;                return assetGrid.find(""td.sel"");&#xD;&#xA;            }&#xD;&#xA;            this.ClearSelection = function () {&#xD;&#xA;                assetGrid.find(""td"").removeClass(""sel"");&#xD;&#xA;            }&#xD;&#xA;            this.ClearSavedHistory = function () {&#xD;&#xA;                assetGrid.removeData();&#xD;&#xA;            }&#xD;&#xA;            this.ClearMarkedChanges = function () {&#xD;&#xA;                assetGrid.find(""tr"").removeClass(""altered"");&#xD;&#xA;            }&#xD;&#xA;            this.GetRowCells = function (cell) {&#xD;&#xA;                return cell.parent().children(""td"")&#xD;&#xA;            }&#xD;&#xA;            this.GetRowId = function (cell) {&#xD;&#xA;                var row = cell.closest('tr.jqgrow');&#xD;&#xA;                return row.attr('id');&#xD;&#xA;            }&#xD;&#xA;            this.GetRowIndex = function (cell) {&#xD;&#xA;                var cellrow = cell.parent();&#xD;&#xA;                return cellrow.parent().children(""tr"").index(cellrow);&#xD;&#xA;            }&#xD;&#xA;            this.GetColIndex = function (cell) {&#xD;&#xA;                return cell.parent().children(""td"").index(cell);&#xD;&#xA;            }&#xD;&#xA;            this.IsInEditMode = function () {&#xD;&#xA;                var savedRows = assetGrid.getGridParam('savedRow');&#xD;&#xA;                return (savedRows && savedRows.length > 0);&#xD;&#xA;            }&#xD;&#xA;            this.PutCellInEdit = function (cell, irow, icol, edit) {&#xD;&#xA;                assetGrid.editCell(irow, icol, edit);&#xD;&#xA;                // transfer focus to the input&#xD;&#xA;                var inp = $(cell).children(""input"")&#xD;&#xA;                if (inp && inp.length > 0) {&#xD;&#xA;                    $(inp[0]).val('');&#xD;&#xA;                    $(inp[0]).focus();&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;            this.HandleEditMode = function (cell, e) {&#xD;&#xA;                var ctrl = e.ctrlKey;&#xD;&#xA;                var alt = e.altKey;&#xD;&#xA;&#xD;&#xA;                var keyCode = (e.keyCode ? e.keyCode : e.which);&#xD;&#xA;                if (keyCode) {&#xD;&#xA;                    if (keyCode >= 32 && keyCode <= 126 && !ctrl && !alt) {&#xD;&#xA;                        // switch the cell to edit mode if not already&#xD;&#xA;                        if (!($(cell).hasClass(""edit-cell""))) {&#xD;&#xA;                            this.PutCellInEdit(cell, this.GetRowIndex($(cell)), this.GetColIndex($(cell)), true);                        }&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;                return true;&#xD;&#xA;            }&#xD;&#xA;            this.HandleInputNavigation = function (ele, evt) {&#xD;&#xA;                evt = window.event || evt;&#xD;&#xA;&#xD;&#xA;                switch (evt.keyCode) {&#xD;&#xA;                    // down arrow                   &#xD;&#xA;                    case 40:&#xD;&#xA;                        if (!$(ele).parent().hasClass(""altered""))&#xD;&#xA;                            $(ele).parent().addClass(""altered"");&#xD;&#xA;&#xD;&#xA;                        irow = this.GetRowIndex($(ele).parent());&#xD;&#xA;                        icol = this.GetColIndex($(ele).parent())&#xD;&#xA;                        var prevcell = irow + "","" + icol;&#xD;&#xA;                        $(""#hidModStartCell"").val(prevcell);&#xD;&#xA;                        $(""#hidModEndCell"").val(prevcell);&#xD;&#xA;&#xD;&#xA;                        downele = $(ele).parent()&#xD;&#xA;                                .parent()&#xD;&#xA;                                .next()&#xD;&#xA;                                .children(""td"")[this.GetColIndex($(ele).parent())];&#xD;&#xA;&#xD;&#xA;                        this.ClearSelection();&#xD;&#xA;                        assetGrid.editCell(this.GetRowIndex($(downele)), this.GetColIndex($(downele)), true);&#xD;&#xA;                        break;&#xD;&#xA;&#xD;&#xA;                    // up arrow                   &#xD;&#xA;                    case 38:&#xD;&#xA;                        if (!$(ele).parent().hasClass(""altered""))&#xD;&#xA;                            $(ele).parent().addClass(""altered"");&#xD;&#xA;&#xD;&#xA;                        irow = this.GetRowIndex($(ele).parent());&#xD;&#xA;                        icol = this.GetColIndex($(ele).parent())&#xD;&#xA;                        var prevcell = irow + "","" + icol;&#xD;&#xA;                        $(""#hidModStartCell"").val(prevcell);&#xD;&#xA;                        $(""#hidModEndCell"").val(prevcell);&#xD;&#xA;&#xD;&#xA;                        topele = $(ele).parent()&#xD;&#xA;                                .parent()&#xD;&#xA;                                .prev()&#xD;&#xA;                                .children(""td"")[this.GetColIndex($(ele).parent())];&#xD;&#xA;&#xD;&#xA;                        if (this.GetRowIndex($(topele)) <= 0) break;&#xD;&#xA;&#xD;&#xA;                        this.ClearSelection();&#xD;&#xA;                        assetGrid.editCell(this.GetRowIndex($(topele)), this.GetColIndex($(topele)), true);&#xD;&#xA;                        break;&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        var autocomp = new AutoCompleteRequest();&#xD;&#xA;        var lastSel = """";&#xD;&#xA;        var assetGrid = $('#grd_asset');&#xD;&#xA;        var start = null;&#xD;&#xA;        var fnassetgrid = new FnGrid();&#xD;&#xA;        var lastSel = -1;&#xD;&#xA;&#xD;&#xA;        function selectTo(cell) {&#xD;&#xA;            if (start == null)&#xD;&#xA;                return;&#xD;&#xA;            fnassetgrid.ClearSelection();&#xD;&#xA;            var stop = $(cell);&#xD;&#xA;            var tbl = start.closest(""table"");&#xD;&#xA;            var rs = tbl.children(""tbody"").children(""tr"");&#xD;&#xA;            var r0 = rs.index(start.parent()), c0 = fnassetgrid.GetColIndex(start);&#xD;&#xA;            var r1 = rs.index(stop.parent()), c1 = fnassetgrid.GetColIndex(stop);&#xD;&#xA;            var concat = """";&#xD;&#xA;            for (var i = r0; i <= r1; i++) {&#xD;&#xA;                var cells = $(rs.get(i)).children(""td"");&#xD;&#xA;                var rowid = 0;&#xD;&#xA;                for (var j = c0; j <= c1; j++) {&#xD;&#xA;                    var cell = $(cells.get(j));&#xD;&#xA;                    if (rowid == 0) rowid = fnassetgrid.GetRowId(cell);&#xD;&#xA;                    if (cell.is("":hidden"")) continue;&#xD;&#xA;                    cell.addClass(""sel"");&#xD;&#xA;                    concat += assetGrid.getCell(rowid, j) + ""\\t"";&#xD;&#xA;                }&#xD;&#xA;                if (concat.lastIndexOf(""\\t"") == concat.length - 1)&#xD;&#xA;                    concat = concat.substring(0, concat.lastIndexOf(""\\t""));&#xD;&#xA;&#xD;&#xA;                concat += escape(""\\r\\n"");&#xD;&#xA;            }&#xD;&#xA;            $(""#hidSelected"").val(concat.trim());&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        $(document).ready(function () {&#xD;&#xA;            /*************************************************/&#xD;&#xA;            /******************* THE GRID  *******************/&#xD;&#xA;            /*************************************************/&#xD;&#xA;            assetGrid.jqGrid({&#xD;&#xA;                ajaxGridOptions: { contentType: ""application/json; charset=utf-8"", type: ""POST"" },&#xD;&#xA;                url: '../api/yourservices.asmx/GetData',&#xD;&#xA;                datatype: 'json',&#xD;&#xA;                serializeGridData: function (postData) {&#xD;&#xA;                    if (postData.searchField === undefined) postData.searchField = null;&#xD;&#xA;                    if (postData.searchString === undefined) postData.searchString = null;&#xD;&#xA;                    if (postData.searchOper === undefined) postData.searchOper = null;&#xD;&#xA;                    if (postData.filters === undefined) postData.filters = null;&#xD;&#xA;                    return JSON.stringify(postData);&#xD;&#xA;                },&#xD;&#xA;                colNames: [' ', 'AssetId', 'Item#', 'Make', 'Description'],&#xD;&#xA;                colModel: [&#xD;&#xA;                    { name: 'ctrls', width: 80, fixed: true, sortable: false, resize: false, formatter: 'actions',&#xD;&#xA;                        formatoptions: { keys: true }&#xD;&#xA;                    },&#xD;&#xA;   		            { name: 'AssetID', label: 'AssetID', width: 65, key: true, hidden: true },&#xD;&#xA;   		            { name: 'Sequence', label: 'Item#', width: 50, align: ""right"", sorttype: 'int', sortable: true, editoptions: { dataEvents: [{ type: 'keydown', fn: function (e) { fnassetgrid.HandleInputNavigation(this, e); } }]} },&#xD;&#xA;   		            { name: 'Make', label: 'Make', width: 105, editable: true, edittype: 'text', editoptions: {&#xD;&#xA;   		                size: 18,&#xD;&#xA;   		                dataEvents: [{&#xD;&#xA;   		                    type: 'focus',&#xD;&#xA;   		                    fn: function (e) {&#xD;&#xA;   		                        $(this).autocomplete({&#xD;&#xA;   		                            source: autocomp.source,&#xD;&#xA;   		                            delay: autocomp.delay,&#xD;&#xA;   		                            minLength: autocomp.minLength&#xD;&#xA;   		                        });&#xD;&#xA;&#xD;&#xA;   		                        $(this).bind(""autocompleteopen"", autocomp.open);&#xD;&#xA;   		                        $(this).bind(""autocompleteclose"", autocomp.close);&#xD;&#xA;   		                    }&#xD;&#xA;   		                }]&#xD;&#xA;   		            }&#xD;&#xA;   		            },&#xD;&#xA;                    { name: 'Description', label: 'Description', fixed: false, editable: true, edittype: 'textarea', unformat: unfrmttextarea, editoptions: { rows: ""10"", cols: ""40""} }&#xD;&#xA;   	            ],&#xD;&#xA;                rowNum: 10, /* no of recs in a grid */&#xD;&#xA;                width: 1330,&#xD;&#xA;                rowList: [10, 20, 30], /* array to construct a select box element in the pager */&#xD;&#xA;                pager: '#pfrmac',&#xD;&#xA;                sortname: 'AssetID', /* initial sorting column */&#xD;&#xA;                viewrecords: true,  /* display the number of total records on the pager bar */&#xD;&#xA;                pginput: true,&#xD;&#xA;                sortorder: ""desc"",&#xD;&#xA;                cellEdit: true,&#xD;&#xA;                shrinkToFit: true,&#xD;&#xA;                jsonReader: {&#xD;&#xA;                    root: function (obj) { return obj.d.SearchResultSet; },&#xD;&#xA;                    page: function (obj) { return obj.d.PageNum; }, // current page of the query&#xD;&#xA;                    total: function (obj) { return obj.d.TotalPages; }, // total pages for the query&#xD;&#xA;                    records: function (obj) { return obj.d.TotalNoOfSearchResultItems; },&#xD;&#xA;                    id: ""AssetID"",&#xD;&#xA;                    repeatitems: false,&#xD;&#xA;                    userdata: function (obj) {&#xD;&#xA;                        extendUserSession();&#xD;&#xA;                        return { ""Error"": obj.d.Error, ""SearchResultSet"": obj.d.SearchResultSet }&#xD;&#xA;                    }&#xD;&#xA;                },&#xD;&#xA;                loadonce: false,&#xD;&#xA;                caption: ""Asset list"",&#xD;&#xA;                height: '100%',&#xD;&#xA;                cellsubmit: 'clientArray',&#xD;&#xA;                beforeEditCell: function (rowid, cellname, value, iRow, iCol) {&#xD;&#xA;                    enableOnSelectEvent = true;&#xD;&#xA;                },&#xD;&#xA;                beforeSaveCell: function (rowid, cellname, value, iRow, iCol) {&#xD;&#xA;                    savedrow = assetGrid.getGridParam('savedRow');&#xD;&#xA;                    if (savedrow && savedrow.length > 0) {&#xD;&#xA;                        if (savedrow[0].id == iRow && savedrow[0].ic == iCol && savedrow[0].v != value) {&#xD;&#xA;                            tr = $('#' + rowid);&#xD;&#xA;                            if (tr && !tr.hasClass(""altered"")) {&#xD;&#xA;                                tr.addClass(""altered"");&#xD;&#xA;                                there_are_unsaved_changes = 1;&#xD;&#xA;                            }&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                },&#xD;&#xA;                afterSaveCell: function (rowid, cellname, value, iRow, iCol) {&#xD;&#xA;                    enableOnSelectEvent = false;&#xD;&#xA;                },&#xD;&#xA;                afterRestoreCell: function (rowid, value, iRow, iCol) {&#xD;&#xA;                    enableOnSelectEvent = false;&#xD;&#xA;                },&#xD;&#xA;                loadComplete: function (data) {&#xD;&#xA;                    if (assetGrid.getGridParam('userData').Error && assetGrid.getGridParam('userData').Error != '')&#xD;&#xA;                        alert(""Error: "" + assetGrid.getGridParam('userData').Error);&#xD;&#xA;                },&#xD;&#xA;                gridComplete: function () {&#xD;&#xA;                    rowindex = 1;&#xD;&#xA;                    rows = assetGrid.find(""tr"");&#xD;&#xA;&#xD;&#xA;                    if (rows && rows.length > 1) {&#xD;&#xA;                        for (i = 1; i < rows.length; i++) {&#xD;&#xA;                            $(rows[i]).find(""td"").each(function (evt) {&#xD;&#xA;                                evt = window.event || evt;&#xD;&#xA;&#xD;&#xA;                                start = $(this);&#xD;&#xA;                                colindex = fnassetgrid.GetColIndex(start);&#xD;&#xA;                                if (colindex > 0) {&#xD;&#xA;                                    $(this).click(function () {&#xD;&#xA;                                        if (!($(this).hasClass(""edit-cell"")))&#xD;&#xA;                                            return false;&#xD;&#xA;                                    }).dblclick(function () {&#xD;&#xA;                                        if (!($(this).hasClass(""edit-cell""))) {&#xD;&#xA;                                            fnassetgrid.PutCellInEdit(this, fnassetgrid.GetRowIndex($(this)), fnassetgrid.GetColIndex($(this)), true);&#xD;&#xA;                                            return;&#xD;&#xA;                                        }&#xD;&#xA;                                        else&#xD;&#xA;                                            return true;&#xD;&#xA;                                    }).mousedown(function () {&#xD;&#xA;                                        if (fnassetgrid.IsInEditMode())&#xD;&#xA;                                            return true;&#xD;&#xA;                                        start = $(this);&#xD;&#xA;                                        selectTo(this);&#xD;&#xA;                                        return false;&#xD;&#xA;                                    }).mouseover(function () {&#xD;&#xA;                                        if (fnassetgrid.IsInEditMode()) return true;&#xD;&#xA;                                        selectTo(this);&#xD;&#xA;                                    }).mouseup(function () {&#xD;&#xA;                                        if (fnassetgrid.IsInEditMode()) return true;&#xD;&#xA;                                        selectTo(this);&#xD;&#xA;                                        $(""#hidEndCell"").val(fnassetgrid.GetColIndex($(this)));&#xD;&#xA;                                        start = null;&#xD;&#xA;                                    }).keypress(function (e) {&#xD;&#xA;                                        fnassetgrid.HandleEditMode(this, e);&#xD;&#xA;                                    });&#xD;&#xA;                                }&#xD;&#xA;                            });&#xD;&#xA;                            rowindex++;&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;            });&#xD;&#xA;&#xD;&#xA;            function unfrmttextarea(cellvalue, options, cellobject) {&#xD;&#xA;                return cellvalue;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            $(""body"").mouseup(function () {&#xD;&#xA;                start = null;&#xD;&#xA;            });&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;            /*************************************************/&#xD;&#xA;            /*********** Global KEYUP integration  ***********/&#xD;&#xA;            /*************************************************/&#xD;&#xA;            $(assetGrid).keyup(function (e) {&#xD;&#xA;                var ctrl = e.ctrlKey&#xD;&#xA;                var key = e.charCode || e.keyCode || 0;&#xD;&#xA;&#xD;&#xA;                if ((ctrl && key == 88) /* CUT */ || (ctrl && key == 67) /* COPY */ || (ctrl && key == 86) /* PASTE */ || (ctrl && key == 90) /* UNDO */) {&#xD;&#xA;&#xD;&#xA;                    if ((ctrl && key == 88) /* CUT */ || (ctrl && key == 67) /* COPY */) {&#xD;&#xA;                        if (fnassetgrid.IsInEditMode()) return true;&#xD;&#xA;                        CopyToClipboard(""hidSelected"");&#xD;&#xA;&#xD;&#xA;                        var selectedCells = fnassetgrid.GetSelCells();&#xD;&#xA;&#xD;&#xA;                        if (selectedCells && selectedCells.length > 0) {&#xD;&#xA;                            $(""#hidStartCell"").val(fnassetgrid.GetRowIndex($(selectedCells[0])) + "","" + fnassetgrid.GetColIndex($(selectedCells[0])));&#xD;&#xA;                            $(""#hidEndCell"").val(fnassetgrid.GetRowIndex($(selectedCells[selectedCells.length - 1])) + "","" + fnassetgrid.GetColIndex($(selectedCells[selectedCells.length - 1])));&#xD;&#xA;                            $(""#hidCopiedText"").val($(""#hidSelected"").val());&#xD;&#xA;                        }&#xD;&#xA;                        else {&#xD;&#xA;                            $(""#hidStartCell"").val('');&#xD;&#xA;                            $(""#hidEndCell"").val('');&#xD;&#xA;                        }&#xD;&#xA;&#xD;&#xA;                        if (ctrl && key == 88) /* CUT */{&#xD;&#xA;                            assetGrid.find(""td.sel"").each(function () {&#xD;&#xA;                                row = $(this).closest('tr.jqgrow');&#xD;&#xA;                                rowId = row.attr('id');&#xD;&#xA;                                assetGrid.setCell(rowId, (fnassetgrid.GridColumns())[fnassetgrid.GetColIndex($(this))].name, '', '', '', true);&#xD;&#xA;                            });&#xD;&#xA;                            fnassetgrid.ClearSelection();&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                    else if (ctrl && key == 86) /* PASTE */{&#xD;&#xA;                        var clipboardata = getClipboardData();&#xD;&#xA;                        if (get_objtype(clipboardata) != ""[object String]"") {&#xD;&#xA;                            alert(""The data you are pasting either is empty or incompatible"");&#xD;&#xA;                            return false;&#xD;&#xA;                        }&#xD;&#xA;&#xD;&#xA;                        pasteinfo(assetGrid, clipboardata);&#xD;&#xA;                    }&#xD;&#xA;                    else if ((ctrl && key == 90) /* UNDO */) {&#xD;&#xA;                    // TBD : No jqgrid features available to get the help &#xD;&#xA;                    }&#xD;&#xA;                    return false; // prevent bubbling&#xD;&#xA;                }&#xD;&#xA;                else&#xD;&#xA;                    return true; // let it bubble&#xD;&#xA;            });&#xD;&#xA;        });&#xD;&#xA;&#xD;&#xA;        &#xD;&#xA;        /********************************************************************/&#xD;&#xA;        /*********** Method to retrieve and submit altered asset information ***********/&#xD;&#xA;        /********************************************************************/&#xD;&#xA;        function getChanges() {&#xD;&#xA;            var editedxml = ""<?xml version='1.0' encoding='utf-8' ?\\>\\n"";&#xD;&#xA;            editedxml += ""<ASSETS>\\n"";&#xD;&#xA;            assetGrid.find(""tr.altered"").each(function () {&#xD;&#xA;                editedxml += ""<ASSET>\\n"";&#xD;&#xA;                $(this).children(""td"").each(function () {&#xD;&#xA;                    colindex = fnassetgrid.GetColIndex($(this));                    &#xD;&#xA;                    if (colindex > 0) {&#xD;&#xA;                        editedxml += ""<"" + (fnassetgrid.GridColumns())[colindex].name.toUpperCase() + "">"" + $(this).text().trim() + ""</"" + (fnassetgrid.GridColumns())[colindex].name.toUpperCase() + "">\\n"";&#xD;&#xA;                    }&#xD;&#xA;                })&#xD;&#xA;                editedxml += ""</ASSET>\\n"";&#xD;&#xA;            })&#xD;&#xA;            editedxml += ""</ASSETS>"";&#xD;&#xA;&#xD;&#xA;            fnassetgrid.ClearMarkedChanges();&#xD;&#xA;            &#xD;&#xA;            //TBD: submit XML to an AJAX service&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        var _browserPasteData = null;&#xD;&#xA;        function getClipboardData() {&#xD;&#xA;            if (_browserPasteData) // Safari/Chrome logic&#xD;&#xA;                return _browserPasteData;&#xD;&#xA;            if (window.clipboardData) // IE logic&#xD;&#xA;            {&#xD;&#xA;                return window.clipboardData.getData(""Text"");&#xD;&#xA;            }&#xD;&#xA;            else if (typeof (netscape) != ""undefined"") // Firefox logic&#xD;&#xA;            {&#xD;&#xA;                netscape.security.PrivilegeManager.enablePrivilege('UniversalXPConnect');&#xD;&#xA;                var clip = Components.classes[""@mozilla.org/widget/clipboard;1""].createInstance(Components.interfaces.nsIClipboard);&#xD;&#xA;                var trans = Components.classes[""@mozilla.org/widget/transferable;1""].createInstance(Components.interfaces.nsITransferable);&#xD;&#xA;                trans.addDataFlavor(""text/unicode"");&#xD;&#xA;                clip.getData(trans, clip.kGlobalClipboard);&#xD;&#xA;                var str = new Object();&#xD;&#xA;                var len = new Object();&#xD;&#xA;                trans.getTransferData(""text/unicode"", str, len);&#xD;&#xA;                if (str)&#xD;&#xA;                    return str.value.QueryInterface(Components.interfaces.nsISupportsString).toString();&#xD;&#xA;            }&#xD;&#xA;            return null;&#xD;&#xA;        }&#xD;&#xA;        // In Safari/Chrome the clipboard data can only be accessed&#xD;&#xA;        // from the onpaste event. In this sample the event is handled &#xD;&#xA;        // off the body element: <body onpaste=""browserPaste(event)"">&#xD;&#xA;        function browserPaste(e) {&#xD;&#xA;            _browserPasteData = e.clipboardData && e.clipboardData.getData ?&#xD;&#xA;                e.clipboardData.getData('text/plain') : null;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        function pasteinfo(objGrid, info) {&#xD;&#xA;            selectedCells = fnassetgrid.GetSelCells();&#xD;&#xA;            firstcell = $(selectedCells[0]);&#xD;&#xA;            firstselectedcolindex = fnassetgrid.GetColIndex(firstcell);&#xD;&#xA;            rowcellscount = fnassetgrid.GetRowCells(firstcell).length;&#xD;&#xA;&#xD;&#xA;            if (firstselectedcolindex == 0) {&#xD;&#xA;                alert(""You cannot paste into an non-editable column"");&#xD;&#xA;                return false;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            if (selectedCells && selectedCells.length > 0) {&#xD;&#xA;                // if the clipboard info is from the asset grid&#xD;&#xA;                if (info && info == $(""#hidCopiedText"").val()) {&#xD;&#xA;                    // get the index values of last copied source cell&#xD;&#xA;                    hidStartCell = -1;&#xD;&#xA;                    if ($(""#hidStartCell"").val() != '' && $(""#hidStartCell"").val().split(',').length > 1) {&#xD;&#xA;                        hidStartCell = $(""#hidStartCell"").val().split(',')[1];&#xD;&#xA;                    }&#xD;&#xA;&#xD;&#xA;                    // if columns of source and dest do not match, throw warning&#xD;&#xA;                    if (firstselectedcolindex != hidStartCell) {&#xD;&#xA;                        if (!confirm(""The data you are pasting comes from a different set of \\ncolumns than those that you are pasting into.\\n\\nAre you sure you want to paste into these columns?""))&#xD;&#xA;                            return false;&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;&#xD;&#xA;                $(""#hidModStartCell"").val(fnassetgrid.GetRowIndex(firstcell) + "","" + firstselectedcolindex);&#xD;&#xA;&#xD;&#xA;                var prevcell = null;&#xD;&#xA;                // remove the last ""line break"" and break clipboard info into lines&#xD;&#xA;                datarows = unescape(info).replace(/\\r\\n$/, '').split(""\\r\\n"");&#xD;&#xA;                if (datarows && datarows.length > 0) {&#xD;&#xA;                    currentrow = firstcell.parent();&#xD;&#xA;                    currentcell = firstcell;&#xD;&#xA;&#xD;&#xA;                    // if the source is a single cell, allow it to be pasted over multiple cells&#xD;&#xA;                    if (datarows.length == 1 && datarows[0].split(""\\t"").length == 1) {&#xD;&#xA;                        copydata = datarows[0].split(""\\t"");&#xD;&#xA;&#xD;&#xA;                        $.each(selectedCells, function (index, value) {&#xD;&#xA;                            prevcell = $(value);&#xD;&#xA;                            if (!prevcell.parent().hasClass(""altered"")) {&#xD;&#xA;                                prevcell.parent().addClass(""altered"");&#xD;&#xA;                                there_are_unsaved_changes = 1;&#xD;&#xA;                            }&#xD;&#xA;                            var rowId = prevcell.closest('tr.jqgrow').attr('id');&#xD;&#xA;                            var icol = fnassetgrid.GetColIndex(prevcell);&#xD;&#xA;                            assetGrid.setCell(rowId, (fnassetgrid.GridColumns())[icol].name, copydata[0], '', '', true);&#xD;&#xA;                        });&#xD;&#xA;                    }&#xD;&#xA;                    else {&#xD;&#xA;                        for (i = 0; i < datarows.length && currentrow.length > 0; ++i) {&#xD;&#xA;                            if (datarows[i] == '') break;&#xD;&#xA;                            // break each lines into columns&#xD;&#xA;                            datarows[i] = datarows[i].split(""\\t"");&#xD;&#xA;                            var row = null;&#xD;&#xA;                            var rowId = null;&#xD;&#xA;                            var rowindex = null;&#xD;&#xA;                            for (j = 0; j < datarows[i].length && currentcell.length > 0; ++j) {&#xD;&#xA;                                // mark the row as altered&#xD;&#xA;                                if (!currentcell.parent().hasClass(""altered"")) {&#xD;&#xA;                                    currentcell.parent().addClass(""altered"");&#xD;&#xA;                                    there_are_unsaved_changes = 1;&#xD;&#xA;                                }&#xD;&#xA;                                // for each outer iteration get the rowid&#xD;&#xA;                                if (row == null) {&#xD;&#xA;                                    row = (currentcell).closest('tr.jqgrow');&#xD;&#xA;                                    rowId = row.attr('id');&#xD;&#xA;                                }&#xD;&#xA;                                var icol = fnassetgrid.GetColIndex(currentcell);&#xD;&#xA;                                assetGrid.setCell(rowId, (fnassetgrid.GridColumns())[icol].name, datarows[i][j], '', '', true);&#xD;&#xA;                                prevcell = currentcell;&#xD;&#xA;&#xD;&#xA;                                // advance to the next visible cell -- only consider pasting into visible columns&#xD;&#xA;                                do {&#xD;&#xA;                                    currentcell = currentcell.next();&#xD;&#xA;                                }&#xD;&#xA;                                while ((currentcell.length > 0) && currentcell.is("":hidden""))&#xD;&#xA;                            }&#xD;&#xA;&#xD;&#xA;                            currentrow = currentrow.next();&#xD;&#xA;                            currentcell = $(currentrow.children(""td"")[firstselectedcolindex]);&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            if (prevcell.length > 0)&#xD;&#xA;                $(""#hidModEndCell"").val(fnassetgrid.GetRowIndex(prevcell) + "","" + fnassetgrid.GetColIndex(prevcell));&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;    </script>&#xD;&#xA;&#xD;&#xA;Many Thanks in advance!";;added 30 characters in body
147110559;7016109;-1;5;c8d8760e-4ef9-4b86-9d65-c0149056eca3;2017-05-23 12:11:57.0;"**Edited on 5/14/12:**&#xD;&#xA;i was finally able to jump out of my laziness and prepare this to share the actual [EXCEL LIKE JQGRID implementation](http://jsfiddle.net/justcurious/qLQRA/). The cell selection may work weird on jsfiddle on few browsers but it should work normal on your development box. Have fun!!!!&#xD;&#xA;&#xD;&#xA;**Edited on 9/13/11:**&#xD;&#xA;This is my first use of JQGrid. I'm using ver 4.1.2. I spent few weeks to put together the excel like grid and the biggest challenge was to find the right information on how to use JQGrid. My current setup has lots of ajax updates and image galleries and use of jqgrid formatter but what I've put here is the main code to be able to use JQgrid with server side paging, excel like copy-paste and demonstration of few other features on jqgrid. This is just my way of giving back for all the help that I got from this community. &#xD;&#xA;&#xD;&#xA;For people who just jumped to JQGrid, you will soon find out that there is some challenge to using Textarea in jqgrid. you can find some solutions [here](http://www.trirand.com/blog/?page_id=393/bugs/celledit-textarea-newline-enter-will-close-cell/&value=5216&type=8&include=0&search=1&ret=all).&#xD;&#xA;&#xD;&#xA;**Original post:**  &#xD;&#xA;Just to give little update before putting my question....&#xD;&#xA;&#xD;&#xA;I've been able to come up with some additional features on the jqgrid that I'm using (after going through many forums) including: copy-paste back and forth from Excel to jqgrid, edit cell on keypress and dblclick, copy and paste multiple cells from one block to another on the same grid using mouse selection (from here https://stackoverflow.com/questions/1821074/using-javascript-to-sum-selected-cells-in-ie6)&#xD;&#xA;&#xD;&#xA;Most of the copy paste features works on IE only as of now. I save all the changes together on ""Save"" button click so all the updates on the cells are on screen only until user hits the ""Save"" button.&#xD;&#xA;&#xD;&#xA;Although, things are still in flux right now, I'd like to have the implementation design on paper now than later. I'm looking for an easy way to UNDO only the LAST change. I've been thinking of using jQuery's ""data()"" and ""removeData()"" methods to implement this but if there is anything already existing in jqgrid framework that would help, I would like to know. Any suggestions??&#xD;&#xA;&#xD;&#xA;    <style type=""text/css"">&#xD;&#xA;        .sel {background-color: #96B9DC !important; }&#xD;&#xA;        .altered {}&#xD;&#xA;    </style>&#xD;&#xA;    <script type=""text/javascript"">&#xD;&#xA;        var enableOnSelectEvent = false; // handle text selection&#xD;&#xA;    </script>&#xD;&#xA;    <div style=""width:100%; background-color:#FFF; border:1px solid #000;""><input id=""btnsavechanges"" value=""Save Changes"" style=""width:120px;"" class=""formbutton ui-corner-all"" type=""button"" onclick=""getChanges(); return false;"" /></div>&#xD;&#xA;    <table id=""grd_asset"" width=""100%"" onSelectStart=""return enableOnSelectEvent;""></table>&#xD;&#xA;    <div id=""pfrmac"" style='width:100%;'></div>&#xD;&#xA;    <input type=""hidden"" id=""hidSelected"" value="""" />&#xD;&#xA;&#xD;&#xA;    <!-- copy content from the grid cells -->&#xD;&#xA;    <input type=""hidden"" id=""hidCopiedText"" value="""" />&#xD;&#xA;&#xD;&#xA;    <!-- Start and End of cell selection -->&#xD;&#xA;    <input type=""hidden"" id=""hidStartCell"" value="""" />&#xD;&#xA;    <input type=""hidden"" id=""hidEndCell"" value="""" />&#xD;&#xA;&#xD;&#xA;    <!-- Start and End of last modified cell(s) -->&#xD;&#xA;    <input type=""hidden"" id=""hidModStartCell"" value="""" />&#xD;&#xA;    <input type=""hidden"" id=""hidModEndCell"" value="""" />&#xD;&#xA;&#xD;&#xA;    <script type=""text/javascript"">&#xD;&#xA;        /*************************************************/&#xD;&#xA;        /**************** Grid Utilities  ****************/&#xD;&#xA;        /*************************************************/&#xD;&#xA;        FnGrid = function () {&#xD;&#xA;            this.GridColumns = function () {&#xD;&#xA;                return assetGrid.jqGrid('getGridParam', 'colModel');&#xD;&#xA;            }&#xD;&#xA;            this.GetSelCells = function () {&#xD;&#xA;                return assetGrid.find(""td.sel"");&#xD;&#xA;            }&#xD;&#xA;            this.ClearSelection = function () {&#xD;&#xA;                assetGrid.find(""td"").removeClass(""sel"");&#xD;&#xA;            }&#xD;&#xA;            this.ClearSavedHistory = function () {&#xD;&#xA;                assetGrid.removeData();&#xD;&#xA;            }&#xD;&#xA;            this.ClearMarkedChanges = function () {&#xD;&#xA;                assetGrid.find(""tr"").removeClass(""altered"");&#xD;&#xA;            }&#xD;&#xA;            this.GetRowCells = function (cell) {&#xD;&#xA;                return cell.parent().children(""td"")&#xD;&#xA;            }&#xD;&#xA;            this.GetRowId = function (cell) {&#xD;&#xA;                var row = cell.closest('tr.jqgrow');&#xD;&#xA;                return row.attr('id');&#xD;&#xA;            }&#xD;&#xA;            this.GetRowIndex = function (cell) {&#xD;&#xA;                var cellrow = cell.parent();&#xD;&#xA;                return cellrow.parent().children(""tr"").index(cellrow);&#xD;&#xA;            }&#xD;&#xA;            this.GetColIndex = function (cell) {&#xD;&#xA;                return cell.parent().children(""td"").index(cell);&#xD;&#xA;            }&#xD;&#xA;            this.IsInEditMode = function () {&#xD;&#xA;                var savedRows = assetGrid.getGridParam('savedRow');&#xD;&#xA;                return (savedRows && savedRows.length > 0);&#xD;&#xA;            }&#xD;&#xA;            this.PutCellInEdit = function (cell, irow, icol, edit) {&#xD;&#xA;                assetGrid.editCell(irow, icol, edit);&#xD;&#xA;                // transfer focus to the input&#xD;&#xA;                var inp = $(cell).children(""input"")&#xD;&#xA;                if (inp && inp.length > 0) {&#xD;&#xA;                    $(inp[0]).val('');&#xD;&#xA;                    $(inp[0]).focus();&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;            this.HandleEditMode = function (cell, e) {&#xD;&#xA;                var ctrl = e.ctrlKey;&#xD;&#xA;                var alt = e.altKey;&#xD;&#xA;&#xD;&#xA;                var keyCode = (e.keyCode ? e.keyCode : e.which);&#xD;&#xA;                if (keyCode) {&#xD;&#xA;                    if (keyCode >= 32 && keyCode <= 126 && !ctrl && !alt) {&#xD;&#xA;                        // switch the cell to edit mode if not already&#xD;&#xA;                        if (!($(cell).hasClass(""edit-cell""))) {&#xD;&#xA;                            this.PutCellInEdit(cell, this.GetRowIndex($(cell)), this.GetColIndex($(cell)), true);                        }&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;                return true;&#xD;&#xA;            }&#xD;&#xA;            this.HandleInputNavigation = function (ele, evt) {&#xD;&#xA;                evt = window.event || evt;&#xD;&#xA;&#xD;&#xA;                switch (evt.keyCode) {&#xD;&#xA;                    // down arrow                   &#xD;&#xA;                    case 40:&#xD;&#xA;                        if (!$(ele).parent().hasClass(""altered""))&#xD;&#xA;                            $(ele).parent().addClass(""altered"");&#xD;&#xA;&#xD;&#xA;                        irow = this.GetRowIndex($(ele).parent());&#xD;&#xA;                        icol = this.GetColIndex($(ele).parent())&#xD;&#xA;                        var prevcell = irow + "","" + icol;&#xD;&#xA;                        $(""#hidModStartCell"").val(prevcell);&#xD;&#xA;                        $(""#hidModEndCell"").val(prevcell);&#xD;&#xA;&#xD;&#xA;                        downele = $(ele).parent()&#xD;&#xA;                                .parent()&#xD;&#xA;                                .next()&#xD;&#xA;                                .children(""td"")[this.GetColIndex($(ele).parent())];&#xD;&#xA;&#xD;&#xA;                        this.ClearSelection();&#xD;&#xA;                        assetGrid.editCell(this.GetRowIndex($(downele)), this.GetColIndex($(downele)), true);&#xD;&#xA;                        break;&#xD;&#xA;&#xD;&#xA;                    // up arrow                   &#xD;&#xA;                    case 38:&#xD;&#xA;                        if (!$(ele).parent().hasClass(""altered""))&#xD;&#xA;                            $(ele).parent().addClass(""altered"");&#xD;&#xA;&#xD;&#xA;                        irow = this.GetRowIndex($(ele).parent());&#xD;&#xA;                        icol = this.GetColIndex($(ele).parent())&#xD;&#xA;                        var prevcell = irow + "","" + icol;&#xD;&#xA;                        $(""#hidModStartCell"").val(prevcell);&#xD;&#xA;                        $(""#hidModEndCell"").val(prevcell);&#xD;&#xA;&#xD;&#xA;                        topele = $(ele).parent()&#xD;&#xA;                                .parent()&#xD;&#xA;                                .prev()&#xD;&#xA;                                .children(""td"")[this.GetColIndex($(ele).parent())];&#xD;&#xA;&#xD;&#xA;                        if (this.GetRowIndex($(topele)) <= 0) break;&#xD;&#xA;&#xD;&#xA;                        this.ClearSelection();&#xD;&#xA;                        assetGrid.editCell(this.GetRowIndex($(topele)), this.GetColIndex($(topele)), true);&#xD;&#xA;                        break;&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        var autocomp = new AutoCompleteRequest();&#xD;&#xA;        var lastSel = """";&#xD;&#xA;        var assetGrid = $('#grd_asset');&#xD;&#xA;        var start = null;&#xD;&#xA;        var fnassetgrid = new FnGrid();&#xD;&#xA;        var lastSel = -1;&#xD;&#xA;&#xD;&#xA;        function selectTo(cell) {&#xD;&#xA;            if (start == null)&#xD;&#xA;                return;&#xD;&#xA;            fnassetgrid.ClearSelection();&#xD;&#xA;            var stop = $(cell);&#xD;&#xA;            var tbl = start.closest(""table"");&#xD;&#xA;            var rs = tbl.children(""tbody"").children(""tr"");&#xD;&#xA;            var r0 = rs.index(start.parent()), c0 = fnassetgrid.GetColIndex(start);&#xD;&#xA;            var r1 = rs.index(stop.parent()), c1 = fnassetgrid.GetColIndex(stop);&#xD;&#xA;            var concat = """";&#xD;&#xA;            for (var i = r0; i <= r1; i++) {&#xD;&#xA;                var cells = $(rs.get(i)).children(""td"");&#xD;&#xA;                var rowid = 0;&#xD;&#xA;                for (var j = c0; j <= c1; j++) {&#xD;&#xA;                    var cell = $(cells.get(j));&#xD;&#xA;                    if (rowid == 0) rowid = fnassetgrid.GetRowId(cell);&#xD;&#xA;                    if (cell.is("":hidden"")) continue;&#xD;&#xA;                    cell.addClass(""sel"");&#xD;&#xA;                    concat += assetGrid.getCell(rowid, j) + ""\\t"";&#xD;&#xA;                }&#xD;&#xA;                if (concat.lastIndexOf(""\\t"") == concat.length - 1)&#xD;&#xA;                    concat = concat.substring(0, concat.lastIndexOf(""\\t""));&#xD;&#xA;&#xD;&#xA;                concat += escape(""\\r\\n"");&#xD;&#xA;            }&#xD;&#xA;            $(""#hidSelected"").val(concat.trim());&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        $(document).ready(function () {&#xD;&#xA;            /*************************************************/&#xD;&#xA;            /******************* THE GRID  *******************/&#xD;&#xA;            /*************************************************/&#xD;&#xA;            assetGrid.jqGrid({&#xD;&#xA;                ajaxGridOptions: { contentType: ""application/json; charset=utf-8"", type: ""POST"" },&#xD;&#xA;                url: '../api/yourservices.asmx/GetData',&#xD;&#xA;                datatype: 'json',&#xD;&#xA;                serializeGridData: function (postData) {&#xD;&#xA;                    if (postData.searchField === undefined) postData.searchField = null;&#xD;&#xA;                    if (postData.searchString === undefined) postData.searchString = null;&#xD;&#xA;                    if (postData.searchOper === undefined) postData.searchOper = null;&#xD;&#xA;                    if (postData.filters === undefined) postData.filters = null;&#xD;&#xA;                    return JSON.stringify(postData);&#xD;&#xA;                },&#xD;&#xA;                colNames: [' ', 'AssetId', 'Item#', 'Make', 'Description'],&#xD;&#xA;                colModel: [&#xD;&#xA;                    { name: 'ctrls', width: 80, fixed: true, sortable: false, resize: false, formatter: 'actions',&#xD;&#xA;                        formatoptions: { keys: true }&#xD;&#xA;                    },&#xD;&#xA;   		            { name: 'AssetID', label: 'AssetID', width: 65, key: true, hidden: true },&#xD;&#xA;   		            { name: 'Sequence', label: 'Item#', width: 50, align: ""right"", sorttype: 'int', sortable: true, editoptions: { dataEvents: [{ type: 'keydown', fn: function (e) { fnassetgrid.HandleInputNavigation(this, e); } }]} },&#xD;&#xA;   		            { name: 'Make', label: 'Make', width: 105, editable: true, edittype: 'text', editoptions: {&#xD;&#xA;   		                size: 18,&#xD;&#xA;   		                dataEvents: [{&#xD;&#xA;   		                    type: 'focus',&#xD;&#xA;   		                    fn: function (e) {&#xD;&#xA;   		                        $(this).autocomplete({&#xD;&#xA;   		                            source: autocomp.source,&#xD;&#xA;   		                            delay: autocomp.delay,&#xD;&#xA;   		                            minLength: autocomp.minLength&#xD;&#xA;   		                        });&#xD;&#xA;&#xD;&#xA;   		                        $(this).bind(""autocompleteopen"", autocomp.open);&#xD;&#xA;   		                        $(this).bind(""autocompleteclose"", autocomp.close);&#xD;&#xA;   		                    }&#xD;&#xA;   		                }]&#xD;&#xA;   		            }&#xD;&#xA;   		            },&#xD;&#xA;                    { name: 'Description', label: 'Description', fixed: false, editable: true, edittype: 'textarea', unformat: unfrmttextarea, editoptions: { rows: ""10"", cols: ""40""} }&#xD;&#xA;   	            ],&#xD;&#xA;                rowNum: 10, /* no of recs in a grid */&#xD;&#xA;                width: 1330,&#xD;&#xA;                rowList: [10, 20, 30], /* array to construct a select box element in the pager */&#xD;&#xA;                pager: '#pfrmac',&#xD;&#xA;                sortname: 'AssetID', /* initial sorting column */&#xD;&#xA;                viewrecords: true,  /* display the number of total records on the pager bar */&#xD;&#xA;                pginput: true,&#xD;&#xA;                sortorder: ""desc"",&#xD;&#xA;                cellEdit: true,&#xD;&#xA;                shrinkToFit: true,&#xD;&#xA;                jsonReader: {&#xD;&#xA;                    root: function (obj) { return obj.d.SearchResultSet; },&#xD;&#xA;                    page: function (obj) { return obj.d.PageNum; }, // current page of the query&#xD;&#xA;                    total: function (obj) { return obj.d.TotalPages; }, // total pages for the query&#xD;&#xA;                    records: function (obj) { return obj.d.TotalNoOfSearchResultItems; },&#xD;&#xA;                    id: ""AssetID"",&#xD;&#xA;                    repeatitems: false,&#xD;&#xA;                    userdata: function (obj) {&#xD;&#xA;                        extendUserSession();&#xD;&#xA;                        return { ""Error"": obj.d.Error, ""SearchResultSet"": obj.d.SearchResultSet }&#xD;&#xA;                    }&#xD;&#xA;                },&#xD;&#xA;                loadonce: false,&#xD;&#xA;                caption: ""Asset list"",&#xD;&#xA;                height: '100%',&#xD;&#xA;                cellsubmit: 'clientArray',&#xD;&#xA;                beforeEditCell: function (rowid, cellname, value, iRow, iCol) {&#xD;&#xA;                    enableOnSelectEvent = true;&#xD;&#xA;                },&#xD;&#xA;                beforeSaveCell: function (rowid, cellname, value, iRow, iCol) {&#xD;&#xA;                    savedrow = assetGrid.getGridParam('savedRow');&#xD;&#xA;                    if (savedrow && savedrow.length > 0) {&#xD;&#xA;                        if (savedrow[0].id == iRow && savedrow[0].ic == iCol && savedrow[0].v != value) {&#xD;&#xA;                            tr = $('#' + rowid);&#xD;&#xA;                            if (tr && !tr.hasClass(""altered"")) {&#xD;&#xA;                                tr.addClass(""altered"");&#xD;&#xA;                                there_are_unsaved_changes = 1;&#xD;&#xA;                            }&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                },&#xD;&#xA;                afterSaveCell: function (rowid, cellname, value, iRow, iCol) {&#xD;&#xA;                    enableOnSelectEvent = false;&#xD;&#xA;                },&#xD;&#xA;                afterRestoreCell: function (rowid, value, iRow, iCol) {&#xD;&#xA;                    enableOnSelectEvent = false;&#xD;&#xA;                },&#xD;&#xA;                loadComplete: function (data) {&#xD;&#xA;                    if (assetGrid.getGridParam('userData').Error && assetGrid.getGridParam('userData').Error != '')&#xD;&#xA;                        alert(""Error: "" + assetGrid.getGridParam('userData').Error);&#xD;&#xA;                },&#xD;&#xA;                gridComplete: function () {&#xD;&#xA;                    rowindex = 1;&#xD;&#xA;                    rows = assetGrid.find(""tr"");&#xD;&#xA;&#xD;&#xA;                    if (rows && rows.length > 1) {&#xD;&#xA;                        for (i = 1; i < rows.length; i++) {&#xD;&#xA;                            $(rows[i]).find(""td"").each(function (evt) {&#xD;&#xA;                                evt = window.event || evt;&#xD;&#xA;&#xD;&#xA;                                start = $(this);&#xD;&#xA;                                colindex = fnassetgrid.GetColIndex(start);&#xD;&#xA;                                if (colindex > 0) {&#xD;&#xA;                                    $(this).click(function () {&#xD;&#xA;                                        if (!($(this).hasClass(""edit-cell"")))&#xD;&#xA;                                            return false;&#xD;&#xA;                                    }).dblclick(function () {&#xD;&#xA;                                        if (!($(this).hasClass(""edit-cell""))) {&#xD;&#xA;                                            fnassetgrid.PutCellInEdit(this, fnassetgrid.GetRowIndex($(this)), fnassetgrid.GetColIndex($(this)), true);&#xD;&#xA;                                            return;&#xD;&#xA;                                        }&#xD;&#xA;                                        else&#xD;&#xA;                                            return true;&#xD;&#xA;                                    }).mousedown(function () {&#xD;&#xA;                                        if (fnassetgrid.IsInEditMode())&#xD;&#xA;                                            return true;&#xD;&#xA;                                        start = $(this);&#xD;&#xA;                                        selectTo(this);&#xD;&#xA;                                        return false;&#xD;&#xA;                                    }).mouseover(function () {&#xD;&#xA;                                        if (fnassetgrid.IsInEditMode()) return true;&#xD;&#xA;                                        selectTo(this);&#xD;&#xA;                                    }).mouseup(function () {&#xD;&#xA;                                        if (fnassetgrid.IsInEditMode()) return true;&#xD;&#xA;                                        selectTo(this);&#xD;&#xA;                                        $(""#hidEndCell"").val(fnassetgrid.GetColIndex($(this)));&#xD;&#xA;                                        start = null;&#xD;&#xA;                                    }).keypress(function (e) {&#xD;&#xA;                                        fnassetgrid.HandleEditMode(this, e);&#xD;&#xA;                                    });&#xD;&#xA;                                }&#xD;&#xA;                            });&#xD;&#xA;                            rowindex++;&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;            });&#xD;&#xA;&#xD;&#xA;            function unfrmttextarea(cellvalue, options, cellobject) {&#xD;&#xA;                return cellvalue;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            $(""body"").mouseup(function () {&#xD;&#xA;                start = null;&#xD;&#xA;            });&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;            /*************************************************/&#xD;&#xA;            /*********** Global KEYUP integration  ***********/&#xD;&#xA;            /*************************************************/&#xD;&#xA;            $(assetGrid).keyup(function (e) {&#xD;&#xA;                var ctrl = e.ctrlKey&#xD;&#xA;                var key = e.charCode || e.keyCode || 0;&#xD;&#xA;&#xD;&#xA;                if ((ctrl && key == 88) /* CUT */ || (ctrl && key == 67) /* COPY */ || (ctrl && key == 86) /* PASTE */ || (ctrl && key == 90) /* UNDO */) {&#xD;&#xA;&#xD;&#xA;                    if ((ctrl && key == 88) /* CUT */ || (ctrl && key == 67) /* COPY */) {&#xD;&#xA;                        if (fnassetgrid.IsInEditMode()) return true;&#xD;&#xA;                        CopyToClipboard(""hidSelected"");&#xD;&#xA;&#xD;&#xA;                        var selectedCells = fnassetgrid.GetSelCells();&#xD;&#xA;&#xD;&#xA;                        if (selectedCells && selectedCells.length > 0) {&#xD;&#xA;                            $(""#hidStartCell"").val(fnassetgrid.GetRowIndex($(selectedCells[0])) + "","" + fnassetgrid.GetColIndex($(selectedCells[0])));&#xD;&#xA;                            $(""#hidEndCell"").val(fnassetgrid.GetRowIndex($(selectedCells[selectedCells.length - 1])) + "","" + fnassetgrid.GetColIndex($(selectedCells[selectedCells.length - 1])));&#xD;&#xA;                            $(""#hidCopiedText"").val($(""#hidSelected"").val());&#xD;&#xA;                        }&#xD;&#xA;                        else {&#xD;&#xA;                            $(""#hidStartCell"").val('');&#xD;&#xA;                            $(""#hidEndCell"").val('');&#xD;&#xA;                        }&#xD;&#xA;&#xD;&#xA;                        if (ctrl && key == 88) /* CUT */{&#xD;&#xA;                            assetGrid.find(""td.sel"").each(function () {&#xD;&#xA;                                row = $(this).closest('tr.jqgrow');&#xD;&#xA;                                rowId = row.attr('id');&#xD;&#xA;                                assetGrid.setCell(rowId, (fnassetgrid.GridColumns())[fnassetgrid.GetColIndex($(this))].name, '', '', '', true);&#xD;&#xA;                            });&#xD;&#xA;                            fnassetgrid.ClearSelection();&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                    else if (ctrl && key == 86) /* PASTE */{&#xD;&#xA;                        var clipboardata = getClipboardData();&#xD;&#xA;                        if (get_objtype(clipboardata) != ""[object String]"") {&#xD;&#xA;                            alert(""The data you are pasting either is empty or incompatible"");&#xD;&#xA;                            return false;&#xD;&#xA;                        }&#xD;&#xA;&#xD;&#xA;                        pasteinfo(assetGrid, clipboardata);&#xD;&#xA;                    }&#xD;&#xA;                    else if ((ctrl && key == 90) /* UNDO */) {&#xD;&#xA;                    // TBD : No jqgrid features available to get the help &#xD;&#xA;                    }&#xD;&#xA;                    return false; // prevent bubbling&#xD;&#xA;                }&#xD;&#xA;                else&#xD;&#xA;                    return true; // let it bubble&#xD;&#xA;            });&#xD;&#xA;        });&#xD;&#xA;&#xD;&#xA;        &#xD;&#xA;        /********************************************************************/&#xD;&#xA;        /*********** Method to retrieve and submit altered asset information ***********/&#xD;&#xA;        /********************************************************************/&#xD;&#xA;        function getChanges() {&#xD;&#xA;            var editedxml = ""<?xml version='1.0' encoding='utf-8' ?\\>\\n"";&#xD;&#xA;            editedxml += ""<ASSETS>\\n"";&#xD;&#xA;            assetGrid.find(""tr.altered"").each(function () {&#xD;&#xA;                editedxml += ""<ASSET>\\n"";&#xD;&#xA;                $(this).children(""td"").each(function () {&#xD;&#xA;                    colindex = fnassetgrid.GetColIndex($(this));                    &#xD;&#xA;                    if (colindex > 0) {&#xD;&#xA;                        editedxml += ""<"" + (fnassetgrid.GridColumns())[colindex].name.toUpperCase() + "">"" + $(this).text().trim() + ""</"" + (fnassetgrid.GridColumns())[colindex].name.toUpperCase() + "">\\n"";&#xD;&#xA;                    }&#xD;&#xA;                })&#xD;&#xA;                editedxml += ""</ASSET>\\n"";&#xD;&#xA;            })&#xD;&#xA;            editedxml += ""</ASSETS>"";&#xD;&#xA;&#xD;&#xA;            fnassetgrid.ClearMarkedChanges();&#xD;&#xA;            &#xD;&#xA;            //TBD: submit XML to an AJAX service&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        var _browserPasteData = null;&#xD;&#xA;        function getClipboardData() {&#xD;&#xA;            if (_browserPasteData) // Safari/Chrome logic&#xD;&#xA;                return _browserPasteData;&#xD;&#xA;            if (window.clipboardData) // IE logic&#xD;&#xA;            {&#xD;&#xA;                return window.clipboardData.getData(""Text"");&#xD;&#xA;            }&#xD;&#xA;            else if (typeof (netscape) != ""undefined"") // Firefox logic&#xD;&#xA;            {&#xD;&#xA;                netscape.security.PrivilegeManager.enablePrivilege('UniversalXPConnect');&#xD;&#xA;                var clip = Components.classes[""@mozilla.org/widget/clipboard;1""].createInstance(Components.interfaces.nsIClipboard);&#xD;&#xA;                var trans = Components.classes[""@mozilla.org/widget/transferable;1""].createInstance(Components.interfaces.nsITransferable);&#xD;&#xA;                trans.addDataFlavor(""text/unicode"");&#xD;&#xA;                clip.getData(trans, clip.kGlobalClipboard);&#xD;&#xA;                var str = new Object();&#xD;&#xA;                var len = new Object();&#xD;&#xA;                trans.getTransferData(""text/unicode"", str, len);&#xD;&#xA;                if (str)&#xD;&#xA;                    return str.value.QueryInterface(Components.interfaces.nsISupportsString).toString();&#xD;&#xA;            }&#xD;&#xA;            return null;&#xD;&#xA;        }&#xD;&#xA;        // In Safari/Chrome the clipboard data can only be accessed&#xD;&#xA;        // from the onpaste event. In this sample the event is handled &#xD;&#xA;        // off the body element: <body onpaste=""browserPaste(event)"">&#xD;&#xA;        function browserPaste(e) {&#xD;&#xA;            _browserPasteData = e.clipboardData && e.clipboardData.getData ?&#xD;&#xA;                e.clipboardData.getData('text/plain') : null;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        function pasteinfo(objGrid, info) {&#xD;&#xA;            selectedCells = fnassetgrid.GetSelCells();&#xD;&#xA;            firstcell = $(selectedCells[0]);&#xD;&#xA;            firstselectedcolindex = fnassetgrid.GetColIndex(firstcell);&#xD;&#xA;            rowcellscount = fnassetgrid.GetRowCells(firstcell).length;&#xD;&#xA;&#xD;&#xA;            if (firstselectedcolindex == 0) {&#xD;&#xA;                alert(""You cannot paste into an non-editable column"");&#xD;&#xA;                return false;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            if (selectedCells && selectedCells.length > 0) {&#xD;&#xA;                // if the clipboard info is from the asset grid&#xD;&#xA;                if (info && info == $(""#hidCopiedText"").val()) {&#xD;&#xA;                    // get the index values of last copied source cell&#xD;&#xA;                    hidStartCell = -1;&#xD;&#xA;                    if ($(""#hidStartCell"").val() != '' && $(""#hidStartCell"").val().split(',').length > 1) {&#xD;&#xA;                        hidStartCell = $(""#hidStartCell"").val().split(',')[1];&#xD;&#xA;                    }&#xD;&#xA;&#xD;&#xA;                    // if columns of source and dest do not match, throw warning&#xD;&#xA;                    if (firstselectedcolindex != hidStartCell) {&#xD;&#xA;                        if (!confirm(""The data you are pasting comes from a different set of \\ncolumns than those that you are pasting into.\\n\\nAre you sure you want to paste into these columns?""))&#xD;&#xA;                            return false;&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;&#xD;&#xA;                $(""#hidModStartCell"").val(fnassetgrid.GetRowIndex(firstcell) + "","" + firstselectedcolindex);&#xD;&#xA;&#xD;&#xA;                var prevcell = null;&#xD;&#xA;                // remove the last ""line break"" and break clipboard info into lines&#xD;&#xA;                datarows = unescape(info).replace(/\\r\\n$/, '').split(""\\r\\n"");&#xD;&#xA;                if (datarows && datarows.length > 0) {&#xD;&#xA;                    currentrow = firstcell.parent();&#xD;&#xA;                    currentcell = firstcell;&#xD;&#xA;&#xD;&#xA;                    // if the source is a single cell, allow it to be pasted over multiple cells&#xD;&#xA;                    if (datarows.length == 1 && datarows[0].split(""\\t"").length == 1) {&#xD;&#xA;                        copydata = datarows[0].split(""\\t"");&#xD;&#xA;&#xD;&#xA;                        $.each(selectedCells, function (index, value) {&#xD;&#xA;                            prevcell = $(value);&#xD;&#xA;                            if (!prevcell.parent().hasClass(""altered"")) {&#xD;&#xA;                                prevcell.parent().addClass(""altered"");&#xD;&#xA;                                there_are_unsaved_changes = 1;&#xD;&#xA;                            }&#xD;&#xA;                            var rowId = prevcell.closest('tr.jqgrow').attr('id');&#xD;&#xA;                            var icol = fnassetgrid.GetColIndex(prevcell);&#xD;&#xA;                            assetGrid.setCell(rowId, (fnassetgrid.GridColumns())[icol].name, copydata[0], '', '', true);&#xD;&#xA;                        });&#xD;&#xA;                    }&#xD;&#xA;                    else {&#xD;&#xA;                        for (i = 0; i < datarows.length && currentrow.length > 0; ++i) {&#xD;&#xA;                            if (datarows[i] == '') break;&#xD;&#xA;                            // break each lines into columns&#xD;&#xA;                            datarows[i] = datarows[i].split(""\\t"");&#xD;&#xA;                            var row = null;&#xD;&#xA;                            var rowId = null;&#xD;&#xA;                            var rowindex = null;&#xD;&#xA;                            for (j = 0; j < datarows[i].length && currentcell.length > 0; ++j) {&#xD;&#xA;                                // mark the row as altered&#xD;&#xA;                                if (!currentcell.parent().hasClass(""altered"")) {&#xD;&#xA;                                    currentcell.parent().addClass(""altered"");&#xD;&#xA;                                    there_are_unsaved_changes = 1;&#xD;&#xA;                                }&#xD;&#xA;                                // for each outer iteration get the rowid&#xD;&#xA;                                if (row == null) {&#xD;&#xA;                                    row = (currentcell).closest('tr.jqgrow');&#xD;&#xA;                                    rowId = row.attr('id');&#xD;&#xA;                                }&#xD;&#xA;                                var icol = fnassetgrid.GetColIndex(currentcell);&#xD;&#xA;                                assetGrid.setCell(rowId, (fnassetgrid.GridColumns())[icol].name, datarows[i][j], '', '', true);&#xD;&#xA;                                prevcell = currentcell;&#xD;&#xA;&#xD;&#xA;                                // advance to the next visible cell -- only consider pasting into visible columns&#xD;&#xA;                                do {&#xD;&#xA;                                    currentcell = currentcell.next();&#xD;&#xA;                                }&#xD;&#xA;                                while ((currentcell.length > 0) && currentcell.is("":hidden""))&#xD;&#xA;                            }&#xD;&#xA;&#xD;&#xA;                            currentrow = currentrow.next();&#xD;&#xA;                            currentcell = $(currentrow.children(""td"")[firstselectedcolindex]);&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            if (prevcell.length > 0)&#xD;&#xA;                $(""#hidModEndCell"").val(fnassetgrid.GetRowIndex(prevcell) + "","" + fnassetgrid.GetColIndex(prevcell));&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;    </script>&#xD;&#xA;&#xD;&#xA;Many Thanks in advance!";;replaced http://stackoverflow.com/ with https://stackoverflow.com/
