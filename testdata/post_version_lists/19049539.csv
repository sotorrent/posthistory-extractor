Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
48155213;19049539;1281750;2;6d5d8088-53da-4487-8dad-67a737fa9a69;2013-09-27 11:25:06.0;"Hold a reference of Activity in your fragment to handle that nullpointerexception. 

Here is an example of a fragment. 

    public class YourFragment extends Fragment {
    
    	private Activity mActivity;
    
    	@Override
    	public void onAttach(Activity activity) {
    		super.onAttach(activity);
    		mActivity = activity;
    	}
    	
    	@Override
    	public void onResume() {
    		super.onResume();
    		// BIND sensor here with mActivity, 
            // could also be done in other fragment lifecycle events, 
            // depends on how you handle configChanges
    
    	}
    	
    	@Override
    	public void onPause() {
    		super.onPause();
    		// UNBIND sensor here from mActivity, 
            // could also be done in other fragment lifecycle events, 
            // depends on how you handle configChanges
    	}
    
    }
        

Debug that code do determine if you should handle the binding there or in another method e.g. onCreate of a fragment. I have not tested this code for your purpose. ";;
48175567;19049539;1281750;5;e29daee7-8df4-46a0-856c-196f6a135f59;2013-09-27 16:13:15.0;"Hold a reference of Activity in your fragment to handle that nullpointerexception. 

Here is an example of a fragment. 

    public class YourFragment extends Fragment {
    
    	private Activity mActivity;
    
    	@Override
    	public void onAttach(Activity activity) {
    		super.onAttach(activity);
    		mActivity = activity;
    	}
    	
    	@Override
    	public void onResume() {
    		super.onResume();
    		// BIND sensor here with mActivity, 
            // could also be done in other fragment lifecycle events, 
            // depends on how you handle configChanges
    
    	}
    	
    	@Override
    	public void onPause() {
    		super.onPause();
    		// UNBIND sensor here from mActivity, 
            // could also be done in other fragment lifecycle events, 
            // depends on how you handle configChanges
    	}
    
    }
        

Debug that code do determine if you should handle the binding there or in another method e.g. onCreate of a fragment. I have not tested this code for your purpose. 

Edit: 
This is indeed as commented below a dirty fix and could easily resolve into exceptions in some cases. I just wanted to show how you can use fragment lifecycle methods to bind and unbind sensors with a reference to activity. I'm currently learning fragments for quite some time but still don't understand them thoroughly. I advice you to take a look at the source of [Fragment][1] and other components involved. This is the only place were fragments are documented thoroughly hence the documentation on reference in my opinion isn't that explanatory.  

Some of the options regarding null value Activity:

 - If you want to be completely sure that getActivity doesn't return null you should wait for [onActivityCreated][2] to be called.  This method tells the fragment that its activity has
 completed its own Activity.onCreate(). After this getActivity() will not return null until initState() gets called by the FragmentManager.


         // Called by the fragment manager once this fragment has been removed,
         // so that we don't have any left-over state if the application decides
         // to re-use the instance.  This only clears state that the framework
         // internally manages, not things the application sets.
         
        void initState() {
            mIndex = -1;
            mWho = null;
            mAdded = false;
            mRemoving = false;
            mResumed = false;
            mFromLayout = false;
            mInLayout = false;
            mRestored = false;
            mBackStackNesting = 0;
            mFragmentManager = null;
            mActivity = null;
            mFragmentId = 0;
            mContainerId = 0;
            mTag = null;
            mHidden = false;
            mDetached = false;
            mRetaining = false;
            mLoaderManager = null;
            mLoadersStarted = false;
            mCheckedForLoaderManager = false;
        }

 
 - Before you call getActivity you can always check if activity isn't null by calling isAdded() method. As you can see below this method checks if mActivity isn't null. Optionally you can create a recursive function with Handler.postDelayed that tries to return an non null Activity in intervalls (you should add a max try counter). But this is also a dirty trick.   


       
        //Return true if the fragment is currently added to its activity.
        
        final public boolean isAdded() {
            return mActivity != null && mAdded;
        }


  







 


  [1]: http://grepcode.com/file_/repository.grepcode.com/java/ext/com.google.android/android/4.0.1_r1/android/app/Fragment.java/?v=source
  [2]: http://developer.android.com/images/fragment_lifecycle.png
";;added 2770 characters in body
