Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
126371439;39313130;2801559;2;522eb738-9028-49da-be80-40f69e9e70eb;2016-09-04 02:54:39.0;"You can use `progress`, `loadend` events, `Promise`. `javascript` at stacksnippets reads each byte of `File` object as `ArrayBuffer`, then reads stream as text onto `<canvas>` element which is rendered as `data URI` at `poster` of `<video>` element&#xD;&#xA;&#xD;&#xA;<!-- begin snippet: js hide: false console: true babel: false -->&#xD;&#xA;&#xD;&#xA;<!-- language: lang-html -->&#xD;&#xA;&#xD;&#xA;    <!DOCTYPE html>&#xD;&#xA;    <html>&#xD;&#xA;&#xD;&#xA;    <head>&#xD;&#xA;    </head>&#xD;&#xA;&#xD;&#xA;    <body>&#xD;&#xA;      <progress value=""0"" min=""0""></progress>&#xD;&#xA;      <video poster="""" style=""width:400px;""></video>&#xD;&#xA;      <script>&#xD;&#xA;        var str = ""abcdefghijklmnopqrstuvwxyz"";&#xD;&#xA;        var type = ""application/octet-stream"";&#xD;&#xA;        var file = new File([str], {&#xD;&#xA;          type: type&#xD;&#xA;        });&#xD;&#xA;        var complete = false;&#xD;&#xA;        var rendering = true;&#xD;&#xA;        var stream;&#xD;&#xA;        var delay = 100;&#xD;&#xA;        var chunk = 0;&#xD;&#xA;        var chunkSize = 1;&#xD;&#xA;        var filename = ""file.txt"";&#xD;&#xA;        var video = document.querySelector(""video"");&#xD;&#xA;        var progress = document.querySelector(""progress"");&#xD;&#xA;        progress.max = str.length;&#xD;&#xA;        var canvas = document.createElement(""canvas"");&#xD;&#xA;        var ctx = canvas.getContext(""2d"");&#xD;&#xA;        canvas.width = ""420"";&#xD;&#xA;        canvas.height = ""100"";&#xD;&#xA;        ctx.beginPath();&#xD;&#xA;        ctx.fillStyle = ""#888800"";&#xD;&#xA;        ctx.rect(0, 0, 420, 300);&#xD;&#xA;        ctx.fill();&#xD;&#xA;        ctx.font = ""32px Baskerville Old Face"";&#xD;&#xA;&#xD;&#xA;        var reader = new FileReader();&#xD;&#xA;        var dfd = Promise.resolve();&#xD;&#xA;&#xD;&#xA;        function processStream() {&#xD;&#xA;          var data = file.slice(chunk, chunk + chunkSize);&#xD;&#xA;          stream = new File(stream ? [stream, data] : [data], filename, {&#xD;&#xA;            type: type,&#xD;&#xA;            lastModifiedDate: new Date()&#xD;&#xA;          });&#xD;&#xA;          ++chunk;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        function handleFile(e) {&#xD;&#xA;          processStream()&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        function handleRead(e) {&#xD;&#xA;          if (stream.size <= file.size && chunk < file.size + 1) {&#xD;&#xA;            setTimeout(function() {&#xD;&#xA;              reader.readAsArrayBuffer(stream)&#xD;&#xA;            }, delay);&#xD;&#xA;          } else {&#xD;&#xA;            progress.value = stream.size;      &#xD;&#xA;            if (stream.size === file.size) {&#xD;&#xA;              reader.removeEventListener(""progress"", handleProgress);&#xD;&#xA;              dfd.then(function() {&#xD;&#xA;                complete = true;&#xD;&#xA;                alert(""stream complete"");&#xD;&#xA;                console.log(stream);&#xD;&#xA;              })&#xD;&#xA;            }&#xD;&#xA;          }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        function handleProgress(e) {&#xD;&#xA;          if (!stream) processStream();&#xD;&#xA;          (function(_reader, _stream) {&#xD;&#xA;            _reader.onloadend = function() {&#xD;&#xA;              if (_reader.result.length < file.size && !complete) {&#xD;&#xA;                console.log(""stream as text:"", _reader.result, stream.size);&#xD;&#xA;                ctx.clearRect(0, 0, canvas.width, canvas.height);&#xD;&#xA;                ctx.beginPath();&#xD;&#xA;                ctx.fillStyle = ""#888800"";&#xD;&#xA;                ctx.rect(0, 0, 420, 100);&#xD;&#xA;                ctx.fill()&#xD;&#xA;                ctx.fillStyle = ""#000000"";&#xD;&#xA;                ctx.fillText(_reader.result, 15, 50);&#xD;&#xA;                video.setAttribute(""poster"", canvas.toDataURL());&#xD;&#xA;              } else if (_reader.result.length === file.size &#xD;&#xA;                        && complete && rendering) {&#xD;&#xA;                complete = false;&#xD;&#xA;                dfd.then(function() {&#xD;&#xA;                  console.log(""stream as text complete:"", _reader.result);&#xD;&#xA;                  alert(""canvas rendering complete"");&#xD;&#xA;                  rendering = false;&#xD;&#xA;                });&#xD;&#xA;              }&#xD;&#xA;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            _reader.readAsText(_stream);&#xD;&#xA;&#xD;&#xA;          }(new FileReader(), stream));&#xD;&#xA;&#xD;&#xA;          progress.value = stream.size;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        reader.addEventListener(""load"", handleFile);&#xD;&#xA;&#xD;&#xA;        reader.addEventListener(""loadend"", handleRead);&#xD;&#xA;&#xD;&#xA;        reader.addEventListener(""progress"", handleProgress);&#xD;&#xA;&#xD;&#xA;        reader.readAsArrayBuffer(file);&#xD;&#xA;      </script>&#xD;&#xA;    </body>&#xD;&#xA;&#xD;&#xA;    </html>&#xD;&#xA;&#xD;&#xA;<!-- end snippet -->&#xD;&#xA;&#xD;&#xA;";;
126371537;39313130;2801559;5;ead2dcae-76e6-4a56-a82f-6806e13b2392;2016-09-04 03:02:38.0;"You can use `progress`, `loadend` events, `Promise`. `javascript` at stacksnippets reads each byte of `File` object as `ArrayBuffer`, then reads stream as text onto `<canvas>` element which is rendered as `data URI` at `poster` of `<video>` element&#xD;&#xA;&#xD;&#xA;<!-- begin snippet: js hide: false console: true babel: false -->&#xD;&#xA;&#xD;&#xA;<!-- language: lang-html -->&#xD;&#xA;&#xD;&#xA;    <!DOCTYPE html>&#xD;&#xA;    <html>&#xD;&#xA;&#xD;&#xA;    <head>&#xD;&#xA;    </head>&#xD;&#xA;&#xD;&#xA;    <body>&#xD;&#xA;      <progress value=""0"" min=""0""></progress>&#xD;&#xA;      <video poster="""" style=""width:400px;""></video>&#xD;&#xA;      <script>&#xD;&#xA;        var str = ""abcdefghijklmnopqrstuvwxyz"";&#xD;&#xA;        var type = ""application/octet-stream"";&#xD;&#xA;        var file = new File([str], {&#xD;&#xA;          type: type&#xD;&#xA;        });&#xD;&#xA;        var complete = false;&#xD;&#xA;        var rendering = true;&#xD;&#xA;        var stream;&#xD;&#xA;        var delay = 100;&#xD;&#xA;        var chunk = 0;&#xD;&#xA;        var chunkSize = 1;&#xD;&#xA;        var filename = ""file.txt"";&#xD;&#xA;        var video = document.querySelector(""video"");&#xD;&#xA;        var progress = document.querySelector(""progress"");&#xD;&#xA;        progress.max = str.length;&#xD;&#xA;        var canvas = document.createElement(""canvas"");&#xD;&#xA;        var ctx = canvas.getContext(""2d"");&#xD;&#xA;        canvas.width = ""420"";&#xD;&#xA;        canvas.height = ""100"";&#xD;&#xA;        ctx.beginPath();&#xD;&#xA;        ctx.fillStyle = ""#888800"";&#xD;&#xA;        ctx.rect(0, 0, 420, 300);&#xD;&#xA;        ctx.fill();&#xD;&#xA;        ctx.font = ""32px Baskerville Old Face"";&#xD;&#xA;&#xD;&#xA;        var reader = new FileReader();&#xD;&#xA;        var dfd = Promise.resolve();&#xD;&#xA;&#xD;&#xA;        function processStream() {&#xD;&#xA;          var data = file.slice(chunk, chunk + chunkSize);&#xD;&#xA;          stream = new File(stream ? [stream, data] : [data], filename, {&#xD;&#xA;            type: type,&#xD;&#xA;            lastModifiedDate: new Date()&#xD;&#xA;          });&#xD;&#xA;          ++chunk;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        function handleFile(e) {&#xD;&#xA;          processStream()&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        function handleRead(e) {&#xD;&#xA;          if (stream.size <= file.size && chunk < file.size + 1) {&#xD;&#xA;            setTimeout(function() {&#xD;&#xA;              reader.readAsArrayBuffer(stream)&#xD;&#xA;            }, delay);&#xD;&#xA;          } else {&#xD;&#xA;            progress.value = stream.size;      &#xD;&#xA;            if (stream.size === file.size) {&#xD;&#xA;              reader.removeEventListener(""progress"", handleProgress);&#xD;&#xA;              dfd.then(function() {&#xD;&#xA;                complete = true;&#xD;&#xA;                alert(""stream complete"");&#xD;&#xA;                console.log(stream);&#xD;&#xA;              })&#xD;&#xA;            }&#xD;&#xA;          }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        function handleProgress(e) {&#xD;&#xA;          if (!stream) processStream();&#xD;&#xA;          (function(_reader, _stream) {&#xD;&#xA;            _reader.onloadend = function() {&#xD;&#xA;              if (rendering) {&#xD;&#xA;                console.log(""stream as text:"", _reader.result, stream.size);&#xD;&#xA;                ctx.clearRect(0, 0, canvas.width, canvas.height);&#xD;&#xA;                ctx.beginPath();&#xD;&#xA;                ctx.fillStyle = ""#888800"";&#xD;&#xA;                ctx.rect(0, 0, 420, 100);&#xD;&#xA;                ctx.fill()&#xD;&#xA;                ctx.fillStyle = ""#000000"";&#xD;&#xA;                ctx.fillText(_reader.result, 15, 50);&#xD;&#xA;                video.setAttribute(""poster"", canvas.toDataURL());&#xD;&#xA;              }&#xD;&#xA;              if (_reader.result.length === file.size && complete && rendering) {&#xD;&#xA;                dfd.then(function() {&#xD;&#xA;                  alert(""canvas rendering complete"");&#xD;&#xA;                  rendering = false;&#xD;&#xA;                });&#xD;&#xA;              }             &#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            _reader.readAsText(_stream);&#xD;&#xA;&#xD;&#xA;          }(new FileReader(), stream));&#xD;&#xA;&#xD;&#xA;          progress.value = stream.size;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        reader.addEventListener(""load"", handleFile);&#xD;&#xA;&#xD;&#xA;        reader.addEventListener(""loadend"", handleRead);&#xD;&#xA;&#xD;&#xA;        reader.addEventListener(""progress"", handleProgress);&#xD;&#xA;&#xD;&#xA;        reader.readAsArrayBuffer(file);&#xD;&#xA;      </script>&#xD;&#xA;    </body>&#xD;&#xA;&#xD;&#xA;    </html>&#xD;&#xA;&#xD;&#xA;<!-- end snippet -->&#xD;&#xA;&#xD;&#xA;";;deleted 122 characters in body
126371666;39313130;2801559;5;4fca0152-b389-48d6-812d-aa474f72669c;2016-09-04 03:09:40.0;"You can use `progress`, `loadend` events. `javascript` at stacksnippets reads each byte of `File` object as `ArrayBuffer`, then reads stream as text onto `<canvas>` element which is rendered as `data URI` at `poster` of `<video>` element&#xD;&#xA;&#xD;&#xA;<!-- begin snippet: js hide: false console: true babel: false -->&#xD;&#xA;&#xD;&#xA;<!-- language: lang-html -->&#xD;&#xA;&#xD;&#xA;    <!DOCTYPE html>&#xD;&#xA;    <html>&#xD;&#xA;&#xD;&#xA;    <head>&#xD;&#xA;    </head>&#xD;&#xA;&#xD;&#xA;    <body>&#xD;&#xA;      <progress value=""0"" min=""0""></progress>&#xD;&#xA;      <video poster="""" style=""width:400px;""></video>&#xD;&#xA;      <script>&#xD;&#xA;        var str = ""abcdefghijklmnopqrstuvwxyz"";&#xD;&#xA;        var type = ""application/octet-stream"";&#xD;&#xA;        var file = new File([str], {&#xD;&#xA;          type: type&#xD;&#xA;        });&#xD;&#xA;        var complete = false;&#xD;&#xA;        var rendering = true;&#xD;&#xA;        var stream;&#xD;&#xA;        var delay = 100;&#xD;&#xA;        var chunk = 0;&#xD;&#xA;        var chunkSize = 1;&#xD;&#xA;        var filename = ""file.txt"";&#xD;&#xA;        var video = document.querySelector(""video"");&#xD;&#xA;        var progress = document.querySelector(""progress"");&#xD;&#xA;        progress.max = str.length;&#xD;&#xA;        var canvas = document.createElement(""canvas"");&#xD;&#xA;        var ctx = canvas.getContext(""2d"");&#xD;&#xA;        canvas.width = ""420"";&#xD;&#xA;        canvas.height = ""100"";&#xD;&#xA;        ctx.beginPath();&#xD;&#xA;        ctx.fillStyle = ""#888800"";&#xD;&#xA;        ctx.rect(0, 0, 420, 300);&#xD;&#xA;        ctx.fill();&#xD;&#xA;        ctx.font = ""32px Baskerville Old Face"";&#xD;&#xA;&#xD;&#xA;        var reader = new FileReader();&#xD;&#xA;&#xD;&#xA;        function processStream() {&#xD;&#xA;          var data = file.slice(chunk, chunk + chunkSize);&#xD;&#xA;          stream = new File(stream ? [stream, data] : [data], filename, {&#xD;&#xA;            type: type,&#xD;&#xA;            lastModifiedDate: new Date()&#xD;&#xA;          });&#xD;&#xA;          ++chunk;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        function handleFile(e) {&#xD;&#xA;          processStream()&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        function handleRead(e) {&#xD;&#xA;          if (stream.size <= file.size && chunk < file.size + 1) {&#xD;&#xA;            setTimeout(function() {&#xD;&#xA;              reader.readAsArrayBuffer(stream)&#xD;&#xA;            }, delay);&#xD;&#xA;          } else {&#xD;&#xA;            progress.value = stream.size;      &#xD;&#xA;            if (stream.size === file.size) {&#xD;&#xA;              reader.removeEventListener(""progress"", handleProgress);&#xD;&#xA;                complete = true;&#xD;&#xA;                alert(""stream complete"");&#xD;&#xA;                console.log(stream);&#xD;&#xA;            }&#xD;&#xA;          }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        function handleProgress(e) {&#xD;&#xA;          if (!stream) processStream();&#xD;&#xA;          (function(_reader, _stream) {&#xD;&#xA;            _reader.onloadend = function() {&#xD;&#xA;              if (rendering) {&#xD;&#xA;                console.log(""stream as text:"", _reader.result, stream.size);&#xD;&#xA;                ctx.clearRect(0, 0, canvas.width, canvas.height);&#xD;&#xA;                ctx.beginPath();&#xD;&#xA;                ctx.fillStyle = ""#888800"";&#xD;&#xA;                ctx.rect(0, 0, 420, 100);&#xD;&#xA;                ctx.fill()&#xD;&#xA;                ctx.fillStyle = ""#000000"";&#xD;&#xA;                ctx.fillText(_reader.result, 15, 50);&#xD;&#xA;                video.setAttribute(""poster"", canvas.toDataURL());&#xD;&#xA;              }&#xD;&#xA;              if (_reader.result.length === file.size && complete && rendering) {&#xD;&#xA;                  alert(""canvas rendering complete"");&#xD;&#xA;                  rendering = false;&#xD;&#xA;              }             &#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            _reader.readAsText(_stream);&#xD;&#xA;&#xD;&#xA;          }(new FileReader(), stream));&#xD;&#xA;&#xD;&#xA;          progress.value = stream.size;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        reader.addEventListener(""load"", handleFile);&#xD;&#xA;&#xD;&#xA;        reader.addEventListener(""loadend"", handleRead);&#xD;&#xA;&#xD;&#xA;        reader.addEventListener(""progress"", handleProgress);&#xD;&#xA;&#xD;&#xA;        reader.readAsArrayBuffer(file);&#xD;&#xA;      </script>&#xD;&#xA;    </body>&#xD;&#xA;&#xD;&#xA;    </html>&#xD;&#xA;&#xD;&#xA;<!-- end snippet -->&#xD;&#xA;&#xD;&#xA;";;deleted 164 characters in body
126371852;39313130;2801559;5;ff971c40-d3d4-42ce-a507-5fb1916a41da;2016-09-04 03:20:55.0;"You can use `progress`, `loadend` events. `javascript` at stacksnippets reads `File` object as `ArrayBuffer`, then reads each byte of `File` as text onto `<canvas>` element which is rendered as `data URI` at `poster` of `<video>` element&#xD;&#xA;&#xD;&#xA;<!-- begin snippet: js hide: false console: true babel: false -->&#xD;&#xA;&#xD;&#xA;<!-- language: lang-html -->&#xD;&#xA;&#xD;&#xA;    <!DOCTYPE html>&#xD;&#xA;    <html>&#xD;&#xA;&#xD;&#xA;    <head>&#xD;&#xA;    </head>&#xD;&#xA;&#xD;&#xA;    <body>&#xD;&#xA;      <progress value=""0"" min=""0""></progress>&#xD;&#xA;      <video poster="""" style=""width:400px;""></video>&#xD;&#xA;      <script>&#xD;&#xA;        var str = ""abcdefghijklmnopqrstuvwxyz"";&#xD;&#xA;        var type = ""application/octet-stream"";&#xD;&#xA;        var file = new File([str], {&#xD;&#xA;          type: type&#xD;&#xA;        });&#xD;&#xA;        var complete = false;&#xD;&#xA;        var rendering = true;&#xD;&#xA;        var stream;&#xD;&#xA;        var delay = 100;&#xD;&#xA;        var chunk = 0;&#xD;&#xA;        var chunkSize = 1;&#xD;&#xA;        var filename = ""file.txt"";&#xD;&#xA;        var video = document.querySelector(""video"");&#xD;&#xA;        var progress = document.querySelector(""progress"");&#xD;&#xA;        progress.max = str.length;&#xD;&#xA;        var canvas = document.createElement(""canvas"");&#xD;&#xA;        var ctx = canvas.getContext(""2d"");&#xD;&#xA;        canvas.width = ""420"";&#xD;&#xA;        canvas.height = ""100"";&#xD;&#xA;        ctx.beginPath();&#xD;&#xA;        ctx.fillStyle = ""#888800"";&#xD;&#xA;        ctx.rect(0, 0, 420, 300);&#xD;&#xA;        ctx.fill();&#xD;&#xA;        ctx.font = ""32px Baskerville Old Face"";&#xD;&#xA;&#xD;&#xA;        var reader = new FileReader();&#xD;&#xA;&#xD;&#xA;        function processStream() {&#xD;&#xA;          var data = file.slice(chunk, chunk + chunkSize);&#xD;&#xA;          stream = new File(stream ? [stream, data] : [data], filename, {&#xD;&#xA;            type: type,&#xD;&#xA;            lastModifiedDate: new Date()&#xD;&#xA;          });&#xD;&#xA;          ++chunk;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        function handleFile(e) {&#xD;&#xA;          processStream()&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        function handleRead(e) {&#xD;&#xA;          if (stream.size <= file.size && chunk < file.size + 1) {&#xD;&#xA;            setTimeout(function() {&#xD;&#xA;              reader.readAsArrayBuffer(stream)&#xD;&#xA;            }, delay);&#xD;&#xA;          } else {&#xD;&#xA;            progress.value = stream.size;      &#xD;&#xA;            if (stream.size === file.size) {&#xD;&#xA;              reader.removeEventListener(""progress"", handleProgress);&#xD;&#xA;                complete = true;&#xD;&#xA;                alert(""stream complete"");&#xD;&#xA;                console.log(stream);&#xD;&#xA;            }&#xD;&#xA;          }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        function handleProgress(e) {&#xD;&#xA;          if (!stream) processStream();&#xD;&#xA;          (function(_reader, _stream) {&#xD;&#xA;            _reader.onloadend = function() {&#xD;&#xA;              if (rendering) {&#xD;&#xA;                console.log(""stream as text:"", _reader.result, stream.size);&#xD;&#xA;                ctx.clearRect(0, 0, canvas.width, canvas.height);&#xD;&#xA;                ctx.beginPath();&#xD;&#xA;                ctx.fillStyle = ""#888800"";&#xD;&#xA;                ctx.rect(0, 0, 420, 100);&#xD;&#xA;                ctx.fill()&#xD;&#xA;                ctx.fillStyle = ""#000000"";&#xD;&#xA;                ctx.fillText(_reader.result, 15, 50);&#xD;&#xA;                video.setAttribute(""poster"", canvas.toDataURL());&#xD;&#xA;              }&#xD;&#xA;              if (_reader.result.length === file.size && complete && rendering) {&#xD;&#xA;                  alert(""canvas rendering complete"");&#xD;&#xA;                  rendering = false;&#xD;&#xA;              }             &#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            _reader.readAsText(_stream);&#xD;&#xA;&#xD;&#xA;          }(new FileReader(), stream));&#xD;&#xA;&#xD;&#xA;          progress.value = stream.size;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        reader.addEventListener(""load"", handleFile);&#xD;&#xA;&#xD;&#xA;        reader.addEventListener(""loadend"", handleRead);&#xD;&#xA;&#xD;&#xA;        reader.addEventListener(""progress"", handleProgress);&#xD;&#xA;&#xD;&#xA;        reader.readAsArrayBuffer(file);&#xD;&#xA;      </script>&#xD;&#xA;    </body>&#xD;&#xA;&#xD;&#xA;    </html>&#xD;&#xA;&#xD;&#xA;<!-- end snippet -->&#xD;&#xA;&#xD;&#xA;";;edited body
126372275;39313130;2801559;5;28749c30-6ecc-4782-9686-4f1503e8ad1b;2016-09-04 03:45:08.0;"You can use `progress`, `loadend` events. &#xD;&#xA;&#xD;&#xA;<!-- begin snippet: js hide: false console: true babel: false -->&#xD;&#xA;&#xD;&#xA;<!-- language: lang-js -->&#xD;&#xA;&#xD;&#xA;    var str = ""abcdefghijklmnopqrstuvwxyz"";&#xD;&#xA;    var type = ""application/octet-stream"";&#xD;&#xA;    var data = new Blob([], {&#xD;&#xA;      type: type&#xD;&#xA;    });&#xD;&#xA;    var filename = ""file.txt"";&#xD;&#xA;    var reader = new FileReader();&#xD;&#xA;    var complete = false;&#xD;&#xA;&#xD;&#xA;    function handleFile(e) {&#xD;&#xA;      data = new File([data.slice(), str.slice(data.size&#xD;&#xA;             , data.size + 1)], filename, {&#xD;&#xA;               type: type,&#xD;&#xA;               lastModifiedDate: new Date()&#xD;&#xA;             });&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    function handleRead(e) {&#xD;&#xA;      if (data.size <= str.length && !complete) {&#xD;&#xA;        reader.readAsArrayBuffer(data)&#xD;&#xA;      } else {&#xD;&#xA;        console.log(""complete"")&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    function handleProgress(e) {&#xD;&#xA;      if (data.size <= str.length && !complete) {&#xD;&#xA;        var read = new FileReader();&#xD;&#xA;        read.onload = function() {&#xD;&#xA;          console.log(read.result);&#xD;&#xA;          if (read.result.length === str.length) {&#xD;&#xA;            complete = true;&#xD;&#xA;            console.log(data);&#xD;&#xA;          }&#xD;&#xA;        }&#xD;&#xA;        read.readAsText(data);&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    reader.addEventListener(""load"", handleFile);&#xD;&#xA;&#xD;&#xA;    reader.addEventListener(""loadend"", handleRead);&#xD;&#xA;&#xD;&#xA;    reader.addEventListener(""progress"", handleProgress);&#xD;&#xA;&#xD;&#xA;    reader.readAsArrayBuffer(data);&#xD;&#xA;&#xD;&#xA;<!-- end snippet -->&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;----------&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;tldr;&#xD;&#xA;&#xD;&#xA;For example, `javascript` at stacksnippets below reads `File` object as `ArrayBuffer`, then reads each byte of `File` as text onto `<canvas>` element which is rendered as `data URI` at `poster` of `<video>` element&#xD;&#xA;&#xD;&#xA;<!-- begin snippet: js hide: false console: true babel: false -->&#xD;&#xA;&#xD;&#xA;<!-- language: lang-html -->&#xD;&#xA;&#xD;&#xA;    <!DOCTYPE html>&#xD;&#xA;    <html>&#xD;&#xA;&#xD;&#xA;    <head>&#xD;&#xA;    </head>&#xD;&#xA;&#xD;&#xA;    <body>&#xD;&#xA;      <progress value=""0"" min=""0""></progress>&#xD;&#xA;      <video poster="""" style=""width:400px;""></video>&#xD;&#xA;      <script>&#xD;&#xA;        var str = ""abcdefghijklmnopqrstuvwxyz"";&#xD;&#xA;        var type = ""application/octet-stream"";&#xD;&#xA;        var file = new File([str], {&#xD;&#xA;          type: type&#xD;&#xA;        });&#xD;&#xA;        var complete = false;&#xD;&#xA;        var rendering = true;&#xD;&#xA;        var stream;&#xD;&#xA;        var delay = 100;&#xD;&#xA;        var chunk = 0;&#xD;&#xA;        var chunkSize = 1;&#xD;&#xA;        var filename = ""file.txt"";&#xD;&#xA;        var video = document.querySelector(""video"");&#xD;&#xA;        var progress = document.querySelector(""progress"");&#xD;&#xA;        progress.max = str.length;&#xD;&#xA;        var canvas = document.createElement(""canvas"");&#xD;&#xA;        var ctx = canvas.getContext(""2d"");&#xD;&#xA;        canvas.width = ""420"";&#xD;&#xA;        canvas.height = ""100"";&#xD;&#xA;        ctx.beginPath();&#xD;&#xA;        ctx.fillStyle = ""#888800"";&#xD;&#xA;        ctx.rect(0, 0, 420, 300);&#xD;&#xA;        ctx.fill();&#xD;&#xA;        ctx.font = ""32px Baskerville Old Face"";&#xD;&#xA;&#xD;&#xA;        var reader = new FileReader();&#xD;&#xA;&#xD;&#xA;        function processStream() {&#xD;&#xA;          var data = file.slice(chunk, chunk + chunkSize);&#xD;&#xA;          stream = new File(stream ? [stream, data] : [data], filename, {&#xD;&#xA;            type: type,&#xD;&#xA;            lastModifiedDate: new Date()&#xD;&#xA;          });&#xD;&#xA;          ++chunk;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        function handleFile(e) {&#xD;&#xA;          processStream()&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        function handleRead(e) {&#xD;&#xA;          if (stream.size <= file.size && chunk < file.size + 1) {&#xD;&#xA;            setTimeout(function() {&#xD;&#xA;              reader.readAsArrayBuffer(stream)&#xD;&#xA;            }, delay);&#xD;&#xA;          } else {&#xD;&#xA;            progress.value = stream.size;      &#xD;&#xA;            if (stream.size === file.size) {&#xD;&#xA;              reader.removeEventListener(""progress"", handleProgress);&#xD;&#xA;                complete = true;&#xD;&#xA;                alert(""stream complete"");&#xD;&#xA;                console.log(stream);&#xD;&#xA;            }&#xD;&#xA;          }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        function handleProgress(e) {&#xD;&#xA;          if (!stream) processStream();&#xD;&#xA;          (function(_reader, _stream) {&#xD;&#xA;            _reader.onloadend = function() {&#xD;&#xA;              if (rendering) {&#xD;&#xA;                console.log(""stream as text:"", _reader.result, stream.size);&#xD;&#xA;                ctx.clearRect(0, 0, canvas.width, canvas.height);&#xD;&#xA;                ctx.beginPath();&#xD;&#xA;                ctx.fillStyle = ""#888800"";&#xD;&#xA;                ctx.rect(0, 0, 420, 100);&#xD;&#xA;                ctx.fill()&#xD;&#xA;                ctx.fillStyle = ""#000000"";&#xD;&#xA;                ctx.fillText(_reader.result, 15, 50);&#xD;&#xA;                video.setAttribute(""poster"", canvas.toDataURL());&#xD;&#xA;              }&#xD;&#xA;              if (_reader.result.length === file.size && complete && rendering) {&#xD;&#xA;                  alert(""canvas rendering complete"");&#xD;&#xA;                  rendering = false;&#xD;&#xA;              }             &#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            _reader.readAsText(_stream);&#xD;&#xA;&#xD;&#xA;          }(new FileReader(), stream));&#xD;&#xA;&#xD;&#xA;          progress.value = stream.size;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        reader.addEventListener(""load"", handleFile);&#xD;&#xA;&#xD;&#xA;        reader.addEventListener(""loadend"", handleRead);&#xD;&#xA;&#xD;&#xA;        reader.addEventListener(""progress"", handleProgress);&#xD;&#xA;&#xD;&#xA;        reader.readAsArrayBuffer(file);&#xD;&#xA;      </script>&#xD;&#xA;    </body>&#xD;&#xA;&#xD;&#xA;    </html>&#xD;&#xA;&#xD;&#xA;<!-- end snippet -->&#xD;&#xA;&#xD;&#xA;";;added 1428 characters in body
126372454;39313130;2801559;5;33ff1cf3-b9f1-42a7-8dff-828846d575bf;2016-09-04 03:56:25.0;"You can use `progress`, `loadend` events. &#xD;&#xA;&#xD;&#xA;<!-- begin snippet: js hide: false console: true babel: false -->&#xD;&#xA;&#xD;&#xA;<!-- language: lang-js -->&#xD;&#xA;&#xD;&#xA;    var str = ""abcdefghijklmnopqrstuvwxyz"";&#xD;&#xA;    var type = ""application/octet-stream"";&#xD;&#xA;    var data = new Blob([], {&#xD;&#xA;      type: type&#xD;&#xA;    });&#xD;&#xA;    var filename = ""file.txt"";&#xD;&#xA;    var reader = new FileReader();&#xD;&#xA;    var complete = false;&#xD;&#xA;&#xD;&#xA;    function handleFile(e) {&#xD;&#xA;      data = new File([data.slice(), str.slice(data.size&#xD;&#xA;             , data.size + 1)], filename, {&#xD;&#xA;               type: type,&#xD;&#xA;               lastModifiedDate: new Date()&#xD;&#xA;             });&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    function handleRead(e) {&#xD;&#xA;      if (data.size <= str.length && !complete) {&#xD;&#xA;        reader.readAsArrayBuffer(data);&#xD;&#xA;      } else {&#xD;&#xA;        console.log(""complete"")&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    function handleProgress(e) {&#xD;&#xA;      if (data.size <= str.length && !complete) {&#xD;&#xA;        // `data` byte before last byte read&#xD;&#xA;        // this can also be included in `handleRead`;&#xD;&#xA;        // can also check `read.result.length`&#xD;&#xA;        if (data.size === str.length - 1) {&#xD;&#xA;            alert(data.size);&#xD;&#xA;        }  &#xD;&#xA;        var read = new FileReader();&#xD;&#xA;        read.onload = function() {&#xD;&#xA;          console.log(read.result);&#xD;&#xA;          if (read.result.length === str.length) {&#xD;&#xA;            complete = true;&#xD;&#xA;            console.log(data);&#xD;&#xA;          }&#xD;&#xA;        }&#xD;&#xA;        read.readAsText(data);&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    reader.addEventListener(""load"", handleFile);&#xD;&#xA;&#xD;&#xA;    reader.addEventListener(""loadend"", handleRead);&#xD;&#xA;&#xD;&#xA;    reader.addEventListener(""progress"", handleProgress);&#xD;&#xA;&#xD;&#xA;    reader.readAsArrayBuffer(data);&#xD;&#xA;&#xD;&#xA;<!-- end snippet -->&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;----------&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;tldr;&#xD;&#xA;&#xD;&#xA;For example, `javascript` at stacksnippets below reads `File` object as `ArrayBuffer`, then reads each byte of `File` as text onto `<canvas>` element which is rendered as `data URI` at `poster` of `<video>` element&#xD;&#xA;&#xD;&#xA;<!-- begin snippet: js hide: false console: true babel: false -->&#xD;&#xA;&#xD;&#xA;<!-- language: lang-html -->&#xD;&#xA;&#xD;&#xA;    <!DOCTYPE html>&#xD;&#xA;    <html>&#xD;&#xA;&#xD;&#xA;    <head>&#xD;&#xA;    </head>&#xD;&#xA;&#xD;&#xA;    <body>&#xD;&#xA;      <progress value=""0"" min=""0""></progress>&#xD;&#xA;      <video poster="""" style=""width:400px;""></video>&#xD;&#xA;      <script>&#xD;&#xA;        var str = ""abcdefghijklmnopqrstuvwxyz"";&#xD;&#xA;        var type = ""application/octet-stream"";&#xD;&#xA;        var file = new File([str], {&#xD;&#xA;          type: type&#xD;&#xA;        });&#xD;&#xA;        var complete = false;&#xD;&#xA;        var rendering = true;&#xD;&#xA;        var stream;&#xD;&#xA;        var delay = 100;&#xD;&#xA;        var chunk = 0;&#xD;&#xA;        var chunkSize = 1;&#xD;&#xA;        var filename = ""file.txt"";&#xD;&#xA;        var video = document.querySelector(""video"");&#xD;&#xA;        var progress = document.querySelector(""progress"");&#xD;&#xA;        progress.max = str.length;&#xD;&#xA;        var canvas = document.createElement(""canvas"");&#xD;&#xA;        var ctx = canvas.getContext(""2d"");&#xD;&#xA;        canvas.width = ""420"";&#xD;&#xA;        canvas.height = ""100"";&#xD;&#xA;        ctx.beginPath();&#xD;&#xA;        ctx.fillStyle = ""#888800"";&#xD;&#xA;        ctx.rect(0, 0, 420, 300);&#xD;&#xA;        ctx.fill();&#xD;&#xA;        ctx.font = ""32px Baskerville Old Face"";&#xD;&#xA;&#xD;&#xA;        var reader = new FileReader();&#xD;&#xA;&#xD;&#xA;        function processStream() {&#xD;&#xA;          var data = file.slice(chunk, chunk + chunkSize);&#xD;&#xA;          stream = new File(stream ? [stream, data] : [data], filename, {&#xD;&#xA;            type: type,&#xD;&#xA;            lastModifiedDate: new Date()&#xD;&#xA;          });&#xD;&#xA;          ++chunk;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        function handleFile(e) {&#xD;&#xA;          processStream()&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        function handleRead(e) {&#xD;&#xA;          if (stream.size <= file.size && chunk < file.size + 1) {&#xD;&#xA;            setTimeout(function() {&#xD;&#xA;              reader.readAsArrayBuffer(stream)&#xD;&#xA;            }, delay);&#xD;&#xA;          } else {&#xD;&#xA;            progress.value = stream.size;      &#xD;&#xA;            if (stream.size === file.size) {&#xD;&#xA;              reader.removeEventListener(""progress"", handleProgress);&#xD;&#xA;                complete = true;&#xD;&#xA;                alert(""stream complete"");&#xD;&#xA;                console.log(stream);&#xD;&#xA;            }&#xD;&#xA;          }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        function handleProgress(e) {&#xD;&#xA;          if (!stream) processStream();&#xD;&#xA;          (function(_reader, _stream) {&#xD;&#xA;            _reader.onloadend = function() {&#xD;&#xA;              if (rendering) {&#xD;&#xA;                console.log(""stream as text:"", _reader.result, stream.size);&#xD;&#xA;                ctx.clearRect(0, 0, canvas.width, canvas.height);&#xD;&#xA;                ctx.beginPath();&#xD;&#xA;                ctx.fillStyle = ""#888800"";&#xD;&#xA;                ctx.rect(0, 0, 420, 100);&#xD;&#xA;                ctx.fill()&#xD;&#xA;                ctx.fillStyle = ""#000000"";&#xD;&#xA;                ctx.fillText(_reader.result, 15, 50);&#xD;&#xA;                video.setAttribute(""poster"", canvas.toDataURL());&#xD;&#xA;              }&#xD;&#xA;              if (_reader.result.length === file.size && complete && rendering) {&#xD;&#xA;                  alert(""canvas rendering complete"");&#xD;&#xA;                  rendering = false;&#xD;&#xA;              }             &#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            _reader.readAsText(_stream);&#xD;&#xA;&#xD;&#xA;          }(new FileReader(), stream));&#xD;&#xA;&#xD;&#xA;          progress.value = stream.size;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        reader.addEventListener(""load"", handleFile);&#xD;&#xA;&#xD;&#xA;        reader.addEventListener(""loadend"", handleRead);&#xD;&#xA;&#xD;&#xA;        reader.addEventListener(""progress"", handleProgress);&#xD;&#xA;&#xD;&#xA;        reader.readAsArrayBuffer(file);&#xD;&#xA;      </script>&#xD;&#xA;    </body>&#xD;&#xA;&#xD;&#xA;    </html>&#xD;&#xA;&#xD;&#xA;<!-- end snippet -->&#xD;&#xA;&#xD;&#xA;";;added 1428 characters in body
126375224;39313130;2801559;5;da3e366a-11e4-4d98-b142-53b4cd374225;2016-09-04 06:22:36.0;"You can use `progress`, `loadend` events. &#xD;&#xA;&#xD;&#xA;<!-- begin snippet: js hide: false console: true babel: false -->&#xD;&#xA;&#xD;&#xA;<!-- language: lang-js -->&#xD;&#xA;&#xD;&#xA;    var str = ""abcdefghijklmnopqrstuvwxyz"";&#xD;&#xA;    var type = ""application/octet-stream"";&#xD;&#xA;    var data = new Blob([], {&#xD;&#xA;      type: type&#xD;&#xA;    });&#xD;&#xA;    var filename = ""file.txt"";&#xD;&#xA;    var reader = new FileReader();&#xD;&#xA;    var complete = false;&#xD;&#xA;&#xD;&#xA;    function handleFile(e) {&#xD;&#xA;      data = new File([data.slice(), str.slice(data.size&#xD;&#xA;             , data.size + 1)], filename, {&#xD;&#xA;               type: type,&#xD;&#xA;               lastModifiedDate: new Date()&#xD;&#xA;             });&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    function handleRead(e) {&#xD;&#xA;      if (data.size <= str.length && !complete) {&#xD;&#xA;        reader.readAsArrayBuffer(data);&#xD;&#xA;      } else {&#xD;&#xA;        console.log(""complete"")&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    function handleProgress(e) {&#xD;&#xA;      if (data.size <= str.length && !complete) {&#xD;&#xA;        // `data` byte before last byte read&#xD;&#xA;        // this can also be included in `handleRead`;&#xD;&#xA;        // can also check `read.result.length`&#xD;&#xA;        if (data.size === str.length - 1) {&#xD;&#xA;            alert(data.size);&#xD;&#xA;        }  &#xD;&#xA;        var read = new FileReader();&#xD;&#xA;        read.onload = function() {&#xD;&#xA;          console.log(read.result);&#xD;&#xA;          if (read.result.length === str.length) {&#xD;&#xA;            complete = true;&#xD;&#xA;            console.log(data);&#xD;&#xA;          }&#xD;&#xA;        }&#xD;&#xA;        read.readAsText(data);&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    reader.addEventListener(""load"", handleFile);&#xD;&#xA;&#xD;&#xA;    reader.addEventListener(""loadend"", handleRead);&#xD;&#xA;&#xD;&#xA;    reader.addEventListener(""progress"", handleProgress);&#xD;&#xA;&#xD;&#xA;    reader.readAsArrayBuffer(data);&#xD;&#xA;&#xD;&#xA;<!-- end snippet -->&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;";;deleted 3669 characters in body
126377500;39313130;2801559;5;2ec96dd2-5e69-4d94-b758-39b0fc0ddf5f;2016-09-04 07:44:48.0;"You can use `progress`, `loadend` events. &#xD;&#xA;&#xD;&#xA;<!-- begin snippet: js hide: false console: true babel: false -->&#xD;&#xA;&#xD;&#xA;<!-- language: lang-js -->&#xD;&#xA;&#xD;&#xA;    var str = ""abcdefghijklmnopqrstuvwxyz"";&#xD;&#xA;    var type = ""application/octet-stream"";&#xD;&#xA;    var data = new Blob([], {&#xD;&#xA;      type: type&#xD;&#xA;    });&#xD;&#xA;    var filename = ""file.txt"";&#xD;&#xA;    var reader = new FileReader();&#xD;&#xA;    var complete = false;&#xD;&#xA;    var beforeEnd = false;&#xD;&#xA;    var stopAt = str.length - 1;&#xD;&#xA;&#xD;&#xA;    function handleFile(e) {&#xD;&#xA;      data = new File([data.slice()&#xD;&#xA;                       , str.slice(data.size, data.size + 1)]&#xD;&#xA;                       , filename, {&#xD;&#xA;                           type: type,&#xD;&#xA;                           lastModifiedDate: new Date()&#xD;&#xA;              });&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    function handleRead(e) {&#xD;&#xA;      if (data.size <= str.length && !complete) {&#xD;&#xA;        if (data.size === stopAt && !beforeEnd) {&#xD;&#xA;          beforeEnd = true;&#xD;&#xA;          var r = new FileReader();&#xD;&#xA;          r.onloadend = function() {            &#xD;&#xA;            alert(`stopAt: ${stopAt}\\n`&#xD;&#xA;                  +`data.size: ${data.size}\\n`&#xD;&#xA;                  +`result at stopAt: ${r.result[stopAt -1]}`);&#xD;&#xA;            reader.readAsArrayBuffer(data);&#xD;&#xA;          }&#xD;&#xA;          r.readAsText(data);&#xD;&#xA;        } else {&#xD;&#xA;          reader.readAsArrayBuffer(data)&#xD;&#xA;        }&#xD;&#xA;      } else {&#xD;&#xA;        console.log(""complete"")&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    function handleProgress(e) {&#xD;&#xA;      if (data.size <= str.length && !complete) {&#xD;&#xA;        var read = new FileReader();&#xD;&#xA;        read.onload = function() {&#xD;&#xA;          if (!complete) {&#xD;&#xA;            console.log(read.result);&#xD;&#xA;            if (read.result.length === str.length) {&#xD;&#xA;              complete = true;&#xD;&#xA;              console.log(data);&#xD;&#xA;            }&#xD;&#xA;          }&#xD;&#xA;        }&#xD;&#xA;        read.readAsText(data);&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    reader.addEventListener(""load"", handleFile);&#xD;&#xA;&#xD;&#xA;    reader.addEventListener(""loadend"", handleRead);&#xD;&#xA;&#xD;&#xA;    reader.addEventListener(""progress"", handleProgress);&#xD;&#xA;&#xD;&#xA;    reader.readAsArrayBuffer(data);&#xD;&#xA;&#xD;&#xA;<!-- end snippet -->&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;";;added 375 characters in body
126378954;39313130;2801559;5;351aa833-087e-4aac-84b3-fa494cf2bd2d;2016-09-04 08:33:32.0;"You can use `progress`, `loadend` events to process `File` object one byte at a time; define a variable where processing should be paused or stopped at nth byte, every nth byte, or any byte during processing of file.&#xD;&#xA;&#xD;&#xA;<!-- begin snippet: js hide: false console: true babel: false -->&#xD;&#xA;&#xD;&#xA;<!-- language: lang-js -->&#xD;&#xA;&#xD;&#xA;    var str = ""abcdefghijklmnopqrstuvwxyz"";&#xD;&#xA;    var type = ""application/octet-stream"";&#xD;&#xA;    var data = new Blob([], {&#xD;&#xA;      type: type&#xD;&#xA;    });&#xD;&#xA;    var filename = ""file.txt"";&#xD;&#xA;    var reader = new FileReader();&#xD;&#xA;    var complete = false;&#xD;&#xA;    var beforeEnd = false;&#xD;&#xA;    var stopAt = str.length - 1;&#xD;&#xA;&#xD;&#xA;    function handleFile(e) {&#xD;&#xA;      data = new File([data.slice()&#xD;&#xA;                       , str.slice(data.size, data.size + 1)]&#xD;&#xA;                       , filename, {&#xD;&#xA;                           type: type,&#xD;&#xA;                           lastModifiedDate: new Date()&#xD;&#xA;              });&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    function handleRead(e) {&#xD;&#xA;      if (data.size <= str.length && !complete) {&#xD;&#xA;        if (data.size === stopAt && !beforeEnd) {&#xD;&#xA;          beforeEnd = true;&#xD;&#xA;          var r = new FileReader();&#xD;&#xA;          r.onloadend = function() {            &#xD;&#xA;            alert(`stopAt: ${stopAt}\\n`&#xD;&#xA;                  +`data.size: ${data.size}\\n`&#xD;&#xA;                  +`result at stopAt: ${r.result[stopAt -1]}`);&#xD;&#xA;            reader.readAsArrayBuffer(data);&#xD;&#xA;          }&#xD;&#xA;          r.readAsText(data);&#xD;&#xA;        } else {&#xD;&#xA;          reader.readAsArrayBuffer(data)&#xD;&#xA;        }&#xD;&#xA;      } else {&#xD;&#xA;        console.log(""complete"")&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    function handleProgress(e) {&#xD;&#xA;      if (data.size <= str.length && !complete) {&#xD;&#xA;        var read = new FileReader();&#xD;&#xA;        read.onload = function() {&#xD;&#xA;          if (!complete) {&#xD;&#xA;            console.log(read.result);&#xD;&#xA;            if (read.result.length === str.length) {&#xD;&#xA;              complete = true;&#xD;&#xA;              console.log(data);&#xD;&#xA;            }&#xD;&#xA;          }&#xD;&#xA;        }&#xD;&#xA;        read.readAsText(data);&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    reader.addEventListener(""load"", handleFile);&#xD;&#xA;&#xD;&#xA;    reader.addEventListener(""loadend"", handleRead);&#xD;&#xA;&#xD;&#xA;    reader.addEventListener(""progress"", handleProgress);&#xD;&#xA;&#xD;&#xA;    reader.readAsArrayBuffer(data);&#xD;&#xA;&#xD;&#xA;<!-- end snippet -->&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;";;added 174 characters in body
