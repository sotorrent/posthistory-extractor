Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
126371439;39313130;2801559;2;522eb738-9028-49da-be80-40f69e9e70eb;2016-09-04 02:54:39.0;"You can use `progress`, `loadend` events, `Promise`. `javascript` at stacksnippets reads each byte of `File` object as `ArrayBuffer`, then reads stream as text onto `<canvas>` element which is rendered as `data URI` at `poster` of `<video>` element

<!-- begin snippet: js hide: false console: true babel: false -->

<!-- language: lang-html -->

    <!DOCTYPE html>
    <html>

    <head>
    </head>

    <body>
      <progress value=""0"" min=""0""></progress>
      <video poster="""" style=""width:400px;""></video>
      <script>
        var str = ""abcdefghijklmnopqrstuvwxyz"";
        var type = ""application/octet-stream"";
        var file = new File([str], {
          type: type
        });
        var complete = false;
        var rendering = true;
        var stream;
        var delay = 100;
        var chunk = 0;
        var chunkSize = 1;
        var filename = ""file.txt"";
        var video = document.querySelector(""video"");
        var progress = document.querySelector(""progress"");
        progress.max = str.length;
        var canvas = document.createElement(""canvas"");
        var ctx = canvas.getContext(""2d"");
        canvas.width = ""420"";
        canvas.height = ""100"";
        ctx.beginPath();
        ctx.fillStyle = ""#888800"";
        ctx.rect(0, 0, 420, 300);
        ctx.fill();
        ctx.font = ""32px Baskerville Old Face"";

        var reader = new FileReader();
        var dfd = Promise.resolve();

        function processStream() {
          var data = file.slice(chunk, chunk + chunkSize);
          stream = new File(stream ? [stream, data] : [data], filename, {
            type: type,
            lastModifiedDate: new Date()
          });
          ++chunk;
        }

        function handleFile(e) {
          processStream()
        }

        function handleRead(e) {
          if (stream.size <= file.size && chunk < file.size + 1) {
            setTimeout(function() {
              reader.readAsArrayBuffer(stream)
            }, delay);
          } else {
            progress.value = stream.size;      
            if (stream.size === file.size) {
              reader.removeEventListener(""progress"", handleProgress);
              dfd.then(function() {
                complete = true;
                alert(""stream complete"");
                console.log(stream);
              })
            }
          }
        }

        function handleProgress(e) {
          if (!stream) processStream();
          (function(_reader, _stream) {
            _reader.onloadend = function() {
              if (_reader.result.length < file.size && !complete) {
                console.log(""stream as text:"", _reader.result, stream.size);
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                ctx.beginPath();
                ctx.fillStyle = ""#888800"";
                ctx.rect(0, 0, 420, 100);
                ctx.fill()
                ctx.fillStyle = ""#000000"";
                ctx.fillText(_reader.result, 15, 50);
                video.setAttribute(""poster"", canvas.toDataURL());
              } else if (_reader.result.length === file.size 
                        && complete && rendering) {
                complete = false;
                dfd.then(function() {
                  console.log(""stream as text complete:"", _reader.result);
                  alert(""canvas rendering complete"");
                  rendering = false;
                });
              }

            }

            _reader.readAsText(_stream);

          }(new FileReader(), stream));

          progress.value = stream.size;
        }

        reader.addEventListener(""load"", handleFile);

        reader.addEventListener(""loadend"", handleRead);

        reader.addEventListener(""progress"", handleProgress);

        reader.readAsArrayBuffer(file);
      </script>
    </body>

    </html>

<!-- end snippet -->

";;
126371537;39313130;2801559;5;ead2dcae-76e6-4a56-a82f-6806e13b2392;2016-09-04 03:02:38.0;"You can use `progress`, `loadend` events, `Promise`. `javascript` at stacksnippets reads each byte of `File` object as `ArrayBuffer`, then reads stream as text onto `<canvas>` element which is rendered as `data URI` at `poster` of `<video>` element

<!-- begin snippet: js hide: false console: true babel: false -->

<!-- language: lang-html -->

    <!DOCTYPE html>
    <html>

    <head>
    </head>

    <body>
      <progress value=""0"" min=""0""></progress>
      <video poster="""" style=""width:400px;""></video>
      <script>
        var str = ""abcdefghijklmnopqrstuvwxyz"";
        var type = ""application/octet-stream"";
        var file = new File([str], {
          type: type
        });
        var complete = false;
        var rendering = true;
        var stream;
        var delay = 100;
        var chunk = 0;
        var chunkSize = 1;
        var filename = ""file.txt"";
        var video = document.querySelector(""video"");
        var progress = document.querySelector(""progress"");
        progress.max = str.length;
        var canvas = document.createElement(""canvas"");
        var ctx = canvas.getContext(""2d"");
        canvas.width = ""420"";
        canvas.height = ""100"";
        ctx.beginPath();
        ctx.fillStyle = ""#888800"";
        ctx.rect(0, 0, 420, 300);
        ctx.fill();
        ctx.font = ""32px Baskerville Old Face"";

        var reader = new FileReader();
        var dfd = Promise.resolve();

        function processStream() {
          var data = file.slice(chunk, chunk + chunkSize);
          stream = new File(stream ? [stream, data] : [data], filename, {
            type: type,
            lastModifiedDate: new Date()
          });
          ++chunk;
        }

        function handleFile(e) {
          processStream()
        }

        function handleRead(e) {
          if (stream.size <= file.size && chunk < file.size + 1) {
            setTimeout(function() {
              reader.readAsArrayBuffer(stream)
            }, delay);
          } else {
            progress.value = stream.size;      
            if (stream.size === file.size) {
              reader.removeEventListener(""progress"", handleProgress);
              dfd.then(function() {
                complete = true;
                alert(""stream complete"");
                console.log(stream);
              })
            }
          }
        }

        function handleProgress(e) {
          if (!stream) processStream();
          (function(_reader, _stream) {
            _reader.onloadend = function() {
              if (rendering) {
                console.log(""stream as text:"", _reader.result, stream.size);
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                ctx.beginPath();
                ctx.fillStyle = ""#888800"";
                ctx.rect(0, 0, 420, 100);
                ctx.fill()
                ctx.fillStyle = ""#000000"";
                ctx.fillText(_reader.result, 15, 50);
                video.setAttribute(""poster"", canvas.toDataURL());
              }
              if (_reader.result.length === file.size && complete && rendering) {
                dfd.then(function() {
                  alert(""canvas rendering complete"");
                  rendering = false;
                });
              }             
            }

            _reader.readAsText(_stream);

          }(new FileReader(), stream));

          progress.value = stream.size;
        }

        reader.addEventListener(""load"", handleFile);

        reader.addEventListener(""loadend"", handleRead);

        reader.addEventListener(""progress"", handleProgress);

        reader.readAsArrayBuffer(file);
      </script>
    </body>

    </html>

<!-- end snippet -->

";;deleted 122 characters in body
126371666;39313130;2801559;5;4fca0152-b389-48d6-812d-aa474f72669c;2016-09-04 03:09:40.0;"You can use `progress`, `loadend` events. `javascript` at stacksnippets reads each byte of `File` object as `ArrayBuffer`, then reads stream as text onto `<canvas>` element which is rendered as `data URI` at `poster` of `<video>` element

<!-- begin snippet: js hide: false console: true babel: false -->

<!-- language: lang-html -->

    <!DOCTYPE html>
    <html>

    <head>
    </head>

    <body>
      <progress value=""0"" min=""0""></progress>
      <video poster="""" style=""width:400px;""></video>
      <script>
        var str = ""abcdefghijklmnopqrstuvwxyz"";
        var type = ""application/octet-stream"";
        var file = new File([str], {
          type: type
        });
        var complete = false;
        var rendering = true;
        var stream;
        var delay = 100;
        var chunk = 0;
        var chunkSize = 1;
        var filename = ""file.txt"";
        var video = document.querySelector(""video"");
        var progress = document.querySelector(""progress"");
        progress.max = str.length;
        var canvas = document.createElement(""canvas"");
        var ctx = canvas.getContext(""2d"");
        canvas.width = ""420"";
        canvas.height = ""100"";
        ctx.beginPath();
        ctx.fillStyle = ""#888800"";
        ctx.rect(0, 0, 420, 300);
        ctx.fill();
        ctx.font = ""32px Baskerville Old Face"";

        var reader = new FileReader();

        function processStream() {
          var data = file.slice(chunk, chunk + chunkSize);
          stream = new File(stream ? [stream, data] : [data], filename, {
            type: type,
            lastModifiedDate: new Date()
          });
          ++chunk;
        }

        function handleFile(e) {
          processStream()
        }

        function handleRead(e) {
          if (stream.size <= file.size && chunk < file.size + 1) {
            setTimeout(function() {
              reader.readAsArrayBuffer(stream)
            }, delay);
          } else {
            progress.value = stream.size;      
            if (stream.size === file.size) {
              reader.removeEventListener(""progress"", handleProgress);
                complete = true;
                alert(""stream complete"");
                console.log(stream);
            }
          }
        }

        function handleProgress(e) {
          if (!stream) processStream();
          (function(_reader, _stream) {
            _reader.onloadend = function() {
              if (rendering) {
                console.log(""stream as text:"", _reader.result, stream.size);
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                ctx.beginPath();
                ctx.fillStyle = ""#888800"";
                ctx.rect(0, 0, 420, 100);
                ctx.fill()
                ctx.fillStyle = ""#000000"";
                ctx.fillText(_reader.result, 15, 50);
                video.setAttribute(""poster"", canvas.toDataURL());
              }
              if (_reader.result.length === file.size && complete && rendering) {
                  alert(""canvas rendering complete"");
                  rendering = false;
              }             
            }

            _reader.readAsText(_stream);

          }(new FileReader(), stream));

          progress.value = stream.size;
        }

        reader.addEventListener(""load"", handleFile);

        reader.addEventListener(""loadend"", handleRead);

        reader.addEventListener(""progress"", handleProgress);

        reader.readAsArrayBuffer(file);
      </script>
    </body>

    </html>

<!-- end snippet -->

";;deleted 164 characters in body
126371852;39313130;2801559;5;ff971c40-d3d4-42ce-a507-5fb1916a41da;2016-09-04 03:20:55.0;"You can use `progress`, `loadend` events. `javascript` at stacksnippets reads `File` object as `ArrayBuffer`, then reads each byte of `File` as text onto `<canvas>` element which is rendered as `data URI` at `poster` of `<video>` element

<!-- begin snippet: js hide: false console: true babel: false -->

<!-- language: lang-html -->

    <!DOCTYPE html>
    <html>

    <head>
    </head>

    <body>
      <progress value=""0"" min=""0""></progress>
      <video poster="""" style=""width:400px;""></video>
      <script>
        var str = ""abcdefghijklmnopqrstuvwxyz"";
        var type = ""application/octet-stream"";
        var file = new File([str], {
          type: type
        });
        var complete = false;
        var rendering = true;
        var stream;
        var delay = 100;
        var chunk = 0;
        var chunkSize = 1;
        var filename = ""file.txt"";
        var video = document.querySelector(""video"");
        var progress = document.querySelector(""progress"");
        progress.max = str.length;
        var canvas = document.createElement(""canvas"");
        var ctx = canvas.getContext(""2d"");
        canvas.width = ""420"";
        canvas.height = ""100"";
        ctx.beginPath();
        ctx.fillStyle = ""#888800"";
        ctx.rect(0, 0, 420, 300);
        ctx.fill();
        ctx.font = ""32px Baskerville Old Face"";

        var reader = new FileReader();

        function processStream() {
          var data = file.slice(chunk, chunk + chunkSize);
          stream = new File(stream ? [stream, data] : [data], filename, {
            type: type,
            lastModifiedDate: new Date()
          });
          ++chunk;
        }

        function handleFile(e) {
          processStream()
        }

        function handleRead(e) {
          if (stream.size <= file.size && chunk < file.size + 1) {
            setTimeout(function() {
              reader.readAsArrayBuffer(stream)
            }, delay);
          } else {
            progress.value = stream.size;      
            if (stream.size === file.size) {
              reader.removeEventListener(""progress"", handleProgress);
                complete = true;
                alert(""stream complete"");
                console.log(stream);
            }
          }
        }

        function handleProgress(e) {
          if (!stream) processStream();
          (function(_reader, _stream) {
            _reader.onloadend = function() {
              if (rendering) {
                console.log(""stream as text:"", _reader.result, stream.size);
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                ctx.beginPath();
                ctx.fillStyle = ""#888800"";
                ctx.rect(0, 0, 420, 100);
                ctx.fill()
                ctx.fillStyle = ""#000000"";
                ctx.fillText(_reader.result, 15, 50);
                video.setAttribute(""poster"", canvas.toDataURL());
              }
              if (_reader.result.length === file.size && complete && rendering) {
                  alert(""canvas rendering complete"");
                  rendering = false;
              }             
            }

            _reader.readAsText(_stream);

          }(new FileReader(), stream));

          progress.value = stream.size;
        }

        reader.addEventListener(""load"", handleFile);

        reader.addEventListener(""loadend"", handleRead);

        reader.addEventListener(""progress"", handleProgress);

        reader.readAsArrayBuffer(file);
      </script>
    </body>

    </html>

<!-- end snippet -->

";;edited body
126372275;39313130;2801559;5;28749c30-6ecc-4782-9686-4f1503e8ad1b;2016-09-04 03:45:08.0;"You can use `progress`, `loadend` events. 

<!-- begin snippet: js hide: false console: true babel: false -->

<!-- language: lang-js -->

    var str = ""abcdefghijklmnopqrstuvwxyz"";
    var type = ""application/octet-stream"";
    var data = new Blob([], {
      type: type
    });
    var filename = ""file.txt"";
    var reader = new FileReader();
    var complete = false;

    function handleFile(e) {
      data = new File([data.slice(), str.slice(data.size
             , data.size + 1)], filename, {
               type: type,
               lastModifiedDate: new Date()
             });
    }

    function handleRead(e) {
      if (data.size <= str.length && !complete) {
        reader.readAsArrayBuffer(data)
      } else {
        console.log(""complete"")
      }
    }

    function handleProgress(e) {
      if (data.size <= str.length && !complete) {
        var read = new FileReader();
        read.onload = function() {
          console.log(read.result);
          if (read.result.length === str.length) {
            complete = true;
            console.log(data);
          }
        }
        read.readAsText(data);
      }
    }

    reader.addEventListener(""load"", handleFile);

    reader.addEventListener(""loadend"", handleRead);

    reader.addEventListener(""progress"", handleProgress);

    reader.readAsArrayBuffer(data);

<!-- end snippet -->


----------


tldr;

For example, `javascript` at stacksnippets below reads `File` object as `ArrayBuffer`, then reads each byte of `File` as text onto `<canvas>` element which is rendered as `data URI` at `poster` of `<video>` element

<!-- begin snippet: js hide: false console: true babel: false -->

<!-- language: lang-html -->

    <!DOCTYPE html>
    <html>

    <head>
    </head>

    <body>
      <progress value=""0"" min=""0""></progress>
      <video poster="""" style=""width:400px;""></video>
      <script>
        var str = ""abcdefghijklmnopqrstuvwxyz"";
        var type = ""application/octet-stream"";
        var file = new File([str], {
          type: type
        });
        var complete = false;
        var rendering = true;
        var stream;
        var delay = 100;
        var chunk = 0;
        var chunkSize = 1;
        var filename = ""file.txt"";
        var video = document.querySelector(""video"");
        var progress = document.querySelector(""progress"");
        progress.max = str.length;
        var canvas = document.createElement(""canvas"");
        var ctx = canvas.getContext(""2d"");
        canvas.width = ""420"";
        canvas.height = ""100"";
        ctx.beginPath();
        ctx.fillStyle = ""#888800"";
        ctx.rect(0, 0, 420, 300);
        ctx.fill();
        ctx.font = ""32px Baskerville Old Face"";

        var reader = new FileReader();

        function processStream() {
          var data = file.slice(chunk, chunk + chunkSize);
          stream = new File(stream ? [stream, data] : [data], filename, {
            type: type,
            lastModifiedDate: new Date()
          });
          ++chunk;
        }

        function handleFile(e) {
          processStream()
        }

        function handleRead(e) {
          if (stream.size <= file.size && chunk < file.size + 1) {
            setTimeout(function() {
              reader.readAsArrayBuffer(stream)
            }, delay);
          } else {
            progress.value = stream.size;      
            if (stream.size === file.size) {
              reader.removeEventListener(""progress"", handleProgress);
                complete = true;
                alert(""stream complete"");
                console.log(stream);
            }
          }
        }

        function handleProgress(e) {
          if (!stream) processStream();
          (function(_reader, _stream) {
            _reader.onloadend = function() {
              if (rendering) {
                console.log(""stream as text:"", _reader.result, stream.size);
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                ctx.beginPath();
                ctx.fillStyle = ""#888800"";
                ctx.rect(0, 0, 420, 100);
                ctx.fill()
                ctx.fillStyle = ""#000000"";
                ctx.fillText(_reader.result, 15, 50);
                video.setAttribute(""poster"", canvas.toDataURL());
              }
              if (_reader.result.length === file.size && complete && rendering) {
                  alert(""canvas rendering complete"");
                  rendering = false;
              }             
            }

            _reader.readAsText(_stream);

          }(new FileReader(), stream));

          progress.value = stream.size;
        }

        reader.addEventListener(""load"", handleFile);

        reader.addEventListener(""loadend"", handleRead);

        reader.addEventListener(""progress"", handleProgress);

        reader.readAsArrayBuffer(file);
      </script>
    </body>

    </html>

<!-- end snippet -->

";;added 1428 characters in body
126372454;39313130;2801559;5;33ff1cf3-b9f1-42a7-8dff-828846d575bf;2016-09-04 03:56:25.0;"You can use `progress`, `loadend` events. 

<!-- begin snippet: js hide: false console: true babel: false -->

<!-- language: lang-js -->

    var str = ""abcdefghijklmnopqrstuvwxyz"";
    var type = ""application/octet-stream"";
    var data = new Blob([], {
      type: type
    });
    var filename = ""file.txt"";
    var reader = new FileReader();
    var complete = false;

    function handleFile(e) {
      data = new File([data.slice(), str.slice(data.size
             , data.size + 1)], filename, {
               type: type,
               lastModifiedDate: new Date()
             });
    }

    function handleRead(e) {
      if (data.size <= str.length && !complete) {
        reader.readAsArrayBuffer(data);
      } else {
        console.log(""complete"")
      }
    }

    function handleProgress(e) {
      if (data.size <= str.length && !complete) {
        // `data` byte before last byte read
        // this can also be included in `handleRead`;
        // can also check `read.result.length`
        if (data.size === str.length - 1) {
            alert(data.size);
        }  
        var read = new FileReader();
        read.onload = function() {
          console.log(read.result);
          if (read.result.length === str.length) {
            complete = true;
            console.log(data);
          }
        }
        read.readAsText(data);
      }
    }

    reader.addEventListener(""load"", handleFile);

    reader.addEventListener(""loadend"", handleRead);

    reader.addEventListener(""progress"", handleProgress);

    reader.readAsArrayBuffer(data);

<!-- end snippet -->


----------


tldr;

For example, `javascript` at stacksnippets below reads `File` object as `ArrayBuffer`, then reads each byte of `File` as text onto `<canvas>` element which is rendered as `data URI` at `poster` of `<video>` element

<!-- begin snippet: js hide: false console: true babel: false -->

<!-- language: lang-html -->

    <!DOCTYPE html>
    <html>

    <head>
    </head>

    <body>
      <progress value=""0"" min=""0""></progress>
      <video poster="""" style=""width:400px;""></video>
      <script>
        var str = ""abcdefghijklmnopqrstuvwxyz"";
        var type = ""application/octet-stream"";
        var file = new File([str], {
          type: type
        });
        var complete = false;
        var rendering = true;
        var stream;
        var delay = 100;
        var chunk = 0;
        var chunkSize = 1;
        var filename = ""file.txt"";
        var video = document.querySelector(""video"");
        var progress = document.querySelector(""progress"");
        progress.max = str.length;
        var canvas = document.createElement(""canvas"");
        var ctx = canvas.getContext(""2d"");
        canvas.width = ""420"";
        canvas.height = ""100"";
        ctx.beginPath();
        ctx.fillStyle = ""#888800"";
        ctx.rect(0, 0, 420, 300);
        ctx.fill();
        ctx.font = ""32px Baskerville Old Face"";

        var reader = new FileReader();

        function processStream() {
          var data = file.slice(chunk, chunk + chunkSize);
          stream = new File(stream ? [stream, data] : [data], filename, {
            type: type,
            lastModifiedDate: new Date()
          });
          ++chunk;
        }

        function handleFile(e) {
          processStream()
        }

        function handleRead(e) {
          if (stream.size <= file.size && chunk < file.size + 1) {
            setTimeout(function() {
              reader.readAsArrayBuffer(stream)
            }, delay);
          } else {
            progress.value = stream.size;      
            if (stream.size === file.size) {
              reader.removeEventListener(""progress"", handleProgress);
                complete = true;
                alert(""stream complete"");
                console.log(stream);
            }
          }
        }

        function handleProgress(e) {
          if (!stream) processStream();
          (function(_reader, _stream) {
            _reader.onloadend = function() {
              if (rendering) {
                console.log(""stream as text:"", _reader.result, stream.size);
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                ctx.beginPath();
                ctx.fillStyle = ""#888800"";
                ctx.rect(0, 0, 420, 100);
                ctx.fill()
                ctx.fillStyle = ""#000000"";
                ctx.fillText(_reader.result, 15, 50);
                video.setAttribute(""poster"", canvas.toDataURL());
              }
              if (_reader.result.length === file.size && complete && rendering) {
                  alert(""canvas rendering complete"");
                  rendering = false;
              }             
            }

            _reader.readAsText(_stream);

          }(new FileReader(), stream));

          progress.value = stream.size;
        }

        reader.addEventListener(""load"", handleFile);

        reader.addEventListener(""loadend"", handleRead);

        reader.addEventListener(""progress"", handleProgress);

        reader.readAsArrayBuffer(file);
      </script>
    </body>

    </html>

<!-- end snippet -->

";;added 1428 characters in body
126375224;39313130;2801559;5;da3e366a-11e4-4d98-b142-53b4cd374225;2016-09-04 06:22:36.0;"You can use `progress`, `loadend` events. 

<!-- begin snippet: js hide: false console: true babel: false -->

<!-- language: lang-js -->

    var str = ""abcdefghijklmnopqrstuvwxyz"";
    var type = ""application/octet-stream"";
    var data = new Blob([], {
      type: type
    });
    var filename = ""file.txt"";
    var reader = new FileReader();
    var complete = false;

    function handleFile(e) {
      data = new File([data.slice(), str.slice(data.size
             , data.size + 1)], filename, {
               type: type,
               lastModifiedDate: new Date()
             });
    }

    function handleRead(e) {
      if (data.size <= str.length && !complete) {
        reader.readAsArrayBuffer(data);
      } else {
        console.log(""complete"")
      }
    }

    function handleProgress(e) {
      if (data.size <= str.length && !complete) {
        // `data` byte before last byte read
        // this can also be included in `handleRead`;
        // can also check `read.result.length`
        if (data.size === str.length - 1) {
            alert(data.size);
        }  
        var read = new FileReader();
        read.onload = function() {
          console.log(read.result);
          if (read.result.length === str.length) {
            complete = true;
            console.log(data);
          }
        }
        read.readAsText(data);
      }
    }

    reader.addEventListener(""load"", handleFile);

    reader.addEventListener(""loadend"", handleRead);

    reader.addEventListener(""progress"", handleProgress);

    reader.readAsArrayBuffer(data);

<!-- end snippet -->


";;deleted 3669 characters in body
126377500;39313130;2801559;5;2ec96dd2-5e69-4d94-b758-39b0fc0ddf5f;2016-09-04 07:44:48.0;"You can use `progress`, `loadend` events. 

<!-- begin snippet: js hide: false console: true babel: false -->

<!-- language: lang-js -->

    var str = ""abcdefghijklmnopqrstuvwxyz"";
    var type = ""application/octet-stream"";
    var data = new Blob([], {
      type: type
    });
    var filename = ""file.txt"";
    var reader = new FileReader();
    var complete = false;
    var beforeEnd = false;
    var stopAt = str.length - 1;

    function handleFile(e) {
      data = new File([data.slice()
                       , str.slice(data.size, data.size + 1)]
                       , filename, {
                           type: type,
                           lastModifiedDate: new Date()
              });
    }

    function handleRead(e) {
      if (data.size <= str.length && !complete) {
        if (data.size === stopAt && !beforeEnd) {
          beforeEnd = true;
          var r = new FileReader();
          r.onloadend = function() {            
            alert(`stopAt: ${stopAt}\\n`
                  +`data.size: ${data.size}\\n`
                  +`result at stopAt: ${r.result[stopAt -1]}`);
            reader.readAsArrayBuffer(data);
          }
          r.readAsText(data);
        } else {
          reader.readAsArrayBuffer(data)
        }
      } else {
        console.log(""complete"")
      }
    }

    function handleProgress(e) {
      if (data.size <= str.length && !complete) {
        var read = new FileReader();
        read.onload = function() {
          if (!complete) {
            console.log(read.result);
            if (read.result.length === str.length) {
              complete = true;
              console.log(data);
            }
          }
        }
        read.readAsText(data);
      }
    }

    reader.addEventListener(""load"", handleFile);

    reader.addEventListener(""loadend"", handleRead);

    reader.addEventListener(""progress"", handleProgress);

    reader.readAsArrayBuffer(data);

<!-- end snippet -->


";;added 375 characters in body
126378954;39313130;2801559;5;351aa833-087e-4aac-84b3-fa494cf2bd2d;2016-09-04 08:33:32.0;"You can use `progress`, `loadend` events to process `File` object one byte at a time; define a variable where processing should be paused or stopped at nth byte, every nth byte, or any byte during processing of file.

<!-- begin snippet: js hide: false console: true babel: false -->

<!-- language: lang-js -->

    var str = ""abcdefghijklmnopqrstuvwxyz"";
    var type = ""application/octet-stream"";
    var data = new Blob([], {
      type: type
    });
    var filename = ""file.txt"";
    var reader = new FileReader();
    var complete = false;
    var beforeEnd = false;
    var stopAt = str.length - 1;

    function handleFile(e) {
      data = new File([data.slice()
                       , str.slice(data.size, data.size + 1)]
                       , filename, {
                           type: type,
                           lastModifiedDate: new Date()
              });
    }

    function handleRead(e) {
      if (data.size <= str.length && !complete) {
        if (data.size === stopAt && !beforeEnd) {
          beforeEnd = true;
          var r = new FileReader();
          r.onloadend = function() {            
            alert(`stopAt: ${stopAt}\\n`
                  +`data.size: ${data.size}\\n`
                  +`result at stopAt: ${r.result[stopAt -1]}`);
            reader.readAsArrayBuffer(data);
          }
          r.readAsText(data);
        } else {
          reader.readAsArrayBuffer(data)
        }
      } else {
        console.log(""complete"")
      }
    }

    function handleProgress(e) {
      if (data.size <= str.length && !complete) {
        var read = new FileReader();
        read.onload = function() {
          if (!complete) {
            console.log(read.result);
            if (read.result.length === str.length) {
              complete = true;
              console.log(data);
            }
          }
        }
        read.readAsText(data);
      }
    }

    reader.addEventListener(""load"", handleFile);

    reader.addEventListener(""loadend"", handleRead);

    reader.addEventListener(""progress"", handleProgress);

    reader.readAsArrayBuffer(data);

<!-- end snippet -->


";;added 174 characters in body
