Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
100684527;32841902;157247;2;0720424f-be5d-42e9-89d1-e141e1818b7e;2015-09-29 10:45:26.0;"> Is this possible without storing arguments in a variable?

No, it isn't. Your options are either to store a reference to the `arguments` object itself, or use variables (or arguments) to refer to individual items from it, but you can't access the `arguments` object, itself, of your outer function from within your inner function because its own `arguments` shadows it. There is no way to bypass that shadowing, to somehow make your inner function not have its own `arguments`.

----

In comments you've said

> I would like to call it directly in order to automatise a task

That's exactly what assigning it to a variable does for you, it makes it possible to use the outer function's `arguments` from within the inner function:

<!-- begin snippet: js hide: false -->

<!-- language: lang-js -->

    function outerFunction() {
      var args = arguments;

      var myClosure = function() {
        snippet.log(JSON.stringify(args));
      };

      return myClosure;
    }

    var c = outerFunction(1, 2, 3);
    c();

<!-- language: lang-html -->

    <!-- Script provides the `snippet` object, see http://meta.stackexchange.com/a/242144/134069 -->
    <script src=""http://tjcrowder.github.io/simple-snippets-console/snippet.js""></script>

<!-- end snippet -->

";;
100687945;32841902;157247;5;5b3853a7-d43f-41ef-b85c-b1c498125e43;2015-09-29 11:32:20.0;"**Short answer**: Just use a variable. There's no good reason *not* to.

> Is this possible without storing arguments in a variable?

Your options are either to store a reference to the `arguments` object itself, or use variables (or arguments) to refer to individual items from it, but you can't access the `arguments` object, itself, of your outer function from within your inner function because its own `arguments` shadows it.

There is one very limited situation in which you could do it without doing either of those things: *During* the call to `outerFunction` (not later, if `myClosure` survives `outerFuntion` returning) you could use `outerFunction.arguments`. I don't think that's *documented* behavior (at least, I can't find it in the spec), but it works on Chrome, Firefox, and IE11. E.g.:

<!-- begin snippet: js hide: false -->

<!-- language: lang-js -->

    function outerFunction() {

      var myClosure = function(where) {
        snippet.log(where + "" "" + JSON.stringify(outerFunction.arguments));
      };

      myClosure(""Inside"");

      return myClosure;
    }

    var c = outerFunction(1, 2, 3);
    c(""Outside"");

<!-- language: lang-html -->

    <!-- Script provides the `snippet` object, see http://meta.stackexchange.com/a/242144/134069 -->
    <script src=""http://tjcrowder.github.io/simple-snippets-console/snippet.js""></script>

<!-- end snippet -->

I see **no reason to do that**, and again I don't think it's actually in the spec (I think it's unspecified behavior some code way back relied on and so browsers copied). But it does work on at least some engines provided you do it *during* the call to `outerFunction`.

----

In comments you've said

> I would like to call it directly in order to automatise a task

That's exactly what assigning it to a variable does for you, it makes it possible to use the outer function's `arguments` from within the inner function:

<!-- begin snippet: js hide: false -->

<!-- language: lang-js -->

    function outerFunction() {
      var args = arguments;

      var myClosure = function() {
        snippet.log(JSON.stringify(args));
      };

      return myClosure;
    }

    var c = outerFunction(1, 2, 3);
    c();

<!-- language: lang-html -->

    <!-- Script provides the `snippet` object, see http://meta.stackexchange.com/a/242144/134069 -->
    <script src=""http://tjcrowder.github.io/simple-snippets-console/snippet.js""></script>

<!-- end snippet -->
";;added 1208 characters in body
