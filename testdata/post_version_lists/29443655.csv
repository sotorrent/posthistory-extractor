Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
87366858;29443655;2670182;2;f78e2a02-2318-4295-bede-0838f6e1d605;2015-04-04 06:55:14.0;"You shouldn't be doing this...

	request_data = data;

and this line is referring to the global `year` when it should be the local argument sexYear

		var yearData = data.filter(function (element) { return element.YEAR == year });
should be 

		var yearData = data.filter(function (element) { return element.YEAR == sexYear });

Finally, try the change event instead of input...

	d3.select(""#sexYear"").on(""change"", function () {
		update(+this.value);
	});

";;
87367200;29443655;2670182;5;2c48ece5-88a6-45bb-8324-5b95d5fd2ddd;2015-04-04 07:08:23.0;"You shouldn't be doing this...

	request_data = data;

and this line is referring to the global `year` when it should be the local argument sexYear

		var yearData = data.filter(function (element) { return element.YEAR == year });
should be 

		var yearData = data.filter(function (element) { return element.YEAR == sexYear });

Also, try the `change` event instead of `input`...

	d3.select(""#sexYear"").on(""change"", function () {
		update(+this.value);
	});

this.value is undefined here because update is called with global `this` context

 function update(sexYear) { 
    console.log(this.value);

there are other problems as well, but that's a start.";;added 199 characters in body
87368282;29443655;2670182;5;a850d504-3e15-4081-90fd-b68a3547ccb2;2015-04-04 07:51:11.0;"You shouldn't be doing this...

	request_data = data;

and this line is referring to the global `year` when it should be the local argument sexYear

		var yearData = data.filter(function (element) { return element.YEAR == year });
should be 

		var yearData = data.filter(function (element) { return element.YEAR == sexYear });

Also, try the `change` event instead of `input`...

	d3.select(""#sexYear"").on(""change"", function () {
		update(+this.value);
	});

this.value is undefined here because update is called with global `this` context

 function update(sexYear) { 
    console.log(this.value);

you should read these two lines and think about what they are doing...

		var seriesNames = d3.keys(yearData[0]).filter(function (key) { return key !== ""CAUSE""; });
		var seriesNames = d3.keys(yearData[0]).filter(function (key) { return key !== ""YEAR""; });
I guarantee it's not what you think.

there are other problems as well, but that's a start.
";;added 303 characters in body
87368614;29443655;2670182;5;df20863c-5f43-4a43-92a1-77064f0eaa2d;2015-04-04 08:01:23.0;"You shouldn't be doing this...

	request_data = data;

and this line is referring to the global `year` when it should be the local argument sexYear

		var yearData = data.filter(function (element) { return element.YEAR == year });
should be 

		var yearData = data.filter(function (element) { return element.YEAR == sexYear });

Also, try the `change` event instead of `input`...

	d3.select(""#sexYear"").on(""change"", function () {
		update(+this.value);
	});

this.value is undefined here because update is called with global `this` context

 function update(sexYear) { 
    console.log(this.value);

you should read these two lines and think about what they are doing...

		var ageNames = d3.keys(yearData[0]).filter(function (key) { return key !== ""CAUSE""; });
		var ageNames = d3.keys(yearData[0]).filter(function (key) { return key !== ""YEAR""; });
I guarantee it's not what you think.

`ageNames` is a very confusing name for this, it should be `seriesNames` for example.  Then you can implement like this...

    			var seriesNames = ['FEMALE', 'MALE']
                //...
    			var seriesNames = d3.keys(yearData[0]).filter(function (key) {
    				return seriesNames.some(function(element, index, array) {
    					return key === element
    				})
    			});


there are other problems as well, but that's a start.
";;added 387 characters in body
87368915;29443655;2670182;5;ad77db75-92f6-457e-883d-c93f2ecf7604;2015-04-04 08:12:02.0;"You shouldn't be doing this...

	request_data = data;

and this line is referring to the global `year` when it should be the local argument sexYear

		var yearData = data.filter(function (element) { return element.YEAR == year });
should be 

		var yearData = data.filter(function (element) { return element.YEAR == sexYear });

Also, try the `change` event instead of `input`...

	d3.select(""#sexYear"").on(""change"", function () {
		update(+this.value);
	});

this.value is undefined here because update is called with global `this` context

 function update(sexYear) { 
    console.log(this.value);

you should read these two lines and think about what they are doing...

		var ageNames = d3.keys(yearData[0]).filter(function (key) { return key !== ""CAUSE""; });
		var ageNames = d3.keys(yearData[0]).filter(function (key) { return key !== ""YEAR""; });
I guarantee it's not what you think.

`ageNames` is a very confusing name for this, it should be `seriesNames` for example.  Then you can implement like this...

    			var seriesNames = ['FEMALE', 'MALE']
                //...
    			var seriesNames = d3.keys(yearData[0]).filter(function (key) {
    				return seriesNames.some(function(element, index, array) {
    					return key === element
    				})
    			});


Next, take a look at the HTML using Inspect Element in your browser and you will notice that after a while there are a LOT of rectangles.  You need to have an `exit()` in there somewhere to manage deleting the old bars...
";;added 168 characters in body
87372119;29443655;2670182;5;427bc338-7ef8-4ed7-be48-de9e518cc211;2015-04-04 09:57:16.0;"You shouldn't be doing this...

	request_data = data;

and this line is referring to the global `year` when it should be the local argument sexYear

		var yearData = data.filter(function (element) { return element.YEAR == year });
should be 

		var yearData = data.filter(function (element) { return element.YEAR == sexYear });

Also, try the `change` event instead of `input`...

	d3.select(""#sexYear"").on(""change"", function () {
		update(+this.value);
	});

this.value is undefined here because update is called with global `this` context

 function update(sexYear) { 
    console.log(this.value);

you should read these two lines and think about what they are doing...

		var ageNames = d3.keys(yearData[0]).filter(function (key) { return key !== ""CAUSE""; });
		var ageNames = d3.keys(yearData[0]).filter(function (key) { return key !== ""YEAR""; });
I guarantee it's not what you think.

`ageNames` is a very confusing name for this, it should be `seriesNames` for example.  Then you can implement like this...

    			var seriesNames = ['FEMALE', 'MALE']
                //...
    			var seriesNames = d3.keys(yearData[0]).filter(function (key) {
    				return seriesNames.some(function(element, index, array) {
    					return key === element
    				})
    			});


Finally, you need to fix the UPDATE, ENTER, EXIT structure.  Here is the function with everything fixed...

	function update(sexYear) {
		var seriesNames = ['FEMALE', 'MALE']
		console.log('update ', sexYear);

		// adjust the text on the year slider
		d3.select(""#sexYear-value"").text(sexYear);
		d3.select(""#sexYear"").property(""value"", sexYear);

		var yearData = data.filter(function (element) { return element.YEAR == sexYear });
		var seriesNames = d3.keys(yearData[0]).filter(function (key) {
			return seriesNames.some(function(element, idnex, array) {
				return key === element
			})
		});
		console.log('year data:');console.log(yearData);
		yearData.forEach(function (d) {
			d.series = seriesNames.map(function (name) { return { name: name, value: +d[name] }; });
		});

		x0.domain(yearData.map(function (d) { return d.CAUSE; }));
		x1.domain(seriesNames).rangeRoundBands([0, x0.rangeBand()]);
		y.domain([0, d3.max(yearData, function (d) { return d3.max(d.series, function (d) { return d.value; }); })]);

	//Cause groups
		//UPDATE
		var causeUpdate = svg.selectAll("".CAUSE"")
				 .data(yearData),
		//ENTER ****native d3 SIDE EFFECT**** enter selection is added to update selection 
				causeEnter = causeUpdate.enter().append(""g"")
				 .attr(""class"", ""CAUSE"")
				 .attr(""transform"", function (d) { return ""translate("" + x0(d.CAUSE) + "",0)""; }),
		//EXIT
				causeExit = causeUpdate.exit().remove(),

	//Series groups
		//UPDATE
				seriesUpdate = causeUpdate.selectAll(""rect"")
				.data(function (d) {
					return d.series;
				});
		//ENTER ****native d3 SIDE EFFECT**** enter selection is added to update selection 
		seriesUpdate.enter().append(""rect"")
		//UPDATE + ENTER
		seriesUpdate.attr(""width"", x1.rangeBand())
		.attr(""x"", function (d) {
			return x1(d.name);
		})
		.attr(""y"", function (d) {
			return y(d.value);
		})
		.attr(""height"", function (d) {
			return height - y(d.value);
		})
		.style(""fill"", function (d) {
			return color(d.name);
		})
		//EXIT
		seriesUpdate.exit().remove()
	}

<iframe width=""100%"" height=""300"" src=""//jsfiddle.net/vyab4kcf/44/embedded/"" allowfullscreen=""allowfullscreen"" frameborder=""0""></iframe>";;added 1862 characters in body
87372341;29443655;2670182;5;a5b1a55d-5333-44b0-bd9b-7c15108031c3;2015-04-04 10:04:37.0;"You shouldn't be doing this...

	request_data = data;

and this line is referring to the global `year` when it should be the local argument sexYear

		var yearData = data.filter(function (element) { return element.YEAR == year });
should be 

		var yearData = data.filter(function (element) { return element.YEAR == sexYear });

Also, try the `change` event instead of `input`...

	d3.select(""#sexYear"").on(""change"", function () {
		update(+this.value);
	});

this.value is undefined here because update is called with global `this` context

 function update(sexYear) { 
    console.log(this.value);

you should read these two lines and think about what they are doing...

		var ageNames = d3.keys(yearData[0]).filter(function (key) { return key !== ""CAUSE""; });
		var ageNames = d3.keys(yearData[0]).filter(function (key) { return key !== ""YEAR""; });
I guarantee it's not what you think.

`ageNames` is a very confusing name for this, it should be `seriesNames` for example.  Then you can implement like this...

    			var seriesNames = ['FEMALE', 'MALE']
                //...
    			var seriesNames = d3.keys(yearData[0]).filter(function (key) {
    				return seriesNames.some(function(element, index, array) {
    					return key === element
    				})
    			});


Finally, you need to fix the UPDATE, ENTER, EXIT structure.  Here is the function with everything fixed...

<!-- begin snippet: js hide: false -->

<!-- language: lang-js -->

    function main() {
    	console.clear();
    	var margin = { top: 20, right: 20, bottom: 30, left: 40 },
    			width = 480 - margin.left - margin.right,
    			height = 220 - margin.top - margin.bottom;

    	var x0 = d3.scale.ordinal()
    			.rangeRoundBands([0, width], 0.1);

    	var x1 = d3.scale.ordinal();

    	var y = d3.scale.linear()
    			.range([height, 0]);

    	var color = d3.scale.ordinal()
    			.range([""#FD8C25"", ""#99ABC4""]);

    	var xAxis = d3.svg.axis()
    			.scale(x0)
    			.orient(""bottom"");

    	var year = 1979;

    	var yAxis = d3.svg.axis()
    			.scale(y)
    			.orient(""left"")
    			.tickFormat(d3.format("".2s""));

    	var svg = d3.select(""body"").append(""svg"")
    			.attr(""width"", width + margin.left + margin.right)
    			.attr(""height"", height + margin.top + margin.bottom)
    			.append(""g"")
    			.attr(""transform"", ""translate("" + margin.left + "","" + margin.top + "")"");

    	var request_data = d3.csv(""http://www.sfu.ca/~gdwang/Sex.csv"", function (error, data) {
    		request_data = data;

    		console.log('data returned')
    		console.log('error: ' + error)

    		d3.select(""#sexYear"").on(""change"", function () {
    			update(+this.value);
    		});

    		update(year);

    		// update the year
    		function update(sexYear) {
    			var seriesNames = ['FEMALE', 'MALE']
    			console.log('update ', sexYear);

    			// adjust the text on the year slider
    			d3.select(""#sexYear-value"").text(sexYear);
    			d3.select(""#sexYear"").property(""value"", sexYear);

    			var yearData = data.filter(function (element) { return element.YEAR == sexYear });
    			var seriesNames = d3.keys(yearData[0]).filter(function (key) {
    				return seriesNames.some(function(element, idnex, array) {
    					return key === element
    				})
    			});
    			console.log('year data:');console.log(yearData);
    			yearData.forEach(function (d) {
    				d.series = seriesNames.map(function (name) { return { name: name, value: +d[name] }; });
    			});

    			x0.domain(yearData.map(function (d) { return d.CAUSE; }));
    			x1.domain(seriesNames).rangeRoundBands([0, x0.rangeBand()]);
    			y.domain([0, d3.max(yearData, function (d) { return d3.max(d.series, function (d) { return d.value; }); })]);

    		//Cause groups
    			//UPDATE
    			var causeUpdate = svg.selectAll("".CAUSE"")
    					 .data(yearData),
    			//ENTER ****native d3 SIDE EFFECT**** enter selection is added to update selection 
    					causeEnter = causeUpdate.enter().append(""g"")
    					 .attr(""class"", ""CAUSE"")
    					 .attr(""transform"", function (d) { return ""translate("" + x0(d.CAUSE) + "",0)""; }),
    			//EXIT
    					causeExit = causeUpdate.exit().remove(),

    		//Series groups
    			//UPDATE
    					seriesUpdate = causeUpdate.selectAll(""rect"")
    					.data(function (d) {
    						return d.series;
    					});
    			//ENTER ****native d3 SIDE EFFECT**** enter selection is added to update selection 
    			seriesUpdate.enter().append(""rect"")
    			//UPDATE + ENTER
    			seriesUpdate.attr(""width"", x1.rangeBand())
    			.attr(""x"", function (d) {
    				return x1(d.name);
    			})
    			.attr(""y"", function (d) {
    				return y(d.value);
    			})
    			.attr(""height"", function (d) {
    				return height - y(d.value);
    			})
    			.style(""fill"", function (d) {
    				return color(d.name);
    			})
    			//EXIT
    			seriesUpdate.exit().remove()
    		}

    		//draw the bars
    		svg.append(""g"")
    				.attr(""class"", ""x axis"")
    				.attr(""transform"", ""translate(0,"" + height + "")"")
    				.call(xAxis);

    		svg.append(""g"")
    				.attr(""class"", ""y axis"")
    				.call(yAxis)
    				.append(""text"")
    				.attr(""transform"", ""rotate(-90)"")
    				.attr(""y"", 6)
    				.attr(""dy"", "".71em"")
    				.style(""text-anchor"", ""end"")
    				.text(""Potential Years Lost"");

    	})
    };
    window.onload = main

<!-- language: lang-css -->

    body {
      font: 10px sans-serif;
    }

    .axis path,
    .axis line {
      fill: none;
      stroke: #000;
      shape-rendering: crispEdges;
    }

    .bar {
      fill: steelblue;
    }

    .x.axis path {
      display: none;
    }

<!-- language: lang-html -->

    <script src=""https://cdnjs.cloudflare.com/ajax/libs/d3/3.4.11/d3.min.js""></script>
    <script src=""https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js""></script>
        <label for=""sexYear"" style=""display: inline-block; width: 200px; text-align: right"">
            Year = <span id=""sexYear-value"">…</span>
        </label>
        <input type=""range"" min=""1979"" max=""1999"" id=""sexYear"">

<!-- end snippet -->

";;added 1862 characters in body
87372874;29443655;2670182;5;68ec09b5-e158-48bd-b378-906f37ed43bb;2015-04-04 10:20:14.0;"You shouldn't be doing this...

	request_data = data;

and this line is referring to the global `year` when it should be the local argument sexYear

		var yearData = data.filter(function (element) { return element.YEAR == year });
should be 

		var yearData = data.filter(function (element) { return element.YEAR == sexYear });

Also, try the `change` event instead of `input`...

	d3.select(""#sexYear"").on(""change"", function () {
		update(+this.value);
	});

this.value is undefined here because update is called with global `this` context

 function update(sexYear) { 
    console.log(this.value);

you should read these two lines and think about what they are doing...

		var ageNames = d3.keys(yearData[0]).filter(function (key) { return key !== ""CAUSE""; });
		var ageNames = d3.keys(yearData[0]).filter(function (key) { return key !== ""YEAR""; });
I guarantee it's not what you think.

`ageNames` is a very confusing name for this, it should be `seriesNames` for example.  Then you can implement like this...

    			var seriesNames = ['FEMALE', 'MALE']
                //...
    			var seriesNames = d3.keys(yearData[0]).filter(function (key) {
    				return seriesNames.some(function(element, index, array) {
    					return key === element
    				})
    			});


Finally, you need to fix the UPDATE, ENTER, EXIT structure.  Here is the function with everything fixed...

<!-- begin snippet: js hide: false -->

<!-- language: lang-js -->

    function main() {
    	console.clear();
    	var margin = { top: 10, right: 10, bottom: 20, left: 30 },
    			width = 400 - margin.left - margin.right,
    			height = 150 - margin.top - margin.bottom;

    	var x0 = d3.scale.ordinal()
    			.rangeRoundBands([0, width], 0.1);

    	var x1 = d3.scale.ordinal();

    	var y = d3.scale.linear()
    			.range([height, 0]);

    	var color = d3.scale.ordinal()
    			.range([""#FD8C25"", ""#99ABC4""]);

    	var xAxis = d3.svg.axis()
    			.scale(x0)
    			.orient(""bottom"");

    	var year = 1979;

    	var yAxis = d3.svg.axis()
    			.scale(y)
    			.orient(""left"")
    			.tickFormat(d3.format("".2s""));
        
    	var svg = d3.select(""body"").append(""svg"")
    			.attr(""width"", width + margin.left + margin.right)
    			.attr(""height"", height + margin.top + margin.bottom)
    			.append(""g"")
    			.attr(""transform"", ""translate("" + margin.left + "","" + margin.top + "")"");

    	var request_data = d3.csv(""http://www.sfu.ca/~gdwang/Sex.csv"", function (error, data) {
    		request_data = data;

    		console.log('data returned')
    		console.log('error: ' + error)

    		d3.select(""#sexYear"").on(""change"", function () {
    			update(+this.value);
    		});

    		update(year);

    		// update the year
    		function update(sexYear) {
    			var seriesNames = ['FEMALE', 'MALE']
    			console.log('update ', sexYear);

    			// adjust the text on the year slider
    			d3.select(""#sexYear-value"").text(sexYear);
    			d3.select(""#sexYear"").property(""value"", sexYear);

    			var yearData = data.filter(function (element) { return element.YEAR == sexYear });
    			var seriesNames = d3.keys(yearData[0]).filter(function (key) {
    				return seriesNames.some(function(element, idnex, array) {
    					return key === element
    				})
    			});
    			console.log('year data:');console.log(yearData);
    			yearData.forEach(function (d) {
    				d.series = seriesNames.map(function (name) { return { name: name, value: +d[name] }; });
    			});

    			x0.domain(yearData.map(function (d) { return d.CAUSE; }));
    			x1.domain(seriesNames).rangeRoundBands([0, x0.rangeBand()]);
    			y.domain([0, d3.max(yearData, function (d) { return d3.max(d.series, function (d) { return d.value; }); })]);

    		//Cause groups
    			//UPDATE
    			var causeUpdate = svg.selectAll("".CAUSE"")
    					 .data(yearData),
    			//ENTER ****native d3 SIDE EFFECT**** enter selection is added to update selection 
    					causeEnter = causeUpdate.enter().append(""g"")
    					 .attr(""class"", ""CAUSE"")
    					 .attr(""transform"", function (d) { return ""translate("" + x0(d.CAUSE) + "",0)""; }),
    			//EXIT
    					causeExit = causeUpdate.exit().remove(),

    		//Series groups
    			//UPDATE
    					seriesUpdate = causeUpdate.selectAll(""rect"")
    					.data(function (d) {
    						return d.series;
    					});
    			//ENTER ****native d3 SIDE EFFECT**** enter selection is added to update selection 
    			seriesUpdate.enter().append(""rect"")
    			//UPDATE + ENTER
    			seriesUpdate.attr(""width"", x1.rangeBand())
    			.attr(""x"", function (d) {
    				return x1(d.name);
    			})
    			.attr(""y"", function (d) {
    				return y(d.value);
    			})
    			.attr(""height"", function (d) {
    				return height - y(d.value);
    			})
    			.style(""fill"", function (d) {
    				return color(d.name);
    			})
    			//EXIT
    			seriesUpdate.exit().remove()
    		}

    		//draw the bars
    		svg.append(""g"")
    				.attr(""class"", ""x axis"")
    				.attr(""transform"", ""translate(0,"" + height + "")"")
    				.call(xAxis);

    		svg.append(""g"")
    				.attr(""class"", ""y axis"")
    				.call(yAxis)
    				.append(""text"")
    				.attr(""transform"", ""rotate(-90)"")
    				.attr(""y"", 6)
    				.attr(""dy"", "".71em"")
    				.style(""text-anchor"", ""end"")
    				.text(""Potential Years Lost"");

          d3.selectAll("".tick > text"")
          .style(""font-size"", 6);

    	})
    };
    window.onload = main

<!-- language: lang-css -->

    body {
      font: 10px sans-serif;
    }

    .axis path,
    .axis line {
      fill: none;
      stroke: #000;
      shape-rendering: crispEdges;
    }

    .bar {
      fill: steelblue;
    }

    .x.axis path {
      display: none;
    }

<!-- language: lang-html -->

    <script src=""https://cdnjs.cloudflare.com/ajax/libs/d3/3.4.11/d3.min.js""></script>
    <script src=""https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js""></script>
        <label for=""sexYear"" style=""display: inline-block; width: 200px; text-align: right"">
            Year = <span id=""sexYear-value"">…</span>
        </label>
        <input type=""range"" min=""1979"" max=""1999"" id=""sexYear"">

<!-- end snippet -->

";;added 1862 characters in body
87380500;29443655;2670182;5;2421a322-2dae-411b-a105-2903f8f09f94;2015-04-04 13:46:52.0;"You shouldn't be doing this...

	request_data = data;

and this line is referring to the global `year` when it should be the local argument sexYear

		var yearData = data.filter(function (element) { return element.YEAR == year });
should be 

		var yearData = data.filter(function (element) { return element.YEAR == sexYear });

Also, try the `change` event instead of `input`...

	d3.select(""#sexYear"").on(""change"", function () {
		update(+this.value);
	});

`this.value` is undefined here because update is called with global `this` context

 

    function update(sexYear) { 
        console.log(this.value);

you should read these two lines and think about what they are doing...

		var ageNames = d3.keys(yearData[0]).filter(function (key) { return key !== ""CAUSE""; });
		var ageNames = d3.keys(yearData[0]).filter(function (key) { return key !== ""YEAR""; });
I guarantee it's not what you think.

`ageNames` is a very confusing name for this, it should be `seriesNames` for example.  Then you can implement like this...

    			var seriesNames = ['FEMALE', 'MALE']
                //...
    			var seriesNames = d3.keys(yearData[0]).filter(function (key) {
    				return seriesNames.some(function(element, index, array) {
    					return key === element
    				})
    			});


Finally, you need to fix the UPDATE, ENTER, EXIT structure.  Here is the function with everything fixed...

<!-- begin snippet: js hide: false -->

<!-- language: lang-js -->

    function main() {
    	console.clear();
    	var margin = { top: 10, right: 10, bottom: 20, left: 30 },
    			width = 400 - margin.left - margin.right,
    			height = 150 - margin.top - margin.bottom;

    	var x0 = d3.scale.ordinal()
    			.rangeRoundBands([0, width], 0.1);

    	var x1 = d3.scale.ordinal();

    	var y = d3.scale.linear()
    			.range([height, 0]);

    	var color = d3.scale.ordinal()
    			.range([""#FD8C25"", ""#99ABC4""]);

    	var xAxis = d3.svg.axis()
    			.scale(x0)
    			.orient(""bottom"");

    	var year = 1979;

    	var yAxis = d3.svg.axis()
    			.scale(y)
    			.orient(""left"")
    			.tickFormat(d3.format("".2s""));
        
    	var svg = d3.select(""body"").append(""svg"")
    			.attr(""width"", width + margin.left + margin.right)
    			.attr(""height"", height + margin.top + margin.bottom)
    			.append(""g"")
    			.attr(""transform"", ""translate("" + margin.left + "","" + margin.top + "")"");

    	var request_data = d3.csv(""http://www.sfu.ca/~gdwang/Sex.csv"", function (error, data) {
    		request_data = data;

    		console.log('data returned')
    		console.log('error: ' + error)

    		d3.select(""#sexYear"").on(""change"", function () {
    			update(+this.value);
    		});

    		update(year);

    		// update the year
    		function update(sexYear) {
    			var seriesNames = ['FEMALE', 'MALE']
    			console.log('update ', sexYear);

    			// adjust the text on the year slider
    			d3.select(""#sexYear-value"").text(sexYear);
    			d3.select(""#sexYear"").property(""value"", sexYear);

    			var yearData = data.filter(function (element) { return element.YEAR == sexYear });
    			var seriesNames = d3.keys(yearData[0]).filter(function (key) {
    				return seriesNames.some(function(element, idnex, array) {
    					return key === element
    				})
    			});
    			console.log('year data:');console.log(yearData);
    			yearData.forEach(function (d) {
    				d.series = seriesNames.map(function (name) { return { name: name, value: +d[name] }; });
    			});

    			x0.domain(yearData.map(function (d) { return d.CAUSE; }));
    			x1.domain(seriesNames).rangeRoundBands([0, x0.rangeBand()]);
    			y.domain([0, d3.max(yearData, function (d) { return d3.max(d.series, function (d) { return d.value; }); })]);

    		//Cause groups
    			//UPDATE
    			var causeUpdate = svg.selectAll("".CAUSE"")
    					 .data(yearData),
    			//ENTER ****native d3 SIDE EFFECT**** enter selection is added to update selection 
    					causeEnter = causeUpdate.enter().append(""g"")
    					 .attr(""class"", ""CAUSE"")
    					 .attr(""transform"", function (d) { return ""translate("" + x0(d.CAUSE) + "",0)""; }),
    			//EXIT
    					causeExit = causeUpdate.exit().remove(),

    		//Series groups
    			//UPDATE
    					seriesUpdate = causeUpdate.selectAll(""rect"")
    					.data(function (d) {
    						return d.series;
    					});
    			//ENTER ****native d3 SIDE EFFECT**** enter selection is added to update selection 
    			seriesUpdate.enter().append(""rect"")
    			//UPDATE + ENTER
    			seriesUpdate.attr(""width"", x1.rangeBand())
    			.attr(""x"", function (d) {
    				return x1(d.name);
    			})
    			.attr(""y"", function (d) {
    				return y(d.value);
    			})
    			.attr(""height"", function (d) {
    				return height - y(d.value);
    			})
    			.style(""fill"", function (d) {
    				return color(d.name);
    			})
    			//EXIT
    			seriesUpdate.exit().remove()
    		}

    		//draw the bars
    		svg.append(""g"")
    				.attr(""class"", ""x axis"")
    				.attr(""transform"", ""translate(0,"" + height + "")"")
    				.call(xAxis);

    		svg.append(""g"")
    				.attr(""class"", ""y axis"")
    				.call(yAxis)
    				.append(""text"")
    				.attr(""transform"", ""rotate(-90)"")
    				.attr(""y"", 6)
    				.attr(""dy"", "".71em"")
    				.style(""text-anchor"", ""end"")
    				.text(""Potential Years Lost"");

          d3.selectAll("".tick > text"")
          .style(""font-size"", 6);

    	})
    };
    window.onload = main

<!-- language: lang-css -->

    body {
      font: 10px sans-serif;
    }

    .axis path,
    .axis line {
      fill: none;
      stroke: #000;
      shape-rendering: crispEdges;
    }

    .bar {
      fill: steelblue;
    }

    .x.axis path {
      display: none;
    }

<!-- language: lang-html -->

    <script src=""https://cdnjs.cloudflare.com/ajax/libs/d3/3.4.11/d3.min.js""></script>
    <script src=""https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js""></script>
        <label for=""sexYear"" style=""display: inline-block; width: 200px; text-align: right"">
            Year = <span id=""sexYear-value"">…</span>
        </label>
        <input type=""range"" min=""1979"" max=""1999"" id=""sexYear"">

<!-- end snippet -->


";;added 2 characters in body
87383764;29443655;2670182;5;91317636-01ad-4d12-89e7-ec16583796c5;2015-04-04 15:14:18.0;"You shouldn't be doing this...

	request_data = data;

and this line is referring to the global `year` when it should be the local argument sexYear

		var yearData = data.filter(function (element) { return element.YEAR == year });
should be 

		var yearData = data.filter(function (element) { return element.YEAR == sexYear });

Also, try the `change` event instead of `input`...

	d3.select(""#sexYear"").on(""change"", function () {
		update(+this.value);
	});

`this.value` is undefined here because update is called with global `this` context

 

    function update(sexYear) { 
        console.log(this.value);

you should read these two lines and think about what they are doing...

		var ageNames = d3.keys(yearData[0]).filter(function (key) { return key !== ""CAUSE""; });
		var ageNames = d3.keys(yearData[0]).filter(function (key) { return key !== ""YEAR""; });
I guarantee it's not what you think.

`ageNames` is a very confusing name for this, it should be `seriesNames` for example.  Then you can implement like this...

    			var seriesNames = ['FEMALE', 'MALE']
                //...
    			var seriesNames = d3.keys(yearData[0]).filter(function (key) {
    				return seriesNames.some(function(element, index, array) {
    					return key === element
    				})
    			});


Finally, you need to fix the UPDATE, ENTER, EXIT structure.  Here is the function with everything fixed...

<!-- begin snippet: js hide: false -->

<!-- language: lang-js -->

    window.onload = function () {
    	console.clear();
    	var margin = { top: 10, right: 10, bottom: 35, left: 30 },
    			width = 400 - margin.left - margin.right,
    			height = 150 - margin.top - margin.bottom;

    	var x0 = d3.scale.ordinal()
    			.rangeRoundBands([0, width], 0.1);

    	var x1 = d3.scale.ordinal();

    	var y = d3.scale.linear()
    			.range([height, 0]);

    	var color = d3.scale.ordinal()
    			.range([""#FD8C25"", ""#99ABC4""]);

    	var xAxis = d3.svg.axis()
    			.scale(x0)
    			.orient(""bottom"");

    	var year = 1979;

    	var yAxis = d3.svg.axis()
    			.scale(y)
    			.orient(""left"")
    			.tickFormat(d3.format("".2s""));
        
    	var svg = d3.select(""body"").append(""svg"")
    			.attr(""width"", width + margin.left + margin.right)
    			.attr(""height"", height + margin.top + margin.bottom)
    			.append(""g"")
    			.attr(""transform"", ""translate("" + margin.left + "","" + margin.top + "")"");

    	var request_data = d3.csv(""http://www.sfu.ca/~gdwang/Sex.csv"", function (error, data) {

    		console.log('data returned')
    		console.log('error: ' + error)

    		d3.select(""#sexYear"").on(""change"", function () {
    			update(+this.value);
    		});

    		update(year);

    		// update the year
    		function update(sexYear) {
    			var seriesNames = ['FEMALE', 'MALE']
    			console.log('update ', sexYear);

    			// adjust the text on the year slider
    			d3.select(""#sexYear-value"").text(sexYear);
    			d3.select(""#sexYear"").property(""value"", sexYear);

    			var yearData = data.filter(function (element) { return element.YEAR == sexYear });
    			var seriesNames = d3.keys(yearData[0]).filter(function (key) {
    				return seriesNames.some(function(element, idnex, array) {
    					return key === element
    				})
    			});
    			console.log('year data:');console.log(yearData);
    			yearData.forEach(function (d) {
    				d.series = seriesNames.map(function (name) { return { name: name, value: +d[name] }; });
    			});

    			x0.domain(yearData.map(function (d) { return d.CAUSE; }));
    			x1.domain(seriesNames).rangeRoundBands([0, x0.rangeBand()]);
    			y.domain([0, d3.max(yearData, function (d) { return d3.max(d.series, function (d) { return d.value; }); })]);

    		//Cause groups
    			//UPDATE
    			var causeUpdate = svg.selectAll("".CAUSE"")
    					 .data(yearData),
    			//ENTER ****native d3 SIDE EFFECT**** enter selection is added to update selection 
    					causeEnter = causeUpdate.enter().append(""g"")
    					 .attr(""class"", ""CAUSE"")
    					 .attr(""transform"", function (d) { return ""translate("" + x0(d.CAUSE) + "",0)""; }),
    			//EXIT
    					causeExit = causeUpdate.exit().remove(),

    		//Series groups
    			//UPDATE
    					seriesUpdate = causeUpdate.selectAll(""rect"")
    					.data(function (d) {
    						return d.series;
    					});
    			//ENTER ****native d3 SIDE EFFECT**** enter selection is added to update selection 
    			seriesUpdate.enter().append(""rect"")
    			//UPDATE + ENTER
    			seriesUpdate.attr(""width"", x1.rangeBand())
    			.style(""fill"", function (d) {
    				return color(d.name);
    			})
                .transition()
      			  .attr(""x"", function (d) {
    				return x1(d.name);
    			  })
    			  .attr(""y"", function (d) {
    				return y(d.value);
    			  })
    			  .attr(""height"", function (d) {
    				return height - y(d.value);
    			  })
    			//EXIT
    			seriesUpdate.exit().remove()
    		}

    		//draw the bars
    		svg.append(""g"")
    				.attr(""class"", ""x axis"")
    				.attr(""transform"", ""translate(0,"" + height + "")"")
    				.call(xAxis)
    				.selectAll('text')
    					.attr('transform', 'rotate(-15)')
    					.style('text-anchor', 'end');

    		svg.append(""g"")
    				.attr(""class"", ""y axis"")
    				.call(yAxis)
    				.append(""text"")
    				.attr(""transform"", ""rotate(-90)"")
    				.attr(""y"", 6)
    				.attr(""dy"", "".71em"")
    				.style(""text-anchor"", ""end"")
    				.text(""Potential Years Lost"");

          d3.selectAll("".tick > text"")
          .style(""font-size"", 6);

    	})
    };

<!-- language: lang-css -->

    body {
      font: 10px sans-serif;
    }

    .axis path,
    .axis line {
      fill: none;
      stroke: #000;
      shape-rendering: crispEdges;
    }

    .bar {
      fill: steelblue;
    }

    .x.axis path {
      display: none;
    }

<!-- language: lang-html -->

    <script src=""https://cdnjs.cloudflare.com/ajax/libs/d3/3.4.11/d3.min.js""></script>
    <script src=""https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js""></script>
        <label for=""sexYear"" style=""display: inline-block; width: 200px; text-align: right"">
            Year = <span id=""sexYear-value"">…</span>
        </label>
        <input type=""range"" min=""1979"" max=""1999"" id=""sexYear"">

<!-- end snippet -->


";;added 3 characters in body
87384094;29443655;2670182;5;d572fb00-2774-485a-8dbc-d15742ce169b;2015-04-04 15:23:18.0;"You shouldn't be doing this...

	request_data = data;

and this line is referring to the global `year` when it should be the local argument sexYear

		var yearData = data.filter(function (element) { return element.YEAR == year });
should be 

		var yearData = data.filter(function (element) { return element.YEAR == sexYear });

Also, try the `change` event as well as `input` so it works in IE...

	d3.select(""#sexYear"").on(""change"", function () {
		update(+this.value);
	});

`this.value` is undefined here because update is called with global `this` context

 

    function update(sexYear) { 
        console.log(this.value);

you should read these two lines and think about what they are doing...

		var ageNames = d3.keys(yearData[0]).filter(function (key) { return key !== ""CAUSE""; });
		var ageNames = d3.keys(yearData[0]).filter(function (key) { return key !== ""YEAR""; });
I guarantee it's not what you think.

`ageNames` is a very confusing name for this, it should be `seriesNames` for example.  Then you can implement like this...

    			var seriesNames = ['FEMALE', 'MALE']
                //...
    			var seriesNames = d3.keys(yearData[0]).filter(function (key) {
    				return seriesNames.some(function(element, index, array) {
    					return key === element
    				})
    			});


Finally, you need to fix the UPDATE, ENTER, EXIT structure.  Here is the function with everything fixed...

<!-- begin snippet: js hide: false -->

<!-- language: lang-js -->

    window.onload = function () {
    	console.clear();
    	var margin = { top: 10, right: 10, bottom: 35, left: 30 },
    			width = 400 - margin.left - margin.right,
    			height = 150 - margin.top - margin.bottom;

    	var x0 = d3.scale.ordinal()
    			.rangeRoundBands([0, width], 0.1);

    	var x1 = d3.scale.ordinal();

    	var y = d3.scale.linear()
    			.range([height, 0]);

    	var color = d3.scale.ordinal()
    			.range([""#FD8C25"", ""#99ABC4""]);

    	var xAxis = d3.svg.axis()
    			.scale(x0)
    			.orient(""bottom"");

    	var year = 1979;

    	var yAxis = d3.svg.axis()
    			.scale(y)
    			.orient(""left"")
    			.tickFormat(d3.format("".2s""));
        
    	var svg = d3.select(""body"").append(""svg"")
    			.attr(""width"", width + margin.left + margin.right)
    			.attr(""height"", height + margin.top + margin.bottom)
    			.append(""g"")
    			.attr(""transform"", ""translate("" + margin.left + "","" + margin.top + "")"");

    	var request_data = d3.csv(""http://www.sfu.ca/~gdwang/Sex.csv"", function (error, data) {

    		console.log('data returned')
    		console.log('error: ' + error)

    		d3.select(""#sexYear"").on(""change"", function () {
    			update(+this.value);
    		});

    		d3.select(""#sexYear"").on(""input"", function () {
    			update(+this.value);
    		});
    		update(year);

    		// update the year
    		function update(sexYear) {
    			var seriesNames = ['FEMALE', 'MALE']
    			console.log('update ', sexYear);

    			// adjust the text on the year slider
    			d3.select(""#sexYear-value"").text(sexYear);
    			d3.select(""#sexYear"").property(""value"", sexYear);

    			var yearData = data.filter(function (element) { return element.YEAR == sexYear });
    			var seriesNames = d3.keys(yearData[0]).filter(function (key) {
    				return seriesNames.some(function(element, idnex, array) {
    					return key === element
    				})
    			});
    			console.log('year data:');console.log(yearData);
    			yearData.forEach(function (d) {
    				d.series = seriesNames.map(function (name) { return { name: name, value: +d[name] }; });
    			});

    			x0.domain(yearData.map(function (d) { return d.CAUSE; }));
    			x1.domain(seriesNames).rangeRoundBands([0, x0.rangeBand()]);
    			y.domain([0, d3.max(yearData, function (d) { return d3.max(d.series, function (d) { return d.value; }); })]);

    		//Cause groups
    			//UPDATE
    			var causeUpdate = svg.selectAll("".CAUSE"")
    					 .data(yearData),
    			//ENTER ****native d3 SIDE EFFECT**** enter selection is added to update selection 
    					causeEnter = causeUpdate.enter().append(""g"")
    					 .attr(""class"", ""CAUSE"")
    					 .attr(""transform"", function (d) { return ""translate("" + x0(d.CAUSE) + "",0)""; }),
    			//EXIT
    					causeExit = causeUpdate.exit().remove(),

    		//Series groups
    			//UPDATE
    					seriesUpdate = causeUpdate.selectAll(""rect"")
    					.data(function (d) {
    						return d.series;
    					});
    			//ENTER ****native d3 SIDE EFFECT**** enter selection is added to update selection 
    			seriesUpdate.enter().append(""rect"")
    			//UPDATE + ENTER
    			seriesUpdate.attr(""width"", x1.rangeBand())
    			.style(""fill"", function (d) {
    				return color(d.name);
    			})
                .transition()
      			  .attr(""x"", function (d) {
    				return x1(d.name);
    			  })
    			  .attr(""y"", function (d) {
    				return y(d.value);
    			  })
    			  .attr(""height"", function (d) {
    				return height - y(d.value);
    			  })
    			//EXIT
    			seriesUpdate.exit().remove()
    		}

    		//draw the bars
    		svg.append(""g"")
    				.attr(""class"", ""x axis"")
    				.attr(""transform"", ""translate(0,"" + height + "")"")
    				.call(xAxis)
    				.selectAll('text')
    					.attr('transform', 'rotate(-15)')
    					.style('text-anchor', 'end');

    		svg.append(""g"")
    				.attr(""class"", ""y axis"")
    				.call(yAxis)
    				.append(""text"")
    				.attr(""transform"", ""rotate(-90)"")
    				.attr(""y"", 6)
    				.attr(""dy"", "".71em"")
    				.style(""text-anchor"", ""end"")
    				.text(""Potential Years Lost"");

          d3.selectAll("".tick > text"")
          .style(""font-size"", 6);

    	})
    };

<!-- language: lang-css -->

    body {
      font: 10px sans-serif;
    }

    .axis path,
    .axis line {
      fill: none;
      stroke: #000;
      shape-rendering: crispEdges;
    }

    .bar {
      fill: steelblue;
    }

    .x.axis path {
      display: none;
    }

<!-- language: lang-html -->

    <script src=""https://cdnjs.cloudflare.com/ajax/libs/d3/3.4.11/d3.min.js""></script>
    <script src=""https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js""></script>
        <label for=""sexYear"" style=""display: inline-block; width: 200px; text-align: right"">
            Year = <span id=""sexYear-value"">…</span>
        </label>
        <input type=""range"" min=""1979"" max=""1999"" id=""sexYear"">

<!-- end snippet -->


";;added 113 characters in body
87430791;29443655;2670182;5;2dddcaa8-ba22-48ca-ac21-276cee580945;2015-04-05 17:24:51.0;"You shouldn't be doing this...

	request_data = data;

and this line is referring to the global `year` when it should be the local argument sexYear

		var yearData = data.filter(function (element) { return element.YEAR == year });
should be 

		var yearData = data.filter(function (element) { return element.YEAR == sexYear });

Also, try the `change` event as well as `input` so it works in IE...

	d3.select(""#sexYear"").on(""change"", function () {
		update(+this.value);
	});

`this.value` is undefined here because update is called with global `this` context

 

    function update(sexYear) { 
        console.log(this.value);

you should read these two lines and think about what they are doing...

		var ageNames = d3.keys(yearData[0]).filter(function (key) { return key !== ""CAUSE""; });
		var ageNames = d3.keys(yearData[0]).filter(function (key) { return key !== ""YEAR""; });
I guarantee it's not what you think.

`ageNames` is a very confusing name for this, it should be `seriesNames` for example.  Then you can implement like this...

	var notSeriesNames = ['CAUSE', 'YEAR']
    //...
	var seriesNames = d3.keys(yearData[0]).filter(function (key) {
		return notSeriesNames.every(function (e, i, i) { return key != e })
	});

Finally, you need to fix the UPDATE, ENTER, EXIT structure.  Here is the function with everything fixed...

<!-- begin snippet: js hide: false -->

<!-- language: lang-js -->

    window.onload = function () {
    	console.clear();
    	var margin = { top: 10, right: 10, bottom: 35, left: 30 },
    			width = 400 - margin.left - margin.right,
    			height = 150 - margin.top - margin.bottom;

    	var x0 = d3.scale.ordinal()
    			.rangeRoundBands([0, width], 0.1);

    	var x1 = d3.scale.ordinal();

    	var y = d3.scale.linear()
    			.range([height, 0]);

    	var color = d3.scale.ordinal()
    			.range([""#FD8C25"", ""#99ABC4""]);

    	var xAxis = d3.svg.axis()
    			.scale(x0)
    			.orient(""bottom"");

    	var year = 1979;

    	var yAxis = d3.svg.axis()
    			.scale(y)
    			.orient(""left"")
    			.tickFormat(d3.format("".2s""));

    	var svg = d3.select(""body"").append(""svg"")
    			.attr(""width"", width + margin.left + margin.right)
    			.attr(""height"", height + margin.top + margin.bottom)
    			.append(""g"")
    			.attr(""transform"", ""translate("" + margin.left + "","" + margin.top + "")"");

    	var request_data = d3.csv(""http://www.sfu.ca/~gdwang/Sex.csv"", function (error, data) {

    		d3.select(""#sexYear"").on(""change"", function () {
    			update(+this.value);
    		});

    		d3.select(""#sexYear"").on(""input"", function () {
    			update(+this.value);
    		});
    		update(year);

    		// update the year
    		function update(sexYear) {
    			var notSeriesNames = ['CAUSE', 'YEAR', 'series']
    			console.log('update ', sexYear);

    			// adjust the text on the year slider
    			d3.select(""#sexYear-value"").text(sexYear);
    			d3.select(""#sexYear"").property(""value"", sexYear);

    			var yearData = data.filter(function (element) { return element.YEAR == sexYear });

    			var seriesNames = d3.keys(yearData[0]).filter(function (key) {
    				return notSeriesNames.every(function (element, idnex, array) {
    					return key != element
    				})
    			});

    			yearData.forEach(function (d) {
    				d.series = seriesNames.map(function (name) { return { name: name, value: +d[name] }; });
    			});

    			x0.domain(yearData.map(function (d) { return d.CAUSE; }));
    			x1.domain(seriesNames).rangeRoundBands([0, x0.rangeBand()]);
    			y.domain([0, d3.max(yearData, function (d) { return d3.max(d.series, function (d) { return d.value; }); })]);

    			//Cause groups
    			//UPDATE
    			var causeUpdate = svg.selectAll("".CAUSE"")
    					 .data(yearData),
    			//ENTER ****native d3 SIDE EFFECT**** enter selection is added to update selection 
    					causeEnter = causeUpdate.enter().append(""g"")
    					 .attr(""class"", ""CAUSE"")
    					 .attr(""transform"", function (d) { return ""translate("" + x0(d.CAUSE) + "",0)""; }),
    			//EXIT
    					causeExit = causeUpdate.exit().remove(),

    		//Series groups
    			//UPDATE
    					seriesUpdate = causeUpdate.selectAll(""rect"")
    					.data(function (d) {
    						return d.series;
    					});
    			//ENTER ****native d3 SIDE EFFECT**** enter selection is added to update selection 
    			seriesUpdate.enter().append(""rect"")
    			//UPDATE + ENTER
    			seriesUpdate.attr(""width"", x1.rangeBand())
    			.style(""fill"", function (d) {
    				return color(d.name);
    			})
    						.transition()
    					.attr(""x"", function (d) {
    						return x1(d.name);
    					})
    				.attr(""y"", function (d) {
    					return y(d.value);
    				})
    				.attr(""height"", function (d) {
    					return height - y(d.value);
    				})
    			//EXIT
    			seriesUpdate.exit().remove()
    		}

    		//draw the bars
    		svg.append(""g"")
    				.attr(""class"", ""x axis"")
    				.attr(""transform"", ""translate(0,"" + height + "")"")
    				.call(xAxis)
    				.selectAll('text')
    					.attr('transform', 'rotate(-15)')
    					.style('text-anchor', 'end');

    		svg.append(""g"")
    				.attr(""class"", ""y axis"")
    				.call(yAxis)
    				.append(""text"")
    				.attr(""transform"", ""rotate(-90)"")
    				.attr(""y"", 6)
    				.attr(""dy"", "".71em"")
    				.style(""text-anchor"", ""end"")
    				.text(""Potential Years Lost"");

    		d3.selectAll("".tick > text"")
    		.style(""font-size"", 6);

    	})
    };

<!-- language: lang-css -->

    body {
      font: 10px sans-serif;
    }

    .axis path,
    .axis line {
      fill: none;
      stroke: #000;
      shape-rendering: crispEdges;
    }

    .bar {
      fill: steelblue;
    }

    .x.axis path {
      display: none;
    }

<!-- language: lang-html -->

    <script src=""https://cdnjs.cloudflare.com/ajax/libs/d3/3.4.11/d3.min.js""></script>
    <script src=""https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js""></script>
        <label for=""sexYear"" style=""display: inline-block; width: 200px; text-align: right"">
            Year = <span id=""sexYear-value"">…</span>
        </label>
        <input type=""range"" min=""1979"" max=""1999"" id=""sexYear"">

<!-- end snippet -->



";;fixed a moot error in the way series names was derived
