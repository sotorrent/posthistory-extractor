Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
87366858;29443655;2670182;2;f78e2a02-2318-4295-bede-0838f6e1d605;2015-04-04 06:55:14.0;"You shouldn't be doing this...&#xD;&#xA;&#xD;&#xA;	request_data = data;&#xD;&#xA;&#xD;&#xA;and this line is referring to the global `year` when it should be the local argument sexYear&#xD;&#xA;&#xD;&#xA;		var yearData = data.filter(function (element) { return element.YEAR == year });&#xD;&#xA;should be &#xD;&#xA;&#xD;&#xA;		var yearData = data.filter(function (element) { return element.YEAR == sexYear });&#xD;&#xA;&#xD;&#xA;Finally, try the change event instead of input...&#xD;&#xA;&#xD;&#xA;	d3.select(""#sexYear"").on(""change"", function () {&#xD;&#xA;		update(+this.value);&#xD;&#xA;	});&#xD;&#xA;&#xD;&#xA;";;
87367200;29443655;2670182;5;2c48ece5-88a6-45bb-8324-5b95d5fd2ddd;2015-04-04 07:08:23.0;"You shouldn't be doing this...&#xD;&#xA;&#xD;&#xA;	request_data = data;&#xD;&#xA;&#xD;&#xA;and this line is referring to the global `year` when it should be the local argument sexYear&#xD;&#xA;&#xD;&#xA;		var yearData = data.filter(function (element) { return element.YEAR == year });&#xD;&#xA;should be &#xD;&#xA;&#xD;&#xA;		var yearData = data.filter(function (element) { return element.YEAR == sexYear });&#xD;&#xA;&#xD;&#xA;Also, try the `change` event instead of `input`...&#xD;&#xA;&#xD;&#xA;	d3.select(""#sexYear"").on(""change"", function () {&#xD;&#xA;		update(+this.value);&#xD;&#xA;	});&#xD;&#xA;&#xD;&#xA;this.value is undefined here because update is called with global `this` context&#xD;&#xA;&#xD;&#xA; function update(sexYear) { &#xD;&#xA;    console.log(this.value);&#xD;&#xA;&#xD;&#xA;there are other problems as well, but that's a start.";;added 199 characters in body
87368282;29443655;2670182;5;a850d504-3e15-4081-90fd-b68a3547ccb2;2015-04-04 07:51:11.0;"You shouldn't be doing this...&#xD;&#xA;&#xD;&#xA;	request_data = data;&#xD;&#xA;&#xD;&#xA;and this line is referring to the global `year` when it should be the local argument sexYear&#xD;&#xA;&#xD;&#xA;		var yearData = data.filter(function (element) { return element.YEAR == year });&#xD;&#xA;should be &#xD;&#xA;&#xD;&#xA;		var yearData = data.filter(function (element) { return element.YEAR == sexYear });&#xD;&#xA;&#xD;&#xA;Also, try the `change` event instead of `input`...&#xD;&#xA;&#xD;&#xA;	d3.select(""#sexYear"").on(""change"", function () {&#xD;&#xA;		update(+this.value);&#xD;&#xA;	});&#xD;&#xA;&#xD;&#xA;this.value is undefined here because update is called with global `this` context&#xD;&#xA;&#xD;&#xA; function update(sexYear) { &#xD;&#xA;    console.log(this.value);&#xD;&#xA;&#xD;&#xA;you should read these two lines and think about what they are doing...&#xD;&#xA;&#xD;&#xA;		var seriesNames = d3.keys(yearData[0]).filter(function (key) { return key !== ""CAUSE""; });&#xD;&#xA;		var seriesNames = d3.keys(yearData[0]).filter(function (key) { return key !== ""YEAR""; });&#xD;&#xA;I guarantee it's not what you think.&#xD;&#xA;&#xD;&#xA;there are other problems as well, but that's a start.&#xD;&#xA;";;added 303 characters in body
87368614;29443655;2670182;5;df20863c-5f43-4a43-92a1-77064f0eaa2d;2015-04-04 08:01:23.0;"You shouldn't be doing this...&#xD;&#xA;&#xD;&#xA;	request_data = data;&#xD;&#xA;&#xD;&#xA;and this line is referring to the global `year` when it should be the local argument sexYear&#xD;&#xA;&#xD;&#xA;		var yearData = data.filter(function (element) { return element.YEAR == year });&#xD;&#xA;should be &#xD;&#xA;&#xD;&#xA;		var yearData = data.filter(function (element) { return element.YEAR == sexYear });&#xD;&#xA;&#xD;&#xA;Also, try the `change` event instead of `input`...&#xD;&#xA;&#xD;&#xA;	d3.select(""#sexYear"").on(""change"", function () {&#xD;&#xA;		update(+this.value);&#xD;&#xA;	});&#xD;&#xA;&#xD;&#xA;this.value is undefined here because update is called with global `this` context&#xD;&#xA;&#xD;&#xA; function update(sexYear) { &#xD;&#xA;    console.log(this.value);&#xD;&#xA;&#xD;&#xA;you should read these two lines and think about what they are doing...&#xD;&#xA;&#xD;&#xA;		var ageNames = d3.keys(yearData[0]).filter(function (key) { return key !== ""CAUSE""; });&#xD;&#xA;		var ageNames = d3.keys(yearData[0]).filter(function (key) { return key !== ""YEAR""; });&#xD;&#xA;I guarantee it's not what you think.&#xD;&#xA;&#xD;&#xA;`ageNames` is a very confusing name for this, it should be `seriesNames` for example.  Then you can implement like this...&#xD;&#xA;&#xD;&#xA;    			var seriesNames = ['FEMALE', 'MALE']&#xD;&#xA;                //...&#xD;&#xA;    			var seriesNames = d3.keys(yearData[0]).filter(function (key) {&#xD;&#xA;    				return seriesNames.some(function(element, index, array) {&#xD;&#xA;    					return key === element&#xD;&#xA;    				})&#xD;&#xA;    			});&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;there are other problems as well, but that's a start.&#xD;&#xA;";;added 387 characters in body
87368915;29443655;2670182;5;ad77db75-92f6-457e-883d-c93f2ecf7604;2015-04-04 08:12:02.0;"You shouldn't be doing this...&#xD;&#xA;&#xD;&#xA;	request_data = data;&#xD;&#xA;&#xD;&#xA;and this line is referring to the global `year` when it should be the local argument sexYear&#xD;&#xA;&#xD;&#xA;		var yearData = data.filter(function (element) { return element.YEAR == year });&#xD;&#xA;should be &#xD;&#xA;&#xD;&#xA;		var yearData = data.filter(function (element) { return element.YEAR == sexYear });&#xD;&#xA;&#xD;&#xA;Also, try the `change` event instead of `input`...&#xD;&#xA;&#xD;&#xA;	d3.select(""#sexYear"").on(""change"", function () {&#xD;&#xA;		update(+this.value);&#xD;&#xA;	});&#xD;&#xA;&#xD;&#xA;this.value is undefined here because update is called with global `this` context&#xD;&#xA;&#xD;&#xA; function update(sexYear) { &#xD;&#xA;    console.log(this.value);&#xD;&#xA;&#xD;&#xA;you should read these two lines and think about what they are doing...&#xD;&#xA;&#xD;&#xA;		var ageNames = d3.keys(yearData[0]).filter(function (key) { return key !== ""CAUSE""; });&#xD;&#xA;		var ageNames = d3.keys(yearData[0]).filter(function (key) { return key !== ""YEAR""; });&#xD;&#xA;I guarantee it's not what you think.&#xD;&#xA;&#xD;&#xA;`ageNames` is a very confusing name for this, it should be `seriesNames` for example.  Then you can implement like this...&#xD;&#xA;&#xD;&#xA;    			var seriesNames = ['FEMALE', 'MALE']&#xD;&#xA;                //...&#xD;&#xA;    			var seriesNames = d3.keys(yearData[0]).filter(function (key) {&#xD;&#xA;    				return seriesNames.some(function(element, index, array) {&#xD;&#xA;    					return key === element&#xD;&#xA;    				})&#xD;&#xA;    			});&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Next, take a look at the HTML using Inspect Element in your browser and you will notice that after a while there are a LOT of rectangles.  You need to have an `exit()` in there somewhere to manage deleting the old bars...&#xD;&#xA;";;added 168 characters in body
87372119;29443655;2670182;5;427bc338-7ef8-4ed7-be48-de9e518cc211;2015-04-04 09:57:16.0;"You shouldn't be doing this...&#xD;&#xA;&#xD;&#xA;	request_data = data;&#xD;&#xA;&#xD;&#xA;and this line is referring to the global `year` when it should be the local argument sexYear&#xD;&#xA;&#xD;&#xA;		var yearData = data.filter(function (element) { return element.YEAR == year });&#xD;&#xA;should be &#xD;&#xA;&#xD;&#xA;		var yearData = data.filter(function (element) { return element.YEAR == sexYear });&#xD;&#xA;&#xD;&#xA;Also, try the `change` event instead of `input`...&#xD;&#xA;&#xD;&#xA;	d3.select(""#sexYear"").on(""change"", function () {&#xD;&#xA;		update(+this.value);&#xD;&#xA;	});&#xD;&#xA;&#xD;&#xA;this.value is undefined here because update is called with global `this` context&#xD;&#xA;&#xD;&#xA; function update(sexYear) { &#xD;&#xA;    console.log(this.value);&#xD;&#xA;&#xD;&#xA;you should read these two lines and think about what they are doing...&#xD;&#xA;&#xD;&#xA;		var ageNames = d3.keys(yearData[0]).filter(function (key) { return key !== ""CAUSE""; });&#xD;&#xA;		var ageNames = d3.keys(yearData[0]).filter(function (key) { return key !== ""YEAR""; });&#xD;&#xA;I guarantee it's not what you think.&#xD;&#xA;&#xD;&#xA;`ageNames` is a very confusing name for this, it should be `seriesNames` for example.  Then you can implement like this...&#xD;&#xA;&#xD;&#xA;    			var seriesNames = ['FEMALE', 'MALE']&#xD;&#xA;                //...&#xD;&#xA;    			var seriesNames = d3.keys(yearData[0]).filter(function (key) {&#xD;&#xA;    				return seriesNames.some(function(element, index, array) {&#xD;&#xA;    					return key === element&#xD;&#xA;    				})&#xD;&#xA;    			});&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Finally, you need to fix the UPDATE, ENTER, EXIT structure.  Here is the function with everything fixed...&#xD;&#xA;&#xD;&#xA;	function update(sexYear) {&#xD;&#xA;		var seriesNames = ['FEMALE', 'MALE']&#xD;&#xA;		console.log('update ', sexYear);&#xD;&#xA;&#xD;&#xA;		// adjust the text on the year slider&#xD;&#xA;		d3.select(""#sexYear-value"").text(sexYear);&#xD;&#xA;		d3.select(""#sexYear"").property(""value"", sexYear);&#xD;&#xA;&#xD;&#xA;		var yearData = data.filter(function (element) { return element.YEAR == sexYear });&#xD;&#xA;		var seriesNames = d3.keys(yearData[0]).filter(function (key) {&#xD;&#xA;			return seriesNames.some(function(element, idnex, array) {&#xD;&#xA;				return key === element&#xD;&#xA;			})&#xD;&#xA;		});&#xD;&#xA;		console.log('year data:');console.log(yearData);&#xD;&#xA;		yearData.forEach(function (d) {&#xD;&#xA;			d.series = seriesNames.map(function (name) { return { name: name, value: +d[name] }; });&#xD;&#xA;		});&#xD;&#xA;&#xD;&#xA;		x0.domain(yearData.map(function (d) { return d.CAUSE; }));&#xD;&#xA;		x1.domain(seriesNames).rangeRoundBands([0, x0.rangeBand()]);&#xD;&#xA;		y.domain([0, d3.max(yearData, function (d) { return d3.max(d.series, function (d) { return d.value; }); })]);&#xD;&#xA;&#xD;&#xA;	//Cause groups&#xD;&#xA;		//UPDATE&#xD;&#xA;		var causeUpdate = svg.selectAll("".CAUSE"")&#xD;&#xA;				 .data(yearData),&#xD;&#xA;		//ENTER ****native d3 SIDE EFFECT**** enter selection is added to update selection &#xD;&#xA;				causeEnter = causeUpdate.enter().append(""g"")&#xD;&#xA;				 .attr(""class"", ""CAUSE"")&#xD;&#xA;				 .attr(""transform"", function (d) { return ""translate("" + x0(d.CAUSE) + "",0)""; }),&#xD;&#xA;		//EXIT&#xD;&#xA;				causeExit = causeUpdate.exit().remove(),&#xD;&#xA;&#xD;&#xA;	//Series groups&#xD;&#xA;		//UPDATE&#xD;&#xA;				seriesUpdate = causeUpdate.selectAll(""rect"")&#xD;&#xA;				.data(function (d) {&#xD;&#xA;					return d.series;&#xD;&#xA;				});&#xD;&#xA;		//ENTER ****native d3 SIDE EFFECT**** enter selection is added to update selection &#xD;&#xA;		seriesUpdate.enter().append(""rect"")&#xD;&#xA;		//UPDATE + ENTER&#xD;&#xA;		seriesUpdate.attr(""width"", x1.rangeBand())&#xD;&#xA;		.attr(""x"", function (d) {&#xD;&#xA;			return x1(d.name);&#xD;&#xA;		})&#xD;&#xA;		.attr(""y"", function (d) {&#xD;&#xA;			return y(d.value);&#xD;&#xA;		})&#xD;&#xA;		.attr(""height"", function (d) {&#xD;&#xA;			return height - y(d.value);&#xD;&#xA;		})&#xD;&#xA;		.style(""fill"", function (d) {&#xD;&#xA;			return color(d.name);&#xD;&#xA;		})&#xD;&#xA;		//EXIT&#xD;&#xA;		seriesUpdate.exit().remove()&#xD;&#xA;	}&#xD;&#xA;&#xD;&#xA;<iframe width=""100%"" height=""300"" src=""//jsfiddle.net/vyab4kcf/44/embedded/"" allowfullscreen=""allowfullscreen"" frameborder=""0""></iframe>";;added 1862 characters in body
87372341;29443655;2670182;5;a5b1a55d-5333-44b0-bd9b-7c15108031c3;2015-04-04 10:04:37.0;"You shouldn't be doing this...&#xD;&#xA;&#xD;&#xA;	request_data = data;&#xD;&#xA;&#xD;&#xA;and this line is referring to the global `year` when it should be the local argument sexYear&#xD;&#xA;&#xD;&#xA;		var yearData = data.filter(function (element) { return element.YEAR == year });&#xD;&#xA;should be &#xD;&#xA;&#xD;&#xA;		var yearData = data.filter(function (element) { return element.YEAR == sexYear });&#xD;&#xA;&#xD;&#xA;Also, try the `change` event instead of `input`...&#xD;&#xA;&#xD;&#xA;	d3.select(""#sexYear"").on(""change"", function () {&#xD;&#xA;		update(+this.value);&#xD;&#xA;	});&#xD;&#xA;&#xD;&#xA;this.value is undefined here because update is called with global `this` context&#xD;&#xA;&#xD;&#xA; function update(sexYear) { &#xD;&#xA;    console.log(this.value);&#xD;&#xA;&#xD;&#xA;you should read these two lines and think about what they are doing...&#xD;&#xA;&#xD;&#xA;		var ageNames = d3.keys(yearData[0]).filter(function (key) { return key !== ""CAUSE""; });&#xD;&#xA;		var ageNames = d3.keys(yearData[0]).filter(function (key) { return key !== ""YEAR""; });&#xD;&#xA;I guarantee it's not what you think.&#xD;&#xA;&#xD;&#xA;`ageNames` is a very confusing name for this, it should be `seriesNames` for example.  Then you can implement like this...&#xD;&#xA;&#xD;&#xA;    			var seriesNames = ['FEMALE', 'MALE']&#xD;&#xA;                //...&#xD;&#xA;    			var seriesNames = d3.keys(yearData[0]).filter(function (key) {&#xD;&#xA;    				return seriesNames.some(function(element, index, array) {&#xD;&#xA;    					return key === element&#xD;&#xA;    				})&#xD;&#xA;    			});&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Finally, you need to fix the UPDATE, ENTER, EXIT structure.  Here is the function with everything fixed...&#xD;&#xA;&#xD;&#xA;<!-- begin snippet: js hide: false -->&#xD;&#xA;&#xD;&#xA;<!-- language: lang-js -->&#xD;&#xA;&#xD;&#xA;    function main() {&#xD;&#xA;    	console.clear();&#xD;&#xA;    	var margin = { top: 20, right: 20, bottom: 30, left: 40 },&#xD;&#xA;    			width = 480 - margin.left - margin.right,&#xD;&#xA;    			height = 220 - margin.top - margin.bottom;&#xD;&#xA;&#xD;&#xA;    	var x0 = d3.scale.ordinal()&#xD;&#xA;    			.rangeRoundBands([0, width], 0.1);&#xD;&#xA;&#xD;&#xA;    	var x1 = d3.scale.ordinal();&#xD;&#xA;&#xD;&#xA;    	var y = d3.scale.linear()&#xD;&#xA;    			.range([height, 0]);&#xD;&#xA;&#xD;&#xA;    	var color = d3.scale.ordinal()&#xD;&#xA;    			.range([""#FD8C25"", ""#99ABC4""]);&#xD;&#xA;&#xD;&#xA;    	var xAxis = d3.svg.axis()&#xD;&#xA;    			.scale(x0)&#xD;&#xA;    			.orient(""bottom"");&#xD;&#xA;&#xD;&#xA;    	var year = 1979;&#xD;&#xA;&#xD;&#xA;    	var yAxis = d3.svg.axis()&#xD;&#xA;    			.scale(y)&#xD;&#xA;    			.orient(""left"")&#xD;&#xA;    			.tickFormat(d3.format("".2s""));&#xD;&#xA;&#xD;&#xA;    	var svg = d3.select(""body"").append(""svg"")&#xD;&#xA;    			.attr(""width"", width + margin.left + margin.right)&#xD;&#xA;    			.attr(""height"", height + margin.top + margin.bottom)&#xD;&#xA;    			.append(""g"")&#xD;&#xA;    			.attr(""transform"", ""translate("" + margin.left + "","" + margin.top + "")"");&#xD;&#xA;&#xD;&#xA;    	var request_data = d3.csv(""http://www.sfu.ca/~gdwang/Sex.csv"", function (error, data) {&#xD;&#xA;    		request_data = data;&#xD;&#xA;&#xD;&#xA;    		console.log('data returned')&#xD;&#xA;    		console.log('error: ' + error)&#xD;&#xA;&#xD;&#xA;    		d3.select(""#sexYear"").on(""change"", function () {&#xD;&#xA;    			update(+this.value);&#xD;&#xA;    		});&#xD;&#xA;&#xD;&#xA;    		update(year);&#xD;&#xA;&#xD;&#xA;    		// update the year&#xD;&#xA;    		function update(sexYear) {&#xD;&#xA;    			var seriesNames = ['FEMALE', 'MALE']&#xD;&#xA;    			console.log('update ', sexYear);&#xD;&#xA;&#xD;&#xA;    			// adjust the text on the year slider&#xD;&#xA;    			d3.select(""#sexYear-value"").text(sexYear);&#xD;&#xA;    			d3.select(""#sexYear"").property(""value"", sexYear);&#xD;&#xA;&#xD;&#xA;    			var yearData = data.filter(function (element) { return element.YEAR == sexYear });&#xD;&#xA;    			var seriesNames = d3.keys(yearData[0]).filter(function (key) {&#xD;&#xA;    				return seriesNames.some(function(element, idnex, array) {&#xD;&#xA;    					return key === element&#xD;&#xA;    				})&#xD;&#xA;    			});&#xD;&#xA;    			console.log('year data:');console.log(yearData);&#xD;&#xA;    			yearData.forEach(function (d) {&#xD;&#xA;    				d.series = seriesNames.map(function (name) { return { name: name, value: +d[name] }; });&#xD;&#xA;    			});&#xD;&#xA;&#xD;&#xA;    			x0.domain(yearData.map(function (d) { return d.CAUSE; }));&#xD;&#xA;    			x1.domain(seriesNames).rangeRoundBands([0, x0.rangeBand()]);&#xD;&#xA;    			y.domain([0, d3.max(yearData, function (d) { return d3.max(d.series, function (d) { return d.value; }); })]);&#xD;&#xA;&#xD;&#xA;    		//Cause groups&#xD;&#xA;    			//UPDATE&#xD;&#xA;    			var causeUpdate = svg.selectAll("".CAUSE"")&#xD;&#xA;    					 .data(yearData),&#xD;&#xA;    			//ENTER ****native d3 SIDE EFFECT**** enter selection is added to update selection &#xD;&#xA;    					causeEnter = causeUpdate.enter().append(""g"")&#xD;&#xA;    					 .attr(""class"", ""CAUSE"")&#xD;&#xA;    					 .attr(""transform"", function (d) { return ""translate("" + x0(d.CAUSE) + "",0)""; }),&#xD;&#xA;    			//EXIT&#xD;&#xA;    					causeExit = causeUpdate.exit().remove(),&#xD;&#xA;&#xD;&#xA;    		//Series groups&#xD;&#xA;    			//UPDATE&#xD;&#xA;    					seriesUpdate = causeUpdate.selectAll(""rect"")&#xD;&#xA;    					.data(function (d) {&#xD;&#xA;    						return d.series;&#xD;&#xA;    					});&#xD;&#xA;    			//ENTER ****native d3 SIDE EFFECT**** enter selection is added to update selection &#xD;&#xA;    			seriesUpdate.enter().append(""rect"")&#xD;&#xA;    			//UPDATE + ENTER&#xD;&#xA;    			seriesUpdate.attr(""width"", x1.rangeBand())&#xD;&#xA;    			.attr(""x"", function (d) {&#xD;&#xA;    				return x1(d.name);&#xD;&#xA;    			})&#xD;&#xA;    			.attr(""y"", function (d) {&#xD;&#xA;    				return y(d.value);&#xD;&#xA;    			})&#xD;&#xA;    			.attr(""height"", function (d) {&#xD;&#xA;    				return height - y(d.value);&#xD;&#xA;    			})&#xD;&#xA;    			.style(""fill"", function (d) {&#xD;&#xA;    				return color(d.name);&#xD;&#xA;    			})&#xD;&#xA;    			//EXIT&#xD;&#xA;    			seriesUpdate.exit().remove()&#xD;&#xA;    		}&#xD;&#xA;&#xD;&#xA;    		//draw the bars&#xD;&#xA;    		svg.append(""g"")&#xD;&#xA;    				.attr(""class"", ""x axis"")&#xD;&#xA;    				.attr(""transform"", ""translate(0,"" + height + "")"")&#xD;&#xA;    				.call(xAxis);&#xD;&#xA;&#xD;&#xA;    		svg.append(""g"")&#xD;&#xA;    				.attr(""class"", ""y axis"")&#xD;&#xA;    				.call(yAxis)&#xD;&#xA;    				.append(""text"")&#xD;&#xA;    				.attr(""transform"", ""rotate(-90)"")&#xD;&#xA;    				.attr(""y"", 6)&#xD;&#xA;    				.attr(""dy"", "".71em"")&#xD;&#xA;    				.style(""text-anchor"", ""end"")&#xD;&#xA;    				.text(""Potential Years Lost"");&#xD;&#xA;&#xD;&#xA;    	})&#xD;&#xA;    };&#xD;&#xA;    window.onload = main&#xD;&#xA;&#xD;&#xA;<!-- language: lang-css -->&#xD;&#xA;&#xD;&#xA;    body {&#xD;&#xA;      font: 10px sans-serif;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    .axis path,&#xD;&#xA;    .axis line {&#xD;&#xA;      fill: none;&#xD;&#xA;      stroke: #000;&#xD;&#xA;      shape-rendering: crispEdges;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    .bar {&#xD;&#xA;      fill: steelblue;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    .x.axis path {&#xD;&#xA;      display: none;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;<!-- language: lang-html -->&#xD;&#xA;&#xD;&#xA;    <script src=""https://cdnjs.cloudflare.com/ajax/libs/d3/3.4.11/d3.min.js""></script>&#xD;&#xA;    <script src=""https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js""></script>&#xD;&#xA;        <label for=""sexYear"" style=""display: inline-block; width: 200px; text-align: right"">&#xD;&#xA;            Year = <span id=""sexYear-value"">…</span>&#xD;&#xA;        </label>&#xD;&#xA;        <input type=""range"" min=""1979"" max=""1999"" id=""sexYear"">&#xD;&#xA;&#xD;&#xA;<!-- end snippet -->&#xD;&#xA;&#xD;&#xA;";;added 1862 characters in body
87372874;29443655;2670182;5;68ec09b5-e158-48bd-b378-906f37ed43bb;2015-04-04 10:20:14.0;"You shouldn't be doing this...&#xD;&#xA;&#xD;&#xA;	request_data = data;&#xD;&#xA;&#xD;&#xA;and this line is referring to the global `year` when it should be the local argument sexYear&#xD;&#xA;&#xD;&#xA;		var yearData = data.filter(function (element) { return element.YEAR == year });&#xD;&#xA;should be &#xD;&#xA;&#xD;&#xA;		var yearData = data.filter(function (element) { return element.YEAR == sexYear });&#xD;&#xA;&#xD;&#xA;Also, try the `change` event instead of `input`...&#xD;&#xA;&#xD;&#xA;	d3.select(""#sexYear"").on(""change"", function () {&#xD;&#xA;		update(+this.value);&#xD;&#xA;	});&#xD;&#xA;&#xD;&#xA;this.value is undefined here because update is called with global `this` context&#xD;&#xA;&#xD;&#xA; function update(sexYear) { &#xD;&#xA;    console.log(this.value);&#xD;&#xA;&#xD;&#xA;you should read these two lines and think about what they are doing...&#xD;&#xA;&#xD;&#xA;		var ageNames = d3.keys(yearData[0]).filter(function (key) { return key !== ""CAUSE""; });&#xD;&#xA;		var ageNames = d3.keys(yearData[0]).filter(function (key) { return key !== ""YEAR""; });&#xD;&#xA;I guarantee it's not what you think.&#xD;&#xA;&#xD;&#xA;`ageNames` is a very confusing name for this, it should be `seriesNames` for example.  Then you can implement like this...&#xD;&#xA;&#xD;&#xA;    			var seriesNames = ['FEMALE', 'MALE']&#xD;&#xA;                //...&#xD;&#xA;    			var seriesNames = d3.keys(yearData[0]).filter(function (key) {&#xD;&#xA;    				return seriesNames.some(function(element, index, array) {&#xD;&#xA;    					return key === element&#xD;&#xA;    				})&#xD;&#xA;    			});&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Finally, you need to fix the UPDATE, ENTER, EXIT structure.  Here is the function with everything fixed...&#xD;&#xA;&#xD;&#xA;<!-- begin snippet: js hide: false -->&#xD;&#xA;&#xD;&#xA;<!-- language: lang-js -->&#xD;&#xA;&#xD;&#xA;    function main() {&#xD;&#xA;    	console.clear();&#xD;&#xA;    	var margin = { top: 10, right: 10, bottom: 20, left: 30 },&#xD;&#xA;    			width = 400 - margin.left - margin.right,&#xD;&#xA;    			height = 150 - margin.top - margin.bottom;&#xD;&#xA;&#xD;&#xA;    	var x0 = d3.scale.ordinal()&#xD;&#xA;    			.rangeRoundBands([0, width], 0.1);&#xD;&#xA;&#xD;&#xA;    	var x1 = d3.scale.ordinal();&#xD;&#xA;&#xD;&#xA;    	var y = d3.scale.linear()&#xD;&#xA;    			.range([height, 0]);&#xD;&#xA;&#xD;&#xA;    	var color = d3.scale.ordinal()&#xD;&#xA;    			.range([""#FD8C25"", ""#99ABC4""]);&#xD;&#xA;&#xD;&#xA;    	var xAxis = d3.svg.axis()&#xD;&#xA;    			.scale(x0)&#xD;&#xA;    			.orient(""bottom"");&#xD;&#xA;&#xD;&#xA;    	var year = 1979;&#xD;&#xA;&#xD;&#xA;    	var yAxis = d3.svg.axis()&#xD;&#xA;    			.scale(y)&#xD;&#xA;    			.orient(""left"")&#xD;&#xA;    			.tickFormat(d3.format("".2s""));&#xD;&#xA;        &#xD;&#xA;    	var svg = d3.select(""body"").append(""svg"")&#xD;&#xA;    			.attr(""width"", width + margin.left + margin.right)&#xD;&#xA;    			.attr(""height"", height + margin.top + margin.bottom)&#xD;&#xA;    			.append(""g"")&#xD;&#xA;    			.attr(""transform"", ""translate("" + margin.left + "","" + margin.top + "")"");&#xD;&#xA;&#xD;&#xA;    	var request_data = d3.csv(""http://www.sfu.ca/~gdwang/Sex.csv"", function (error, data) {&#xD;&#xA;    		request_data = data;&#xD;&#xA;&#xD;&#xA;    		console.log('data returned')&#xD;&#xA;    		console.log('error: ' + error)&#xD;&#xA;&#xD;&#xA;    		d3.select(""#sexYear"").on(""change"", function () {&#xD;&#xA;    			update(+this.value);&#xD;&#xA;    		});&#xD;&#xA;&#xD;&#xA;    		update(year);&#xD;&#xA;&#xD;&#xA;    		// update the year&#xD;&#xA;    		function update(sexYear) {&#xD;&#xA;    			var seriesNames = ['FEMALE', 'MALE']&#xD;&#xA;    			console.log('update ', sexYear);&#xD;&#xA;&#xD;&#xA;    			// adjust the text on the year slider&#xD;&#xA;    			d3.select(""#sexYear-value"").text(sexYear);&#xD;&#xA;    			d3.select(""#sexYear"").property(""value"", sexYear);&#xD;&#xA;&#xD;&#xA;    			var yearData = data.filter(function (element) { return element.YEAR == sexYear });&#xD;&#xA;    			var seriesNames = d3.keys(yearData[0]).filter(function (key) {&#xD;&#xA;    				return seriesNames.some(function(element, idnex, array) {&#xD;&#xA;    					return key === element&#xD;&#xA;    				})&#xD;&#xA;    			});&#xD;&#xA;    			console.log('year data:');console.log(yearData);&#xD;&#xA;    			yearData.forEach(function (d) {&#xD;&#xA;    				d.series = seriesNames.map(function (name) { return { name: name, value: +d[name] }; });&#xD;&#xA;    			});&#xD;&#xA;&#xD;&#xA;    			x0.domain(yearData.map(function (d) { return d.CAUSE; }));&#xD;&#xA;    			x1.domain(seriesNames).rangeRoundBands([0, x0.rangeBand()]);&#xD;&#xA;    			y.domain([0, d3.max(yearData, function (d) { return d3.max(d.series, function (d) { return d.value; }); })]);&#xD;&#xA;&#xD;&#xA;    		//Cause groups&#xD;&#xA;    			//UPDATE&#xD;&#xA;    			var causeUpdate = svg.selectAll("".CAUSE"")&#xD;&#xA;    					 .data(yearData),&#xD;&#xA;    			//ENTER ****native d3 SIDE EFFECT**** enter selection is added to update selection &#xD;&#xA;    					causeEnter = causeUpdate.enter().append(""g"")&#xD;&#xA;    					 .attr(""class"", ""CAUSE"")&#xD;&#xA;    					 .attr(""transform"", function (d) { return ""translate("" + x0(d.CAUSE) + "",0)""; }),&#xD;&#xA;    			//EXIT&#xD;&#xA;    					causeExit = causeUpdate.exit().remove(),&#xD;&#xA;&#xD;&#xA;    		//Series groups&#xD;&#xA;    			//UPDATE&#xD;&#xA;    					seriesUpdate = causeUpdate.selectAll(""rect"")&#xD;&#xA;    					.data(function (d) {&#xD;&#xA;    						return d.series;&#xD;&#xA;    					});&#xD;&#xA;    			//ENTER ****native d3 SIDE EFFECT**** enter selection is added to update selection &#xD;&#xA;    			seriesUpdate.enter().append(""rect"")&#xD;&#xA;    			//UPDATE + ENTER&#xD;&#xA;    			seriesUpdate.attr(""width"", x1.rangeBand())&#xD;&#xA;    			.attr(""x"", function (d) {&#xD;&#xA;    				return x1(d.name);&#xD;&#xA;    			})&#xD;&#xA;    			.attr(""y"", function (d) {&#xD;&#xA;    				return y(d.value);&#xD;&#xA;    			})&#xD;&#xA;    			.attr(""height"", function (d) {&#xD;&#xA;    				return height - y(d.value);&#xD;&#xA;    			})&#xD;&#xA;    			.style(""fill"", function (d) {&#xD;&#xA;    				return color(d.name);&#xD;&#xA;    			})&#xD;&#xA;    			//EXIT&#xD;&#xA;    			seriesUpdate.exit().remove()&#xD;&#xA;    		}&#xD;&#xA;&#xD;&#xA;    		//draw the bars&#xD;&#xA;    		svg.append(""g"")&#xD;&#xA;    				.attr(""class"", ""x axis"")&#xD;&#xA;    				.attr(""transform"", ""translate(0,"" + height + "")"")&#xD;&#xA;    				.call(xAxis);&#xD;&#xA;&#xD;&#xA;    		svg.append(""g"")&#xD;&#xA;    				.attr(""class"", ""y axis"")&#xD;&#xA;    				.call(yAxis)&#xD;&#xA;    				.append(""text"")&#xD;&#xA;    				.attr(""transform"", ""rotate(-90)"")&#xD;&#xA;    				.attr(""y"", 6)&#xD;&#xA;    				.attr(""dy"", "".71em"")&#xD;&#xA;    				.style(""text-anchor"", ""end"")&#xD;&#xA;    				.text(""Potential Years Lost"");&#xD;&#xA;&#xD;&#xA;          d3.selectAll("".tick > text"")&#xD;&#xA;          .style(""font-size"", 6);&#xD;&#xA;&#xD;&#xA;    	})&#xD;&#xA;    };&#xD;&#xA;    window.onload = main&#xD;&#xA;&#xD;&#xA;<!-- language: lang-css -->&#xD;&#xA;&#xD;&#xA;    body {&#xD;&#xA;      font: 10px sans-serif;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    .axis path,&#xD;&#xA;    .axis line {&#xD;&#xA;      fill: none;&#xD;&#xA;      stroke: #000;&#xD;&#xA;      shape-rendering: crispEdges;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    .bar {&#xD;&#xA;      fill: steelblue;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    .x.axis path {&#xD;&#xA;      display: none;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;<!-- language: lang-html -->&#xD;&#xA;&#xD;&#xA;    <script src=""https://cdnjs.cloudflare.com/ajax/libs/d3/3.4.11/d3.min.js""></script>&#xD;&#xA;    <script src=""https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js""></script>&#xD;&#xA;        <label for=""sexYear"" style=""display: inline-block; width: 200px; text-align: right"">&#xD;&#xA;            Year = <span id=""sexYear-value"">…</span>&#xD;&#xA;        </label>&#xD;&#xA;        <input type=""range"" min=""1979"" max=""1999"" id=""sexYear"">&#xD;&#xA;&#xD;&#xA;<!-- end snippet -->&#xD;&#xA;&#xD;&#xA;";;added 1862 characters in body
87380500;29443655;2670182;5;2421a322-2dae-411b-a105-2903f8f09f94;2015-04-04 13:46:52.0;"You shouldn't be doing this...&#xD;&#xA;&#xD;&#xA;	request_data = data;&#xD;&#xA;&#xD;&#xA;and this line is referring to the global `year` when it should be the local argument sexYear&#xD;&#xA;&#xD;&#xA;		var yearData = data.filter(function (element) { return element.YEAR == year });&#xD;&#xA;should be &#xD;&#xA;&#xD;&#xA;		var yearData = data.filter(function (element) { return element.YEAR == sexYear });&#xD;&#xA;&#xD;&#xA;Also, try the `change` event instead of `input`...&#xD;&#xA;&#xD;&#xA;	d3.select(""#sexYear"").on(""change"", function () {&#xD;&#xA;		update(+this.value);&#xD;&#xA;	});&#xD;&#xA;&#xD;&#xA;`this.value` is undefined here because update is called with global `this` context&#xD;&#xA;&#xD;&#xA; &#xD;&#xA;&#xD;&#xA;    function update(sexYear) { &#xD;&#xA;        console.log(this.value);&#xD;&#xA;&#xD;&#xA;you should read these two lines and think about what they are doing...&#xD;&#xA;&#xD;&#xA;		var ageNames = d3.keys(yearData[0]).filter(function (key) { return key !== ""CAUSE""; });&#xD;&#xA;		var ageNames = d3.keys(yearData[0]).filter(function (key) { return key !== ""YEAR""; });&#xD;&#xA;I guarantee it's not what you think.&#xD;&#xA;&#xD;&#xA;`ageNames` is a very confusing name for this, it should be `seriesNames` for example.  Then you can implement like this...&#xD;&#xA;&#xD;&#xA;    			var seriesNames = ['FEMALE', 'MALE']&#xD;&#xA;                //...&#xD;&#xA;    			var seriesNames = d3.keys(yearData[0]).filter(function (key) {&#xD;&#xA;    				return seriesNames.some(function(element, index, array) {&#xD;&#xA;    					return key === element&#xD;&#xA;    				})&#xD;&#xA;    			});&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Finally, you need to fix the UPDATE, ENTER, EXIT structure.  Here is the function with everything fixed...&#xD;&#xA;&#xD;&#xA;<!-- begin snippet: js hide: false -->&#xD;&#xA;&#xD;&#xA;<!-- language: lang-js -->&#xD;&#xA;&#xD;&#xA;    function main() {&#xD;&#xA;    	console.clear();&#xD;&#xA;    	var margin = { top: 10, right: 10, bottom: 20, left: 30 },&#xD;&#xA;    			width = 400 - margin.left - margin.right,&#xD;&#xA;    			height = 150 - margin.top - margin.bottom;&#xD;&#xA;&#xD;&#xA;    	var x0 = d3.scale.ordinal()&#xD;&#xA;    			.rangeRoundBands([0, width], 0.1);&#xD;&#xA;&#xD;&#xA;    	var x1 = d3.scale.ordinal();&#xD;&#xA;&#xD;&#xA;    	var y = d3.scale.linear()&#xD;&#xA;    			.range([height, 0]);&#xD;&#xA;&#xD;&#xA;    	var color = d3.scale.ordinal()&#xD;&#xA;    			.range([""#FD8C25"", ""#99ABC4""]);&#xD;&#xA;&#xD;&#xA;    	var xAxis = d3.svg.axis()&#xD;&#xA;    			.scale(x0)&#xD;&#xA;    			.orient(""bottom"");&#xD;&#xA;&#xD;&#xA;    	var year = 1979;&#xD;&#xA;&#xD;&#xA;    	var yAxis = d3.svg.axis()&#xD;&#xA;    			.scale(y)&#xD;&#xA;    			.orient(""left"")&#xD;&#xA;    			.tickFormat(d3.format("".2s""));&#xD;&#xA;        &#xD;&#xA;    	var svg = d3.select(""body"").append(""svg"")&#xD;&#xA;    			.attr(""width"", width + margin.left + margin.right)&#xD;&#xA;    			.attr(""height"", height + margin.top + margin.bottom)&#xD;&#xA;    			.append(""g"")&#xD;&#xA;    			.attr(""transform"", ""translate("" + margin.left + "","" + margin.top + "")"");&#xD;&#xA;&#xD;&#xA;    	var request_data = d3.csv(""http://www.sfu.ca/~gdwang/Sex.csv"", function (error, data) {&#xD;&#xA;    		request_data = data;&#xD;&#xA;&#xD;&#xA;    		console.log('data returned')&#xD;&#xA;    		console.log('error: ' + error)&#xD;&#xA;&#xD;&#xA;    		d3.select(""#sexYear"").on(""change"", function () {&#xD;&#xA;    			update(+this.value);&#xD;&#xA;    		});&#xD;&#xA;&#xD;&#xA;    		update(year);&#xD;&#xA;&#xD;&#xA;    		// update the year&#xD;&#xA;    		function update(sexYear) {&#xD;&#xA;    			var seriesNames = ['FEMALE', 'MALE']&#xD;&#xA;    			console.log('update ', sexYear);&#xD;&#xA;&#xD;&#xA;    			// adjust the text on the year slider&#xD;&#xA;    			d3.select(""#sexYear-value"").text(sexYear);&#xD;&#xA;    			d3.select(""#sexYear"").property(""value"", sexYear);&#xD;&#xA;&#xD;&#xA;    			var yearData = data.filter(function (element) { return element.YEAR == sexYear });&#xD;&#xA;    			var seriesNames = d3.keys(yearData[0]).filter(function (key) {&#xD;&#xA;    				return seriesNames.some(function(element, idnex, array) {&#xD;&#xA;    					return key === element&#xD;&#xA;    				})&#xD;&#xA;    			});&#xD;&#xA;    			console.log('year data:');console.log(yearData);&#xD;&#xA;    			yearData.forEach(function (d) {&#xD;&#xA;    				d.series = seriesNames.map(function (name) { return { name: name, value: +d[name] }; });&#xD;&#xA;    			});&#xD;&#xA;&#xD;&#xA;    			x0.domain(yearData.map(function (d) { return d.CAUSE; }));&#xD;&#xA;    			x1.domain(seriesNames).rangeRoundBands([0, x0.rangeBand()]);&#xD;&#xA;    			y.domain([0, d3.max(yearData, function (d) { return d3.max(d.series, function (d) { return d.value; }); })]);&#xD;&#xA;&#xD;&#xA;    		//Cause groups&#xD;&#xA;    			//UPDATE&#xD;&#xA;    			var causeUpdate = svg.selectAll("".CAUSE"")&#xD;&#xA;    					 .data(yearData),&#xD;&#xA;    			//ENTER ****native d3 SIDE EFFECT**** enter selection is added to update selection &#xD;&#xA;    					causeEnter = causeUpdate.enter().append(""g"")&#xD;&#xA;    					 .attr(""class"", ""CAUSE"")&#xD;&#xA;    					 .attr(""transform"", function (d) { return ""translate("" + x0(d.CAUSE) + "",0)""; }),&#xD;&#xA;    			//EXIT&#xD;&#xA;    					causeExit = causeUpdate.exit().remove(),&#xD;&#xA;&#xD;&#xA;    		//Series groups&#xD;&#xA;    			//UPDATE&#xD;&#xA;    					seriesUpdate = causeUpdate.selectAll(""rect"")&#xD;&#xA;    					.data(function (d) {&#xD;&#xA;    						return d.series;&#xD;&#xA;    					});&#xD;&#xA;    			//ENTER ****native d3 SIDE EFFECT**** enter selection is added to update selection &#xD;&#xA;    			seriesUpdate.enter().append(""rect"")&#xD;&#xA;    			//UPDATE + ENTER&#xD;&#xA;    			seriesUpdate.attr(""width"", x1.rangeBand())&#xD;&#xA;    			.attr(""x"", function (d) {&#xD;&#xA;    				return x1(d.name);&#xD;&#xA;    			})&#xD;&#xA;    			.attr(""y"", function (d) {&#xD;&#xA;    				return y(d.value);&#xD;&#xA;    			})&#xD;&#xA;    			.attr(""height"", function (d) {&#xD;&#xA;    				return height - y(d.value);&#xD;&#xA;    			})&#xD;&#xA;    			.style(""fill"", function (d) {&#xD;&#xA;    				return color(d.name);&#xD;&#xA;    			})&#xD;&#xA;    			//EXIT&#xD;&#xA;    			seriesUpdate.exit().remove()&#xD;&#xA;    		}&#xD;&#xA;&#xD;&#xA;    		//draw the bars&#xD;&#xA;    		svg.append(""g"")&#xD;&#xA;    				.attr(""class"", ""x axis"")&#xD;&#xA;    				.attr(""transform"", ""translate(0,"" + height + "")"")&#xD;&#xA;    				.call(xAxis);&#xD;&#xA;&#xD;&#xA;    		svg.append(""g"")&#xD;&#xA;    				.attr(""class"", ""y axis"")&#xD;&#xA;    				.call(yAxis)&#xD;&#xA;    				.append(""text"")&#xD;&#xA;    				.attr(""transform"", ""rotate(-90)"")&#xD;&#xA;    				.attr(""y"", 6)&#xD;&#xA;    				.attr(""dy"", "".71em"")&#xD;&#xA;    				.style(""text-anchor"", ""end"")&#xD;&#xA;    				.text(""Potential Years Lost"");&#xD;&#xA;&#xD;&#xA;          d3.selectAll("".tick > text"")&#xD;&#xA;          .style(""font-size"", 6);&#xD;&#xA;&#xD;&#xA;    	})&#xD;&#xA;    };&#xD;&#xA;    window.onload = main&#xD;&#xA;&#xD;&#xA;<!-- language: lang-css -->&#xD;&#xA;&#xD;&#xA;    body {&#xD;&#xA;      font: 10px sans-serif;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    .axis path,&#xD;&#xA;    .axis line {&#xD;&#xA;      fill: none;&#xD;&#xA;      stroke: #000;&#xD;&#xA;      shape-rendering: crispEdges;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    .bar {&#xD;&#xA;      fill: steelblue;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    .x.axis path {&#xD;&#xA;      display: none;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;<!-- language: lang-html -->&#xD;&#xA;&#xD;&#xA;    <script src=""https://cdnjs.cloudflare.com/ajax/libs/d3/3.4.11/d3.min.js""></script>&#xD;&#xA;    <script src=""https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js""></script>&#xD;&#xA;        <label for=""sexYear"" style=""display: inline-block; width: 200px; text-align: right"">&#xD;&#xA;            Year = <span id=""sexYear-value"">…</span>&#xD;&#xA;        </label>&#xD;&#xA;        <input type=""range"" min=""1979"" max=""1999"" id=""sexYear"">&#xD;&#xA;&#xD;&#xA;<!-- end snippet -->&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;";;added 2 characters in body
87383764;29443655;2670182;5;91317636-01ad-4d12-89e7-ec16583796c5;2015-04-04 15:14:18.0;"You shouldn't be doing this...&#xD;&#xA;&#xD;&#xA;	request_data = data;&#xD;&#xA;&#xD;&#xA;and this line is referring to the global `year` when it should be the local argument sexYear&#xD;&#xA;&#xD;&#xA;		var yearData = data.filter(function (element) { return element.YEAR == year });&#xD;&#xA;should be &#xD;&#xA;&#xD;&#xA;		var yearData = data.filter(function (element) { return element.YEAR == sexYear });&#xD;&#xA;&#xD;&#xA;Also, try the `change` event instead of `input`...&#xD;&#xA;&#xD;&#xA;	d3.select(""#sexYear"").on(""change"", function () {&#xD;&#xA;		update(+this.value);&#xD;&#xA;	});&#xD;&#xA;&#xD;&#xA;`this.value` is undefined here because update is called with global `this` context&#xD;&#xA;&#xD;&#xA; &#xD;&#xA;&#xD;&#xA;    function update(sexYear) { &#xD;&#xA;        console.log(this.value);&#xD;&#xA;&#xD;&#xA;you should read these two lines and think about what they are doing...&#xD;&#xA;&#xD;&#xA;		var ageNames = d3.keys(yearData[0]).filter(function (key) { return key !== ""CAUSE""; });&#xD;&#xA;		var ageNames = d3.keys(yearData[0]).filter(function (key) { return key !== ""YEAR""; });&#xD;&#xA;I guarantee it's not what you think.&#xD;&#xA;&#xD;&#xA;`ageNames` is a very confusing name for this, it should be `seriesNames` for example.  Then you can implement like this...&#xD;&#xA;&#xD;&#xA;    			var seriesNames = ['FEMALE', 'MALE']&#xD;&#xA;                //...&#xD;&#xA;    			var seriesNames = d3.keys(yearData[0]).filter(function (key) {&#xD;&#xA;    				return seriesNames.some(function(element, index, array) {&#xD;&#xA;    					return key === element&#xD;&#xA;    				})&#xD;&#xA;    			});&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Finally, you need to fix the UPDATE, ENTER, EXIT structure.  Here is the function with everything fixed...&#xD;&#xA;&#xD;&#xA;<!-- begin snippet: js hide: false -->&#xD;&#xA;&#xD;&#xA;<!-- language: lang-js -->&#xD;&#xA;&#xD;&#xA;    window.onload = function () {&#xD;&#xA;    	console.clear();&#xD;&#xA;    	var margin = { top: 10, right: 10, bottom: 35, left: 30 },&#xD;&#xA;    			width = 400 - margin.left - margin.right,&#xD;&#xA;    			height = 150 - margin.top - margin.bottom;&#xD;&#xA;&#xD;&#xA;    	var x0 = d3.scale.ordinal()&#xD;&#xA;    			.rangeRoundBands([0, width], 0.1);&#xD;&#xA;&#xD;&#xA;    	var x1 = d3.scale.ordinal();&#xD;&#xA;&#xD;&#xA;    	var y = d3.scale.linear()&#xD;&#xA;    			.range([height, 0]);&#xD;&#xA;&#xD;&#xA;    	var color = d3.scale.ordinal()&#xD;&#xA;    			.range([""#FD8C25"", ""#99ABC4""]);&#xD;&#xA;&#xD;&#xA;    	var xAxis = d3.svg.axis()&#xD;&#xA;    			.scale(x0)&#xD;&#xA;    			.orient(""bottom"");&#xD;&#xA;&#xD;&#xA;    	var year = 1979;&#xD;&#xA;&#xD;&#xA;    	var yAxis = d3.svg.axis()&#xD;&#xA;    			.scale(y)&#xD;&#xA;    			.orient(""left"")&#xD;&#xA;    			.tickFormat(d3.format("".2s""));&#xD;&#xA;        &#xD;&#xA;    	var svg = d3.select(""body"").append(""svg"")&#xD;&#xA;    			.attr(""width"", width + margin.left + margin.right)&#xD;&#xA;    			.attr(""height"", height + margin.top + margin.bottom)&#xD;&#xA;    			.append(""g"")&#xD;&#xA;    			.attr(""transform"", ""translate("" + margin.left + "","" + margin.top + "")"");&#xD;&#xA;&#xD;&#xA;    	var request_data = d3.csv(""http://www.sfu.ca/~gdwang/Sex.csv"", function (error, data) {&#xD;&#xA;&#xD;&#xA;    		console.log('data returned')&#xD;&#xA;    		console.log('error: ' + error)&#xD;&#xA;&#xD;&#xA;    		d3.select(""#sexYear"").on(""change"", function () {&#xD;&#xA;    			update(+this.value);&#xD;&#xA;    		});&#xD;&#xA;&#xD;&#xA;    		update(year);&#xD;&#xA;&#xD;&#xA;    		// update the year&#xD;&#xA;    		function update(sexYear) {&#xD;&#xA;    			var seriesNames = ['FEMALE', 'MALE']&#xD;&#xA;    			console.log('update ', sexYear);&#xD;&#xA;&#xD;&#xA;    			// adjust the text on the year slider&#xD;&#xA;    			d3.select(""#sexYear-value"").text(sexYear);&#xD;&#xA;    			d3.select(""#sexYear"").property(""value"", sexYear);&#xD;&#xA;&#xD;&#xA;    			var yearData = data.filter(function (element) { return element.YEAR == sexYear });&#xD;&#xA;    			var seriesNames = d3.keys(yearData[0]).filter(function (key) {&#xD;&#xA;    				return seriesNames.some(function(element, idnex, array) {&#xD;&#xA;    					return key === element&#xD;&#xA;    				})&#xD;&#xA;    			});&#xD;&#xA;    			console.log('year data:');console.log(yearData);&#xD;&#xA;    			yearData.forEach(function (d) {&#xD;&#xA;    				d.series = seriesNames.map(function (name) { return { name: name, value: +d[name] }; });&#xD;&#xA;    			});&#xD;&#xA;&#xD;&#xA;    			x0.domain(yearData.map(function (d) { return d.CAUSE; }));&#xD;&#xA;    			x1.domain(seriesNames).rangeRoundBands([0, x0.rangeBand()]);&#xD;&#xA;    			y.domain([0, d3.max(yearData, function (d) { return d3.max(d.series, function (d) { return d.value; }); })]);&#xD;&#xA;&#xD;&#xA;    		//Cause groups&#xD;&#xA;    			//UPDATE&#xD;&#xA;    			var causeUpdate = svg.selectAll("".CAUSE"")&#xD;&#xA;    					 .data(yearData),&#xD;&#xA;    			//ENTER ****native d3 SIDE EFFECT**** enter selection is added to update selection &#xD;&#xA;    					causeEnter = causeUpdate.enter().append(""g"")&#xD;&#xA;    					 .attr(""class"", ""CAUSE"")&#xD;&#xA;    					 .attr(""transform"", function (d) { return ""translate("" + x0(d.CAUSE) + "",0)""; }),&#xD;&#xA;    			//EXIT&#xD;&#xA;    					causeExit = causeUpdate.exit().remove(),&#xD;&#xA;&#xD;&#xA;    		//Series groups&#xD;&#xA;    			//UPDATE&#xD;&#xA;    					seriesUpdate = causeUpdate.selectAll(""rect"")&#xD;&#xA;    					.data(function (d) {&#xD;&#xA;    						return d.series;&#xD;&#xA;    					});&#xD;&#xA;    			//ENTER ****native d3 SIDE EFFECT**** enter selection is added to update selection &#xD;&#xA;    			seriesUpdate.enter().append(""rect"")&#xD;&#xA;    			//UPDATE + ENTER&#xD;&#xA;    			seriesUpdate.attr(""width"", x1.rangeBand())&#xD;&#xA;    			.style(""fill"", function (d) {&#xD;&#xA;    				return color(d.name);&#xD;&#xA;    			})&#xD;&#xA;                .transition()&#xD;&#xA;      			  .attr(""x"", function (d) {&#xD;&#xA;    				return x1(d.name);&#xD;&#xA;    			  })&#xD;&#xA;    			  .attr(""y"", function (d) {&#xD;&#xA;    				return y(d.value);&#xD;&#xA;    			  })&#xD;&#xA;    			  .attr(""height"", function (d) {&#xD;&#xA;    				return height - y(d.value);&#xD;&#xA;    			  })&#xD;&#xA;    			//EXIT&#xD;&#xA;    			seriesUpdate.exit().remove()&#xD;&#xA;    		}&#xD;&#xA;&#xD;&#xA;    		//draw the bars&#xD;&#xA;    		svg.append(""g"")&#xD;&#xA;    				.attr(""class"", ""x axis"")&#xD;&#xA;    				.attr(""transform"", ""translate(0,"" + height + "")"")&#xD;&#xA;    				.call(xAxis)&#xD;&#xA;    				.selectAll('text')&#xD;&#xA;    					.attr('transform', 'rotate(-15)')&#xD;&#xA;    					.style('text-anchor', 'end');&#xD;&#xA;&#xD;&#xA;    		svg.append(""g"")&#xD;&#xA;    				.attr(""class"", ""y axis"")&#xD;&#xA;    				.call(yAxis)&#xD;&#xA;    				.append(""text"")&#xD;&#xA;    				.attr(""transform"", ""rotate(-90)"")&#xD;&#xA;    				.attr(""y"", 6)&#xD;&#xA;    				.attr(""dy"", "".71em"")&#xD;&#xA;    				.style(""text-anchor"", ""end"")&#xD;&#xA;    				.text(""Potential Years Lost"");&#xD;&#xA;&#xD;&#xA;          d3.selectAll("".tick > text"")&#xD;&#xA;          .style(""font-size"", 6);&#xD;&#xA;&#xD;&#xA;    	})&#xD;&#xA;    };&#xD;&#xA;&#xD;&#xA;<!-- language: lang-css -->&#xD;&#xA;&#xD;&#xA;    body {&#xD;&#xA;      font: 10px sans-serif;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    .axis path,&#xD;&#xA;    .axis line {&#xD;&#xA;      fill: none;&#xD;&#xA;      stroke: #000;&#xD;&#xA;      shape-rendering: crispEdges;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    .bar {&#xD;&#xA;      fill: steelblue;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    .x.axis path {&#xD;&#xA;      display: none;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;<!-- language: lang-html -->&#xD;&#xA;&#xD;&#xA;    <script src=""https://cdnjs.cloudflare.com/ajax/libs/d3/3.4.11/d3.min.js""></script>&#xD;&#xA;    <script src=""https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js""></script>&#xD;&#xA;        <label for=""sexYear"" style=""display: inline-block; width: 200px; text-align: right"">&#xD;&#xA;            Year = <span id=""sexYear-value"">…</span>&#xD;&#xA;        </label>&#xD;&#xA;        <input type=""range"" min=""1979"" max=""1999"" id=""sexYear"">&#xD;&#xA;&#xD;&#xA;<!-- end snippet -->&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;";;added 3 characters in body
87384094;29443655;2670182;5;d572fb00-2774-485a-8dbc-d15742ce169b;2015-04-04 15:23:18.0;"You shouldn't be doing this...&#xD;&#xA;&#xD;&#xA;	request_data = data;&#xD;&#xA;&#xD;&#xA;and this line is referring to the global `year` when it should be the local argument sexYear&#xD;&#xA;&#xD;&#xA;		var yearData = data.filter(function (element) { return element.YEAR == year });&#xD;&#xA;should be &#xD;&#xA;&#xD;&#xA;		var yearData = data.filter(function (element) { return element.YEAR == sexYear });&#xD;&#xA;&#xD;&#xA;Also, try the `change` event as well as `input` so it works in IE...&#xD;&#xA;&#xD;&#xA;	d3.select(""#sexYear"").on(""change"", function () {&#xD;&#xA;		update(+this.value);&#xD;&#xA;	});&#xD;&#xA;&#xD;&#xA;`this.value` is undefined here because update is called with global `this` context&#xD;&#xA;&#xD;&#xA; &#xD;&#xA;&#xD;&#xA;    function update(sexYear) { &#xD;&#xA;        console.log(this.value);&#xD;&#xA;&#xD;&#xA;you should read these two lines and think about what they are doing...&#xD;&#xA;&#xD;&#xA;		var ageNames = d3.keys(yearData[0]).filter(function (key) { return key !== ""CAUSE""; });&#xD;&#xA;		var ageNames = d3.keys(yearData[0]).filter(function (key) { return key !== ""YEAR""; });&#xD;&#xA;I guarantee it's not what you think.&#xD;&#xA;&#xD;&#xA;`ageNames` is a very confusing name for this, it should be `seriesNames` for example.  Then you can implement like this...&#xD;&#xA;&#xD;&#xA;    			var seriesNames = ['FEMALE', 'MALE']&#xD;&#xA;                //...&#xD;&#xA;    			var seriesNames = d3.keys(yearData[0]).filter(function (key) {&#xD;&#xA;    				return seriesNames.some(function(element, index, array) {&#xD;&#xA;    					return key === element&#xD;&#xA;    				})&#xD;&#xA;    			});&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Finally, you need to fix the UPDATE, ENTER, EXIT structure.  Here is the function with everything fixed...&#xD;&#xA;&#xD;&#xA;<!-- begin snippet: js hide: false -->&#xD;&#xA;&#xD;&#xA;<!-- language: lang-js -->&#xD;&#xA;&#xD;&#xA;    window.onload = function () {&#xD;&#xA;    	console.clear();&#xD;&#xA;    	var margin = { top: 10, right: 10, bottom: 35, left: 30 },&#xD;&#xA;    			width = 400 - margin.left - margin.right,&#xD;&#xA;    			height = 150 - margin.top - margin.bottom;&#xD;&#xA;&#xD;&#xA;    	var x0 = d3.scale.ordinal()&#xD;&#xA;    			.rangeRoundBands([0, width], 0.1);&#xD;&#xA;&#xD;&#xA;    	var x1 = d3.scale.ordinal();&#xD;&#xA;&#xD;&#xA;    	var y = d3.scale.linear()&#xD;&#xA;    			.range([height, 0]);&#xD;&#xA;&#xD;&#xA;    	var color = d3.scale.ordinal()&#xD;&#xA;    			.range([""#FD8C25"", ""#99ABC4""]);&#xD;&#xA;&#xD;&#xA;    	var xAxis = d3.svg.axis()&#xD;&#xA;    			.scale(x0)&#xD;&#xA;    			.orient(""bottom"");&#xD;&#xA;&#xD;&#xA;    	var year = 1979;&#xD;&#xA;&#xD;&#xA;    	var yAxis = d3.svg.axis()&#xD;&#xA;    			.scale(y)&#xD;&#xA;    			.orient(""left"")&#xD;&#xA;    			.tickFormat(d3.format("".2s""));&#xD;&#xA;        &#xD;&#xA;    	var svg = d3.select(""body"").append(""svg"")&#xD;&#xA;    			.attr(""width"", width + margin.left + margin.right)&#xD;&#xA;    			.attr(""height"", height + margin.top + margin.bottom)&#xD;&#xA;    			.append(""g"")&#xD;&#xA;    			.attr(""transform"", ""translate("" + margin.left + "","" + margin.top + "")"");&#xD;&#xA;&#xD;&#xA;    	var request_data = d3.csv(""http://www.sfu.ca/~gdwang/Sex.csv"", function (error, data) {&#xD;&#xA;&#xD;&#xA;    		console.log('data returned')&#xD;&#xA;    		console.log('error: ' + error)&#xD;&#xA;&#xD;&#xA;    		d3.select(""#sexYear"").on(""change"", function () {&#xD;&#xA;    			update(+this.value);&#xD;&#xA;    		});&#xD;&#xA;&#xD;&#xA;    		d3.select(""#sexYear"").on(""input"", function () {&#xD;&#xA;    			update(+this.value);&#xD;&#xA;    		});&#xD;&#xA;    		update(year);&#xD;&#xA;&#xD;&#xA;    		// update the year&#xD;&#xA;    		function update(sexYear) {&#xD;&#xA;    			var seriesNames = ['FEMALE', 'MALE']&#xD;&#xA;    			console.log('update ', sexYear);&#xD;&#xA;&#xD;&#xA;    			// adjust the text on the year slider&#xD;&#xA;    			d3.select(""#sexYear-value"").text(sexYear);&#xD;&#xA;    			d3.select(""#sexYear"").property(""value"", sexYear);&#xD;&#xA;&#xD;&#xA;    			var yearData = data.filter(function (element) { return element.YEAR == sexYear });&#xD;&#xA;    			var seriesNames = d3.keys(yearData[0]).filter(function (key) {&#xD;&#xA;    				return seriesNames.some(function(element, idnex, array) {&#xD;&#xA;    					return key === element&#xD;&#xA;    				})&#xD;&#xA;    			});&#xD;&#xA;    			console.log('year data:');console.log(yearData);&#xD;&#xA;    			yearData.forEach(function (d) {&#xD;&#xA;    				d.series = seriesNames.map(function (name) { return { name: name, value: +d[name] }; });&#xD;&#xA;    			});&#xD;&#xA;&#xD;&#xA;    			x0.domain(yearData.map(function (d) { return d.CAUSE; }));&#xD;&#xA;    			x1.domain(seriesNames).rangeRoundBands([0, x0.rangeBand()]);&#xD;&#xA;    			y.domain([0, d3.max(yearData, function (d) { return d3.max(d.series, function (d) { return d.value; }); })]);&#xD;&#xA;&#xD;&#xA;    		//Cause groups&#xD;&#xA;    			//UPDATE&#xD;&#xA;    			var causeUpdate = svg.selectAll("".CAUSE"")&#xD;&#xA;    					 .data(yearData),&#xD;&#xA;    			//ENTER ****native d3 SIDE EFFECT**** enter selection is added to update selection &#xD;&#xA;    					causeEnter = causeUpdate.enter().append(""g"")&#xD;&#xA;    					 .attr(""class"", ""CAUSE"")&#xD;&#xA;    					 .attr(""transform"", function (d) { return ""translate("" + x0(d.CAUSE) + "",0)""; }),&#xD;&#xA;    			//EXIT&#xD;&#xA;    					causeExit = causeUpdate.exit().remove(),&#xD;&#xA;&#xD;&#xA;    		//Series groups&#xD;&#xA;    			//UPDATE&#xD;&#xA;    					seriesUpdate = causeUpdate.selectAll(""rect"")&#xD;&#xA;    					.data(function (d) {&#xD;&#xA;    						return d.series;&#xD;&#xA;    					});&#xD;&#xA;    			//ENTER ****native d3 SIDE EFFECT**** enter selection is added to update selection &#xD;&#xA;    			seriesUpdate.enter().append(""rect"")&#xD;&#xA;    			//UPDATE + ENTER&#xD;&#xA;    			seriesUpdate.attr(""width"", x1.rangeBand())&#xD;&#xA;    			.style(""fill"", function (d) {&#xD;&#xA;    				return color(d.name);&#xD;&#xA;    			})&#xD;&#xA;                .transition()&#xD;&#xA;      			  .attr(""x"", function (d) {&#xD;&#xA;    				return x1(d.name);&#xD;&#xA;    			  })&#xD;&#xA;    			  .attr(""y"", function (d) {&#xD;&#xA;    				return y(d.value);&#xD;&#xA;    			  })&#xD;&#xA;    			  .attr(""height"", function (d) {&#xD;&#xA;    				return height - y(d.value);&#xD;&#xA;    			  })&#xD;&#xA;    			//EXIT&#xD;&#xA;    			seriesUpdate.exit().remove()&#xD;&#xA;    		}&#xD;&#xA;&#xD;&#xA;    		//draw the bars&#xD;&#xA;    		svg.append(""g"")&#xD;&#xA;    				.attr(""class"", ""x axis"")&#xD;&#xA;    				.attr(""transform"", ""translate(0,"" + height + "")"")&#xD;&#xA;    				.call(xAxis)&#xD;&#xA;    				.selectAll('text')&#xD;&#xA;    					.attr('transform', 'rotate(-15)')&#xD;&#xA;    					.style('text-anchor', 'end');&#xD;&#xA;&#xD;&#xA;    		svg.append(""g"")&#xD;&#xA;    				.attr(""class"", ""y axis"")&#xD;&#xA;    				.call(yAxis)&#xD;&#xA;    				.append(""text"")&#xD;&#xA;    				.attr(""transform"", ""rotate(-90)"")&#xD;&#xA;    				.attr(""y"", 6)&#xD;&#xA;    				.attr(""dy"", "".71em"")&#xD;&#xA;    				.style(""text-anchor"", ""end"")&#xD;&#xA;    				.text(""Potential Years Lost"");&#xD;&#xA;&#xD;&#xA;          d3.selectAll("".tick > text"")&#xD;&#xA;          .style(""font-size"", 6);&#xD;&#xA;&#xD;&#xA;    	})&#xD;&#xA;    };&#xD;&#xA;&#xD;&#xA;<!-- language: lang-css -->&#xD;&#xA;&#xD;&#xA;    body {&#xD;&#xA;      font: 10px sans-serif;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    .axis path,&#xD;&#xA;    .axis line {&#xD;&#xA;      fill: none;&#xD;&#xA;      stroke: #000;&#xD;&#xA;      shape-rendering: crispEdges;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    .bar {&#xD;&#xA;      fill: steelblue;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    .x.axis path {&#xD;&#xA;      display: none;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;<!-- language: lang-html -->&#xD;&#xA;&#xD;&#xA;    <script src=""https://cdnjs.cloudflare.com/ajax/libs/d3/3.4.11/d3.min.js""></script>&#xD;&#xA;    <script src=""https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js""></script>&#xD;&#xA;        <label for=""sexYear"" style=""display: inline-block; width: 200px; text-align: right"">&#xD;&#xA;            Year = <span id=""sexYear-value"">…</span>&#xD;&#xA;        </label>&#xD;&#xA;        <input type=""range"" min=""1979"" max=""1999"" id=""sexYear"">&#xD;&#xA;&#xD;&#xA;<!-- end snippet -->&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;";;added 113 characters in body
87430791;29443655;2670182;5;2dddcaa8-ba22-48ca-ac21-276cee580945;2015-04-05 17:24:51.0;"You shouldn't be doing this...&#xD;&#xA;&#xD;&#xA;	request_data = data;&#xD;&#xA;&#xD;&#xA;and this line is referring to the global `year` when it should be the local argument sexYear&#xD;&#xA;&#xD;&#xA;		var yearData = data.filter(function (element) { return element.YEAR == year });&#xD;&#xA;should be &#xD;&#xA;&#xD;&#xA;		var yearData = data.filter(function (element) { return element.YEAR == sexYear });&#xD;&#xA;&#xD;&#xA;Also, try the `change` event as well as `input` so it works in IE...&#xD;&#xA;&#xD;&#xA;	d3.select(""#sexYear"").on(""change"", function () {&#xD;&#xA;		update(+this.value);&#xD;&#xA;	});&#xD;&#xA;&#xD;&#xA;`this.value` is undefined here because update is called with global `this` context&#xD;&#xA;&#xD;&#xA; &#xD;&#xA;&#xD;&#xA;    function update(sexYear) { &#xD;&#xA;        console.log(this.value);&#xD;&#xA;&#xD;&#xA;you should read these two lines and think about what they are doing...&#xD;&#xA;&#xD;&#xA;		var ageNames = d3.keys(yearData[0]).filter(function (key) { return key !== ""CAUSE""; });&#xD;&#xA;		var ageNames = d3.keys(yearData[0]).filter(function (key) { return key !== ""YEAR""; });&#xD;&#xA;I guarantee it's not what you think.&#xD;&#xA;&#xD;&#xA;`ageNames` is a very confusing name for this, it should be `seriesNames` for example.  Then you can implement like this...&#xD;&#xA;&#xD;&#xA;	var notSeriesNames = ['CAUSE', 'YEAR']&#xD;&#xA;    //...&#xD;&#xA;	var seriesNames = d3.keys(yearData[0]).filter(function (key) {&#xD;&#xA;		return notSeriesNames.every(function (e, i, i) { return key != e })&#xD;&#xA;	});&#xD;&#xA;&#xD;&#xA;Finally, you need to fix the UPDATE, ENTER, EXIT structure.  Here is the function with everything fixed...&#xD;&#xA;&#xD;&#xA;<!-- begin snippet: js hide: false -->&#xD;&#xA;&#xD;&#xA;<!-- language: lang-js -->&#xD;&#xA;&#xD;&#xA;    window.onload = function () {&#xD;&#xA;    	console.clear();&#xD;&#xA;    	var margin = { top: 10, right: 10, bottom: 35, left: 30 },&#xD;&#xA;    			width = 400 - margin.left - margin.right,&#xD;&#xA;    			height = 150 - margin.top - margin.bottom;&#xD;&#xA;&#xD;&#xA;    	var x0 = d3.scale.ordinal()&#xD;&#xA;    			.rangeRoundBands([0, width], 0.1);&#xD;&#xA;&#xD;&#xA;    	var x1 = d3.scale.ordinal();&#xD;&#xA;&#xD;&#xA;    	var y = d3.scale.linear()&#xD;&#xA;    			.range([height, 0]);&#xD;&#xA;&#xD;&#xA;    	var color = d3.scale.ordinal()&#xD;&#xA;    			.range([""#FD8C25"", ""#99ABC4""]);&#xD;&#xA;&#xD;&#xA;    	var xAxis = d3.svg.axis()&#xD;&#xA;    			.scale(x0)&#xD;&#xA;    			.orient(""bottom"");&#xD;&#xA;&#xD;&#xA;    	var year = 1979;&#xD;&#xA;&#xD;&#xA;    	var yAxis = d3.svg.axis()&#xD;&#xA;    			.scale(y)&#xD;&#xA;    			.orient(""left"")&#xD;&#xA;    			.tickFormat(d3.format("".2s""));&#xD;&#xA;&#xD;&#xA;    	var svg = d3.select(""body"").append(""svg"")&#xD;&#xA;    			.attr(""width"", width + margin.left + margin.right)&#xD;&#xA;    			.attr(""height"", height + margin.top + margin.bottom)&#xD;&#xA;    			.append(""g"")&#xD;&#xA;    			.attr(""transform"", ""translate("" + margin.left + "","" + margin.top + "")"");&#xD;&#xA;&#xD;&#xA;    	var request_data = d3.csv(""http://www.sfu.ca/~gdwang/Sex.csv"", function (error, data) {&#xD;&#xA;&#xD;&#xA;    		d3.select(""#sexYear"").on(""change"", function () {&#xD;&#xA;    			update(+this.value);&#xD;&#xA;    		});&#xD;&#xA;&#xD;&#xA;    		d3.select(""#sexYear"").on(""input"", function () {&#xD;&#xA;    			update(+this.value);&#xD;&#xA;    		});&#xD;&#xA;    		update(year);&#xD;&#xA;&#xD;&#xA;    		// update the year&#xD;&#xA;    		function update(sexYear) {&#xD;&#xA;    			var notSeriesNames = ['CAUSE', 'YEAR', 'series']&#xD;&#xA;    			console.log('update ', sexYear);&#xD;&#xA;&#xD;&#xA;    			// adjust the text on the year slider&#xD;&#xA;    			d3.select(""#sexYear-value"").text(sexYear);&#xD;&#xA;    			d3.select(""#sexYear"").property(""value"", sexYear);&#xD;&#xA;&#xD;&#xA;    			var yearData = data.filter(function (element) { return element.YEAR == sexYear });&#xD;&#xA;&#xD;&#xA;    			var seriesNames = d3.keys(yearData[0]).filter(function (key) {&#xD;&#xA;    				return notSeriesNames.every(function (element, idnex, array) {&#xD;&#xA;    					return key != element&#xD;&#xA;    				})&#xD;&#xA;    			});&#xD;&#xA;&#xD;&#xA;    			yearData.forEach(function (d) {&#xD;&#xA;    				d.series = seriesNames.map(function (name) { return { name: name, value: +d[name] }; });&#xD;&#xA;    			});&#xD;&#xA;&#xD;&#xA;    			x0.domain(yearData.map(function (d) { return d.CAUSE; }));&#xD;&#xA;    			x1.domain(seriesNames).rangeRoundBands([0, x0.rangeBand()]);&#xD;&#xA;    			y.domain([0, d3.max(yearData, function (d) { return d3.max(d.series, function (d) { return d.value; }); })]);&#xD;&#xA;&#xD;&#xA;    			//Cause groups&#xD;&#xA;    			//UPDATE&#xD;&#xA;    			var causeUpdate = svg.selectAll("".CAUSE"")&#xD;&#xA;    					 .data(yearData),&#xD;&#xA;    			//ENTER ****native d3 SIDE EFFECT**** enter selection is added to update selection &#xD;&#xA;    					causeEnter = causeUpdate.enter().append(""g"")&#xD;&#xA;    					 .attr(""class"", ""CAUSE"")&#xD;&#xA;    					 .attr(""transform"", function (d) { return ""translate("" + x0(d.CAUSE) + "",0)""; }),&#xD;&#xA;    			//EXIT&#xD;&#xA;    					causeExit = causeUpdate.exit().remove(),&#xD;&#xA;&#xD;&#xA;    		//Series groups&#xD;&#xA;    			//UPDATE&#xD;&#xA;    					seriesUpdate = causeUpdate.selectAll(""rect"")&#xD;&#xA;    					.data(function (d) {&#xD;&#xA;    						return d.series;&#xD;&#xA;    					});&#xD;&#xA;    			//ENTER ****native d3 SIDE EFFECT**** enter selection is added to update selection &#xD;&#xA;    			seriesUpdate.enter().append(""rect"")&#xD;&#xA;    			//UPDATE + ENTER&#xD;&#xA;    			seriesUpdate.attr(""width"", x1.rangeBand())&#xD;&#xA;    			.style(""fill"", function (d) {&#xD;&#xA;    				return color(d.name);&#xD;&#xA;    			})&#xD;&#xA;    						.transition()&#xD;&#xA;    					.attr(""x"", function (d) {&#xD;&#xA;    						return x1(d.name);&#xD;&#xA;    					})&#xD;&#xA;    				.attr(""y"", function (d) {&#xD;&#xA;    					return y(d.value);&#xD;&#xA;    				})&#xD;&#xA;    				.attr(""height"", function (d) {&#xD;&#xA;    					return height - y(d.value);&#xD;&#xA;    				})&#xD;&#xA;    			//EXIT&#xD;&#xA;    			seriesUpdate.exit().remove()&#xD;&#xA;    		}&#xD;&#xA;&#xD;&#xA;    		//draw the bars&#xD;&#xA;    		svg.append(""g"")&#xD;&#xA;    				.attr(""class"", ""x axis"")&#xD;&#xA;    				.attr(""transform"", ""translate(0,"" + height + "")"")&#xD;&#xA;    				.call(xAxis)&#xD;&#xA;    				.selectAll('text')&#xD;&#xA;    					.attr('transform', 'rotate(-15)')&#xD;&#xA;    					.style('text-anchor', 'end');&#xD;&#xA;&#xD;&#xA;    		svg.append(""g"")&#xD;&#xA;    				.attr(""class"", ""y axis"")&#xD;&#xA;    				.call(yAxis)&#xD;&#xA;    				.append(""text"")&#xD;&#xA;    				.attr(""transform"", ""rotate(-90)"")&#xD;&#xA;    				.attr(""y"", 6)&#xD;&#xA;    				.attr(""dy"", "".71em"")&#xD;&#xA;    				.style(""text-anchor"", ""end"")&#xD;&#xA;    				.text(""Potential Years Lost"");&#xD;&#xA;&#xD;&#xA;    		d3.selectAll("".tick > text"")&#xD;&#xA;    		.style(""font-size"", 6);&#xD;&#xA;&#xD;&#xA;    	})&#xD;&#xA;    };&#xD;&#xA;&#xD;&#xA;<!-- language: lang-css -->&#xD;&#xA;&#xD;&#xA;    body {&#xD;&#xA;      font: 10px sans-serif;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    .axis path,&#xD;&#xA;    .axis line {&#xD;&#xA;      fill: none;&#xD;&#xA;      stroke: #000;&#xD;&#xA;      shape-rendering: crispEdges;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    .bar {&#xD;&#xA;      fill: steelblue;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    .x.axis path {&#xD;&#xA;      display: none;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;<!-- language: lang-html -->&#xD;&#xA;&#xD;&#xA;    <script src=""https://cdnjs.cloudflare.com/ajax/libs/d3/3.4.11/d3.min.js""></script>&#xD;&#xA;    <script src=""https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js""></script>&#xD;&#xA;        <label for=""sexYear"" style=""display: inline-block; width: 200px; text-align: right"">&#xD;&#xA;            Year = <span id=""sexYear-value"">…</span>&#xD;&#xA;        </label>&#xD;&#xA;        <input type=""range"" min=""1979"" max=""1999"" id=""sexYear"">&#xD;&#xA;&#xD;&#xA;<!-- end snippet -->&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;";;fixed a moot error in the way series names was derived
